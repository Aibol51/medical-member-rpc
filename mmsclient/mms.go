// Code generated by goctl. DO NOT EDIT.
// Source: mms.proto

package mmsclient

import (
	"context"

	"github.com/suyuan32/simple-admin-member-rpc/types/mms"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AppointmentInfo       = mms.AppointmentInfo
	AppointmentListReq    = mms.AppointmentListReq
	AppointmentListResp   = mms.AppointmentListResp
	BaseIDResp            = mms.BaseIDResp
	BaseResp              = mms.BaseResp
	BaseUUIDResp          = mms.BaseUUIDResp
	CallbackReq           = mms.CallbackReq
	Empty                 = mms.Empty
	IDReq                 = mms.IDReq
	IDsReq                = mms.IDsReq
	MedicineInfo          = mms.MedicineInfo
	MedicineListReq       = mms.MedicineListReq
	MedicineListResp      = mms.MedicineListResp
	MemberInfo            = mms.MemberInfo
	MemberListReq         = mms.MemberListReq
	MemberListResp        = mms.MemberListResp
	MemberLoginResp       = mms.MemberLoginResp
	MemberRankInfo        = mms.MemberRankInfo
	MemberRankListReq     = mms.MemberRankListReq
	MemberRankListResp    = mms.MemberRankListResp
	MemberRegisterReq     = mms.MemberRegisterReq
	MobileReq             = mms.MobileReq
	NewsInfo              = mms.NewsInfo
	NewsListReq           = mms.NewsListReq
	NewsListResp          = mms.NewsListResp
	OauthLoginReq         = mms.OauthLoginReq
	OauthProviderInfo     = mms.OauthProviderInfo
	OauthProviderListReq  = mms.OauthProviderListReq
	OauthProviderListResp = mms.OauthProviderListResp
	OauthRedirectResp     = mms.OauthRedirectResp
	PageInfoReq           = mms.PageInfoReq
	SwiperInfo            = mms.SwiperInfo
	SwiperListReq         = mms.SwiperListReq
	SwiperListResp        = mms.SwiperListResp
	TokenInfo             = mms.TokenInfo
	TokenListReq          = mms.TokenListReq
	TokenListResp         = mms.TokenListResp
	UUIDReq               = mms.UUIDReq
	UUIDsReq              = mms.UUIDsReq
	UsernameReq           = mms.UsernameReq

	Mms interface {
		// Appointment management
		CreateAppointment(ctx context.Context, in *AppointmentInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error)
		UpdateAppointment(ctx context.Context, in *AppointmentInfo, opts ...grpc.CallOption) (*BaseResp, error)
		GetAppointmentList(ctx context.Context, in *AppointmentListReq, opts ...grpc.CallOption) (*AppointmentListResp, error)
		GetAppointmentById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*AppointmentInfo, error)
		DeleteAppointment(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error)
		InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error)
		// Medicine management
		GetMedicineList(ctx context.Context, in *MedicineListReq, opts ...grpc.CallOption) (*MedicineListResp, error)
		GetMedicineById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*MedicineInfo, error)
		// Member management
		CreateMember(ctx context.Context, in *MemberInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error)
		UpdateMember(ctx context.Context, in *MemberInfo, opts ...grpc.CallOption) (*BaseResp, error)
		GetMemberList(ctx context.Context, in *MemberListReq, opts ...grpc.CallOption) (*MemberListResp, error)
		DeleteMember(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error)
		GetMemberById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*MemberInfo, error)
		GetMemberByUsername(ctx context.Context, in *UsernameReq, opts ...grpc.CallOption) (*MemberInfo, error)
		GetMemberByMobile(ctx context.Context, in *MobileReq, opts ...grpc.CallOption) (*MemberInfo, error)
		// MemberRank management
		CreateMemberRank(ctx context.Context, in *MemberRankInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
		UpdateMemberRank(ctx context.Context, in *MemberRankInfo, opts ...grpc.CallOption) (*BaseResp, error)
		GetMemberRankList(ctx context.Context, in *MemberRankListReq, opts ...grpc.CallOption) (*MemberRankListResp, error)
		GetMemberRankById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*MemberRankInfo, error)
		DeleteMemberRank(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
		// News management
		GetNewsList(ctx context.Context, in *NewsListReq, opts ...grpc.CallOption) (*NewsListResp, error)
		GetNewsById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*NewsInfo, error)
		// OauthProvider management
		CreateOauthProvider(ctx context.Context, in *OauthProviderInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
		UpdateOauthProvider(ctx context.Context, in *OauthProviderInfo, opts ...grpc.CallOption) (*BaseResp, error)
		GetOauthProviderList(ctx context.Context, in *OauthProviderListReq, opts ...grpc.CallOption) (*OauthProviderListResp, error)
		GetOauthProviderById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*OauthProviderInfo, error)
		DeleteOauthProvider(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
		OauthLogin(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*OauthRedirectResp, error)
		OauthCallback(ctx context.Context, in *CallbackReq, opts ...grpc.CallOption) (*MemberInfo, error)
		WechatMiniProgramLogin(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*BaseResp, error)
		// Swiper management
		GetSwiperList(ctx context.Context, in *SwiperListReq, opts ...grpc.CallOption) (*SwiperListResp, error)
		GetSwiperById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*SwiperInfo, error)
		// Token management
		CreateToken(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error)
		DeleteToken(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error)
		GetTokenList(ctx context.Context, in *TokenListReq, opts ...grpc.CallOption) (*TokenListResp, error)
		GetTokenById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*TokenInfo, error)
		BlockUserAllToken(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*BaseResp, error)
		UpdateToken(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*BaseResp, error)
	}

	defaultMms struct {
		cli zrpc.Client
	}
)

func NewMms(cli zrpc.Client) Mms {
	return &defaultMms{
		cli: cli,
	}
}

// Appointment management
func (m *defaultMms) CreateAppointment(ctx context.Context, in *AppointmentInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error) {
	client := mms.NewMmsClient(m.cli.Conn())
	return client.CreateAppointment(ctx, in, opts...)
}

func (m *defaultMms) UpdateAppointment(ctx context.Context, in *AppointmentInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := mms.NewMmsClient(m.cli.Conn())
	return client.UpdateAppointment(ctx, in, opts...)
}

func (m *defaultMms) GetAppointmentList(ctx context.Context, in *AppointmentListReq, opts ...grpc.CallOption) (*AppointmentListResp, error) {
	client := mms.NewMmsClient(m.cli.Conn())
	return client.GetAppointmentList(ctx, in, opts...)
}

func (m *defaultMms) GetAppointmentById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*AppointmentInfo, error) {
	client := mms.NewMmsClient(m.cli.Conn())
	return client.GetAppointmentById(ctx, in, opts...)
}

func (m *defaultMms) DeleteAppointment(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := mms.NewMmsClient(m.cli.Conn())
	return client.DeleteAppointment(ctx, in, opts...)
}

func (m *defaultMms) InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error) {
	client := mms.NewMmsClient(m.cli.Conn())
	return client.InitDatabase(ctx, in, opts...)
}

// Medicine management
func (m *defaultMms) GetMedicineList(ctx context.Context, in *MedicineListReq, opts ...grpc.CallOption) (*MedicineListResp, error) {
	client := mms.NewMmsClient(m.cli.Conn())
	return client.GetMedicineList(ctx, in, opts...)
}

func (m *defaultMms) GetMedicineById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*MedicineInfo, error) {
	client := mms.NewMmsClient(m.cli.Conn())
	return client.GetMedicineById(ctx, in, opts...)
}

// Member management
func (m *defaultMms) CreateMember(ctx context.Context, in *MemberInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error) {
	client := mms.NewMmsClient(m.cli.Conn())
	return client.CreateMember(ctx, in, opts...)
}

func (m *defaultMms) UpdateMember(ctx context.Context, in *MemberInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := mms.NewMmsClient(m.cli.Conn())
	return client.UpdateMember(ctx, in, opts...)
}

func (m *defaultMms) GetMemberList(ctx context.Context, in *MemberListReq, opts ...grpc.CallOption) (*MemberListResp, error) {
	client := mms.NewMmsClient(m.cli.Conn())
	return client.GetMemberList(ctx, in, opts...)
}

func (m *defaultMms) DeleteMember(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := mms.NewMmsClient(m.cli.Conn())
	return client.DeleteMember(ctx, in, opts...)
}

func (m *defaultMms) GetMemberById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*MemberInfo, error) {
	client := mms.NewMmsClient(m.cli.Conn())
	return client.GetMemberById(ctx, in, opts...)
}

func (m *defaultMms) GetMemberByUsername(ctx context.Context, in *UsernameReq, opts ...grpc.CallOption) (*MemberInfo, error) {
	client := mms.NewMmsClient(m.cli.Conn())
	return client.GetMemberByUsername(ctx, in, opts...)
}

func (m *defaultMms) GetMemberByMobile(ctx context.Context, in *MobileReq, opts ...grpc.CallOption) (*MemberInfo, error) {
	client := mms.NewMmsClient(m.cli.Conn())
	return client.GetMemberByMobile(ctx, in, opts...)
}

// MemberRank management
func (m *defaultMms) CreateMemberRank(ctx context.Context, in *MemberRankInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	client := mms.NewMmsClient(m.cli.Conn())
	return client.CreateMemberRank(ctx, in, opts...)
}

func (m *defaultMms) UpdateMemberRank(ctx context.Context, in *MemberRankInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := mms.NewMmsClient(m.cli.Conn())
	return client.UpdateMemberRank(ctx, in, opts...)
}

func (m *defaultMms) GetMemberRankList(ctx context.Context, in *MemberRankListReq, opts ...grpc.CallOption) (*MemberRankListResp, error) {
	client := mms.NewMmsClient(m.cli.Conn())
	return client.GetMemberRankList(ctx, in, opts...)
}

func (m *defaultMms) GetMemberRankById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*MemberRankInfo, error) {
	client := mms.NewMmsClient(m.cli.Conn())
	return client.GetMemberRankById(ctx, in, opts...)
}

func (m *defaultMms) DeleteMemberRank(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := mms.NewMmsClient(m.cli.Conn())
	return client.DeleteMemberRank(ctx, in, opts...)
}

// News management
func (m *defaultMms) GetNewsList(ctx context.Context, in *NewsListReq, opts ...grpc.CallOption) (*NewsListResp, error) {
	client := mms.NewMmsClient(m.cli.Conn())
	return client.GetNewsList(ctx, in, opts...)
}

func (m *defaultMms) GetNewsById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*NewsInfo, error) {
	client := mms.NewMmsClient(m.cli.Conn())
	return client.GetNewsById(ctx, in, opts...)
}

// OauthProvider management
func (m *defaultMms) CreateOauthProvider(ctx context.Context, in *OauthProviderInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	client := mms.NewMmsClient(m.cli.Conn())
	return client.CreateOauthProvider(ctx, in, opts...)
}

func (m *defaultMms) UpdateOauthProvider(ctx context.Context, in *OauthProviderInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := mms.NewMmsClient(m.cli.Conn())
	return client.UpdateOauthProvider(ctx, in, opts...)
}

func (m *defaultMms) GetOauthProviderList(ctx context.Context, in *OauthProviderListReq, opts ...grpc.CallOption) (*OauthProviderListResp, error) {
	client := mms.NewMmsClient(m.cli.Conn())
	return client.GetOauthProviderList(ctx, in, opts...)
}

func (m *defaultMms) GetOauthProviderById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*OauthProviderInfo, error) {
	client := mms.NewMmsClient(m.cli.Conn())
	return client.GetOauthProviderById(ctx, in, opts...)
}

func (m *defaultMms) DeleteOauthProvider(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := mms.NewMmsClient(m.cli.Conn())
	return client.DeleteOauthProvider(ctx, in, opts...)
}

func (m *defaultMms) OauthLogin(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*OauthRedirectResp, error) {
	client := mms.NewMmsClient(m.cli.Conn())
	return client.OauthLogin(ctx, in, opts...)
}

func (m *defaultMms) OauthCallback(ctx context.Context, in *CallbackReq, opts ...grpc.CallOption) (*MemberInfo, error) {
	client := mms.NewMmsClient(m.cli.Conn())
	return client.OauthCallback(ctx, in, opts...)
}

func (m *defaultMms) WechatMiniProgramLogin(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := mms.NewMmsClient(m.cli.Conn())
	return client.WechatMiniProgramLogin(ctx, in, opts...)
}

// Swiper management
func (m *defaultMms) GetSwiperList(ctx context.Context, in *SwiperListReq, opts ...grpc.CallOption) (*SwiperListResp, error) {
	client := mms.NewMmsClient(m.cli.Conn())
	return client.GetSwiperList(ctx, in, opts...)
}

func (m *defaultMms) GetSwiperById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*SwiperInfo, error) {
	client := mms.NewMmsClient(m.cli.Conn())
	return client.GetSwiperById(ctx, in, opts...)
}

// Token management
func (m *defaultMms) CreateToken(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error) {
	client := mms.NewMmsClient(m.cli.Conn())
	return client.CreateToken(ctx, in, opts...)
}

func (m *defaultMms) DeleteToken(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := mms.NewMmsClient(m.cli.Conn())
	return client.DeleteToken(ctx, in, opts...)
}

func (m *defaultMms) GetTokenList(ctx context.Context, in *TokenListReq, opts ...grpc.CallOption) (*TokenListResp, error) {
	client := mms.NewMmsClient(m.cli.Conn())
	return client.GetTokenList(ctx, in, opts...)
}

func (m *defaultMms) GetTokenById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*TokenInfo, error) {
	client := mms.NewMmsClient(m.cli.Conn())
	return client.GetTokenById(ctx, in, opts...)
}

func (m *defaultMms) BlockUserAllToken(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := mms.NewMmsClient(m.cli.Conn())
	return client.BlockUserAllToken(ctx, in, opts...)
}

func (m *defaultMms) UpdateToken(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := mms.NewMmsClient(m.cli.Conn())
	return client.UpdateToken(ctx, in, opts...)
}
