// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/suyuan32/simple-admin-member-rpc/ent/expert"
)

// Expert is the model entity for the Expert schema.
type Expert struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Create Time | 创建日期
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Update Time | 修改日期
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Status 1: normal 2: ban | 状态 1 正常 2 禁用
	Status uint8 `json:"status,omitempty"`
	// Sort Number | 排序编号
	Sort uint32 `json:"sort,omitempty"`
	// Chinese name | 中文名称
	NameZh string `json:"name_zh,omitempty"`
	// English name | 英文名称
	NameEn string `json:"name_en,omitempty"`
	// Russian name | 俄语名称
	NameRu string `json:"name_ru,omitempty"`
	// Kazakh name | 哈萨克语名称
	NameKk string `json:"name_kk,omitempty"`
	// Chinese content | 中文内容
	ContentZh string `json:"content_zh,omitempty"`
	// English content | 英文内容
	ContentEn string `json:"content_en,omitempty"`
	// Russian content | 俄语内容
	ContentRu string `json:"content_ru,omitempty"`
	// Kazakh content | 哈萨克语内容
	ContentKk string `json:"content_kk,omitempty"`
	// Cover image URL | 封面图片URL
	CoverURL     string `json:"cover_url,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Expert) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case expert.FieldID, expert.FieldStatus, expert.FieldSort:
			values[i] = new(sql.NullInt64)
		case expert.FieldNameZh, expert.FieldNameEn, expert.FieldNameRu, expert.FieldNameKk, expert.FieldContentZh, expert.FieldContentEn, expert.FieldContentRu, expert.FieldContentKk, expert.FieldCoverURL:
			values[i] = new(sql.NullString)
		case expert.FieldCreatedAt, expert.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Expert fields.
func (e *Expert) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case expert.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = uint64(value.Int64)
		case expert.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				e.CreatedAt = value.Time
			}
		case expert.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				e.UpdatedAt = value.Time
			}
		case expert.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				e.Status = uint8(value.Int64)
			}
		case expert.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				e.Sort = uint32(value.Int64)
			}
		case expert.FieldNameZh:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name_zh", values[i])
			} else if value.Valid {
				e.NameZh = value.String
			}
		case expert.FieldNameEn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name_en", values[i])
			} else if value.Valid {
				e.NameEn = value.String
			}
		case expert.FieldNameRu:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name_ru", values[i])
			} else if value.Valid {
				e.NameRu = value.String
			}
		case expert.FieldNameKk:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name_kk", values[i])
			} else if value.Valid {
				e.NameKk = value.String
			}
		case expert.FieldContentZh:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content_zh", values[i])
			} else if value.Valid {
				e.ContentZh = value.String
			}
		case expert.FieldContentEn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content_en", values[i])
			} else if value.Valid {
				e.ContentEn = value.String
			}
		case expert.FieldContentRu:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content_ru", values[i])
			} else if value.Valid {
				e.ContentRu = value.String
			}
		case expert.FieldContentKk:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content_kk", values[i])
			} else if value.Valid {
				e.ContentKk = value.String
			}
		case expert.FieldCoverURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cover_url", values[i])
			} else if value.Valid {
				e.CoverURL = value.String
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Expert.
// This includes values selected through modifiers, order, etc.
func (e *Expert) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// Update returns a builder for updating this Expert.
// Note that you need to call Expert.Unwrap() before calling this method if this Expert
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Expert) Update() *ExpertUpdateOne {
	return NewExpertClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Expert entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Expert) Unwrap() *Expert {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Expert is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Expert) String() string {
	var builder strings.Builder
	builder.WriteString("Expert(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("created_at=")
	builder.WriteString(e.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(e.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", e.Status))
	builder.WriteString(", ")
	builder.WriteString("sort=")
	builder.WriteString(fmt.Sprintf("%v", e.Sort))
	builder.WriteString(", ")
	builder.WriteString("name_zh=")
	builder.WriteString(e.NameZh)
	builder.WriteString(", ")
	builder.WriteString("name_en=")
	builder.WriteString(e.NameEn)
	builder.WriteString(", ")
	builder.WriteString("name_ru=")
	builder.WriteString(e.NameRu)
	builder.WriteString(", ")
	builder.WriteString("name_kk=")
	builder.WriteString(e.NameKk)
	builder.WriteString(", ")
	builder.WriteString("content_zh=")
	builder.WriteString(e.ContentZh)
	builder.WriteString(", ")
	builder.WriteString("content_en=")
	builder.WriteString(e.ContentEn)
	builder.WriteString(", ")
	builder.WriteString("content_ru=")
	builder.WriteString(e.ContentRu)
	builder.WriteString(", ")
	builder.WriteString("content_kk=")
	builder.WriteString(e.ContentKk)
	builder.WriteString(", ")
	builder.WriteString("cover_url=")
	builder.WriteString(e.CoverURL)
	builder.WriteByte(')')
	return builder.String()
}

// Experts is a parsable slice of Expert.
type Experts []*Expert
