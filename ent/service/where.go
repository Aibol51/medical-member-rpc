// Code generated by ent, DO NOT EDIT.

package service

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/suyuan32/simple-admin-member-rpc/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldUpdatedAt, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v uint8) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldStatus, v))
}

// Sort applies equality check predicate on the "sort" field. It's identical to SortEQ.
func Sort(v uint32) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldSort, v))
}

// NameZh applies equality check predicate on the "name_zh" field. It's identical to NameZhEQ.
func NameZh(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldNameZh, v))
}

// NameEn applies equality check predicate on the "name_en" field. It's identical to NameEnEQ.
func NameEn(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldNameEn, v))
}

// NameRu applies equality check predicate on the "name_ru" field. It's identical to NameRuEQ.
func NameRu(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldNameRu, v))
}

// NameKk applies equality check predicate on the "name_kk" field. It's identical to NameKkEQ.
func NameKk(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldNameKk, v))
}

// DescriptionZh applies equality check predicate on the "description_zh" field. It's identical to DescriptionZhEQ.
func DescriptionZh(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldDescriptionZh, v))
}

// DescriptionEn applies equality check predicate on the "description_en" field. It's identical to DescriptionEnEQ.
func DescriptionEn(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldDescriptionEn, v))
}

// DescriptionRu applies equality check predicate on the "description_ru" field. It's identical to DescriptionRuEQ.
func DescriptionRu(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldDescriptionRu, v))
}

// DescriptionKk applies equality check predicate on the "description_kk" field. It's identical to DescriptionKkEQ.
func DescriptionKk(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldDescriptionKk, v))
}

// CoverURL applies equality check predicate on the "cover_url" field. It's identical to CoverURLEQ.
func CoverURL(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldCoverURL, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldUpdatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v uint8) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v uint8) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...uint8) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...uint8) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v uint8) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v uint8) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v uint8) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v uint8) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Service {
	return predicate.Service(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Service {
	return predicate.Service(sql.FieldNotNull(FieldStatus))
}

// SortEQ applies the EQ predicate on the "sort" field.
func SortEQ(v uint32) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldSort, v))
}

// SortNEQ applies the NEQ predicate on the "sort" field.
func SortNEQ(v uint32) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldSort, v))
}

// SortIn applies the In predicate on the "sort" field.
func SortIn(vs ...uint32) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldSort, vs...))
}

// SortNotIn applies the NotIn predicate on the "sort" field.
func SortNotIn(vs ...uint32) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldSort, vs...))
}

// SortGT applies the GT predicate on the "sort" field.
func SortGT(v uint32) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldSort, v))
}

// SortGTE applies the GTE predicate on the "sort" field.
func SortGTE(v uint32) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldSort, v))
}

// SortLT applies the LT predicate on the "sort" field.
func SortLT(v uint32) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldSort, v))
}

// SortLTE applies the LTE predicate on the "sort" field.
func SortLTE(v uint32) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldSort, v))
}

// NameZhEQ applies the EQ predicate on the "name_zh" field.
func NameZhEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldNameZh, v))
}

// NameZhNEQ applies the NEQ predicate on the "name_zh" field.
func NameZhNEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldNameZh, v))
}

// NameZhIn applies the In predicate on the "name_zh" field.
func NameZhIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldNameZh, vs...))
}

// NameZhNotIn applies the NotIn predicate on the "name_zh" field.
func NameZhNotIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldNameZh, vs...))
}

// NameZhGT applies the GT predicate on the "name_zh" field.
func NameZhGT(v string) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldNameZh, v))
}

// NameZhGTE applies the GTE predicate on the "name_zh" field.
func NameZhGTE(v string) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldNameZh, v))
}

// NameZhLT applies the LT predicate on the "name_zh" field.
func NameZhLT(v string) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldNameZh, v))
}

// NameZhLTE applies the LTE predicate on the "name_zh" field.
func NameZhLTE(v string) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldNameZh, v))
}

// NameZhContains applies the Contains predicate on the "name_zh" field.
func NameZhContains(v string) predicate.Service {
	return predicate.Service(sql.FieldContains(FieldNameZh, v))
}

// NameZhHasPrefix applies the HasPrefix predicate on the "name_zh" field.
func NameZhHasPrefix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasPrefix(FieldNameZh, v))
}

// NameZhHasSuffix applies the HasSuffix predicate on the "name_zh" field.
func NameZhHasSuffix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasSuffix(FieldNameZh, v))
}

// NameZhEqualFold applies the EqualFold predicate on the "name_zh" field.
func NameZhEqualFold(v string) predicate.Service {
	return predicate.Service(sql.FieldEqualFold(FieldNameZh, v))
}

// NameZhContainsFold applies the ContainsFold predicate on the "name_zh" field.
func NameZhContainsFold(v string) predicate.Service {
	return predicate.Service(sql.FieldContainsFold(FieldNameZh, v))
}

// NameEnEQ applies the EQ predicate on the "name_en" field.
func NameEnEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldNameEn, v))
}

// NameEnNEQ applies the NEQ predicate on the "name_en" field.
func NameEnNEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldNameEn, v))
}

// NameEnIn applies the In predicate on the "name_en" field.
func NameEnIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldNameEn, vs...))
}

// NameEnNotIn applies the NotIn predicate on the "name_en" field.
func NameEnNotIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldNameEn, vs...))
}

// NameEnGT applies the GT predicate on the "name_en" field.
func NameEnGT(v string) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldNameEn, v))
}

// NameEnGTE applies the GTE predicate on the "name_en" field.
func NameEnGTE(v string) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldNameEn, v))
}

// NameEnLT applies the LT predicate on the "name_en" field.
func NameEnLT(v string) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldNameEn, v))
}

// NameEnLTE applies the LTE predicate on the "name_en" field.
func NameEnLTE(v string) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldNameEn, v))
}

// NameEnContains applies the Contains predicate on the "name_en" field.
func NameEnContains(v string) predicate.Service {
	return predicate.Service(sql.FieldContains(FieldNameEn, v))
}

// NameEnHasPrefix applies the HasPrefix predicate on the "name_en" field.
func NameEnHasPrefix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasPrefix(FieldNameEn, v))
}

// NameEnHasSuffix applies the HasSuffix predicate on the "name_en" field.
func NameEnHasSuffix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasSuffix(FieldNameEn, v))
}

// NameEnEqualFold applies the EqualFold predicate on the "name_en" field.
func NameEnEqualFold(v string) predicate.Service {
	return predicate.Service(sql.FieldEqualFold(FieldNameEn, v))
}

// NameEnContainsFold applies the ContainsFold predicate on the "name_en" field.
func NameEnContainsFold(v string) predicate.Service {
	return predicate.Service(sql.FieldContainsFold(FieldNameEn, v))
}

// NameRuEQ applies the EQ predicate on the "name_ru" field.
func NameRuEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldNameRu, v))
}

// NameRuNEQ applies the NEQ predicate on the "name_ru" field.
func NameRuNEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldNameRu, v))
}

// NameRuIn applies the In predicate on the "name_ru" field.
func NameRuIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldNameRu, vs...))
}

// NameRuNotIn applies the NotIn predicate on the "name_ru" field.
func NameRuNotIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldNameRu, vs...))
}

// NameRuGT applies the GT predicate on the "name_ru" field.
func NameRuGT(v string) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldNameRu, v))
}

// NameRuGTE applies the GTE predicate on the "name_ru" field.
func NameRuGTE(v string) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldNameRu, v))
}

// NameRuLT applies the LT predicate on the "name_ru" field.
func NameRuLT(v string) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldNameRu, v))
}

// NameRuLTE applies the LTE predicate on the "name_ru" field.
func NameRuLTE(v string) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldNameRu, v))
}

// NameRuContains applies the Contains predicate on the "name_ru" field.
func NameRuContains(v string) predicate.Service {
	return predicate.Service(sql.FieldContains(FieldNameRu, v))
}

// NameRuHasPrefix applies the HasPrefix predicate on the "name_ru" field.
func NameRuHasPrefix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasPrefix(FieldNameRu, v))
}

// NameRuHasSuffix applies the HasSuffix predicate on the "name_ru" field.
func NameRuHasSuffix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasSuffix(FieldNameRu, v))
}

// NameRuEqualFold applies the EqualFold predicate on the "name_ru" field.
func NameRuEqualFold(v string) predicate.Service {
	return predicate.Service(sql.FieldEqualFold(FieldNameRu, v))
}

// NameRuContainsFold applies the ContainsFold predicate on the "name_ru" field.
func NameRuContainsFold(v string) predicate.Service {
	return predicate.Service(sql.FieldContainsFold(FieldNameRu, v))
}

// NameKkEQ applies the EQ predicate on the "name_kk" field.
func NameKkEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldNameKk, v))
}

// NameKkNEQ applies the NEQ predicate on the "name_kk" field.
func NameKkNEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldNameKk, v))
}

// NameKkIn applies the In predicate on the "name_kk" field.
func NameKkIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldNameKk, vs...))
}

// NameKkNotIn applies the NotIn predicate on the "name_kk" field.
func NameKkNotIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldNameKk, vs...))
}

// NameKkGT applies the GT predicate on the "name_kk" field.
func NameKkGT(v string) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldNameKk, v))
}

// NameKkGTE applies the GTE predicate on the "name_kk" field.
func NameKkGTE(v string) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldNameKk, v))
}

// NameKkLT applies the LT predicate on the "name_kk" field.
func NameKkLT(v string) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldNameKk, v))
}

// NameKkLTE applies the LTE predicate on the "name_kk" field.
func NameKkLTE(v string) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldNameKk, v))
}

// NameKkContains applies the Contains predicate on the "name_kk" field.
func NameKkContains(v string) predicate.Service {
	return predicate.Service(sql.FieldContains(FieldNameKk, v))
}

// NameKkHasPrefix applies the HasPrefix predicate on the "name_kk" field.
func NameKkHasPrefix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasPrefix(FieldNameKk, v))
}

// NameKkHasSuffix applies the HasSuffix predicate on the "name_kk" field.
func NameKkHasSuffix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasSuffix(FieldNameKk, v))
}

// NameKkEqualFold applies the EqualFold predicate on the "name_kk" field.
func NameKkEqualFold(v string) predicate.Service {
	return predicate.Service(sql.FieldEqualFold(FieldNameKk, v))
}

// NameKkContainsFold applies the ContainsFold predicate on the "name_kk" field.
func NameKkContainsFold(v string) predicate.Service {
	return predicate.Service(sql.FieldContainsFold(FieldNameKk, v))
}

// DescriptionZhEQ applies the EQ predicate on the "description_zh" field.
func DescriptionZhEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldDescriptionZh, v))
}

// DescriptionZhNEQ applies the NEQ predicate on the "description_zh" field.
func DescriptionZhNEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldDescriptionZh, v))
}

// DescriptionZhIn applies the In predicate on the "description_zh" field.
func DescriptionZhIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldDescriptionZh, vs...))
}

// DescriptionZhNotIn applies the NotIn predicate on the "description_zh" field.
func DescriptionZhNotIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldDescriptionZh, vs...))
}

// DescriptionZhGT applies the GT predicate on the "description_zh" field.
func DescriptionZhGT(v string) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldDescriptionZh, v))
}

// DescriptionZhGTE applies the GTE predicate on the "description_zh" field.
func DescriptionZhGTE(v string) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldDescriptionZh, v))
}

// DescriptionZhLT applies the LT predicate on the "description_zh" field.
func DescriptionZhLT(v string) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldDescriptionZh, v))
}

// DescriptionZhLTE applies the LTE predicate on the "description_zh" field.
func DescriptionZhLTE(v string) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldDescriptionZh, v))
}

// DescriptionZhContains applies the Contains predicate on the "description_zh" field.
func DescriptionZhContains(v string) predicate.Service {
	return predicate.Service(sql.FieldContains(FieldDescriptionZh, v))
}

// DescriptionZhHasPrefix applies the HasPrefix predicate on the "description_zh" field.
func DescriptionZhHasPrefix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasPrefix(FieldDescriptionZh, v))
}

// DescriptionZhHasSuffix applies the HasSuffix predicate on the "description_zh" field.
func DescriptionZhHasSuffix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasSuffix(FieldDescriptionZh, v))
}

// DescriptionZhIsNil applies the IsNil predicate on the "description_zh" field.
func DescriptionZhIsNil() predicate.Service {
	return predicate.Service(sql.FieldIsNull(FieldDescriptionZh))
}

// DescriptionZhNotNil applies the NotNil predicate on the "description_zh" field.
func DescriptionZhNotNil() predicate.Service {
	return predicate.Service(sql.FieldNotNull(FieldDescriptionZh))
}

// DescriptionZhEqualFold applies the EqualFold predicate on the "description_zh" field.
func DescriptionZhEqualFold(v string) predicate.Service {
	return predicate.Service(sql.FieldEqualFold(FieldDescriptionZh, v))
}

// DescriptionZhContainsFold applies the ContainsFold predicate on the "description_zh" field.
func DescriptionZhContainsFold(v string) predicate.Service {
	return predicate.Service(sql.FieldContainsFold(FieldDescriptionZh, v))
}

// DescriptionEnEQ applies the EQ predicate on the "description_en" field.
func DescriptionEnEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldDescriptionEn, v))
}

// DescriptionEnNEQ applies the NEQ predicate on the "description_en" field.
func DescriptionEnNEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldDescriptionEn, v))
}

// DescriptionEnIn applies the In predicate on the "description_en" field.
func DescriptionEnIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldDescriptionEn, vs...))
}

// DescriptionEnNotIn applies the NotIn predicate on the "description_en" field.
func DescriptionEnNotIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldDescriptionEn, vs...))
}

// DescriptionEnGT applies the GT predicate on the "description_en" field.
func DescriptionEnGT(v string) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldDescriptionEn, v))
}

// DescriptionEnGTE applies the GTE predicate on the "description_en" field.
func DescriptionEnGTE(v string) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldDescriptionEn, v))
}

// DescriptionEnLT applies the LT predicate on the "description_en" field.
func DescriptionEnLT(v string) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldDescriptionEn, v))
}

// DescriptionEnLTE applies the LTE predicate on the "description_en" field.
func DescriptionEnLTE(v string) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldDescriptionEn, v))
}

// DescriptionEnContains applies the Contains predicate on the "description_en" field.
func DescriptionEnContains(v string) predicate.Service {
	return predicate.Service(sql.FieldContains(FieldDescriptionEn, v))
}

// DescriptionEnHasPrefix applies the HasPrefix predicate on the "description_en" field.
func DescriptionEnHasPrefix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasPrefix(FieldDescriptionEn, v))
}

// DescriptionEnHasSuffix applies the HasSuffix predicate on the "description_en" field.
func DescriptionEnHasSuffix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasSuffix(FieldDescriptionEn, v))
}

// DescriptionEnIsNil applies the IsNil predicate on the "description_en" field.
func DescriptionEnIsNil() predicate.Service {
	return predicate.Service(sql.FieldIsNull(FieldDescriptionEn))
}

// DescriptionEnNotNil applies the NotNil predicate on the "description_en" field.
func DescriptionEnNotNil() predicate.Service {
	return predicate.Service(sql.FieldNotNull(FieldDescriptionEn))
}

// DescriptionEnEqualFold applies the EqualFold predicate on the "description_en" field.
func DescriptionEnEqualFold(v string) predicate.Service {
	return predicate.Service(sql.FieldEqualFold(FieldDescriptionEn, v))
}

// DescriptionEnContainsFold applies the ContainsFold predicate on the "description_en" field.
func DescriptionEnContainsFold(v string) predicate.Service {
	return predicate.Service(sql.FieldContainsFold(FieldDescriptionEn, v))
}

// DescriptionRuEQ applies the EQ predicate on the "description_ru" field.
func DescriptionRuEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldDescriptionRu, v))
}

// DescriptionRuNEQ applies the NEQ predicate on the "description_ru" field.
func DescriptionRuNEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldDescriptionRu, v))
}

// DescriptionRuIn applies the In predicate on the "description_ru" field.
func DescriptionRuIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldDescriptionRu, vs...))
}

// DescriptionRuNotIn applies the NotIn predicate on the "description_ru" field.
func DescriptionRuNotIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldDescriptionRu, vs...))
}

// DescriptionRuGT applies the GT predicate on the "description_ru" field.
func DescriptionRuGT(v string) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldDescriptionRu, v))
}

// DescriptionRuGTE applies the GTE predicate on the "description_ru" field.
func DescriptionRuGTE(v string) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldDescriptionRu, v))
}

// DescriptionRuLT applies the LT predicate on the "description_ru" field.
func DescriptionRuLT(v string) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldDescriptionRu, v))
}

// DescriptionRuLTE applies the LTE predicate on the "description_ru" field.
func DescriptionRuLTE(v string) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldDescriptionRu, v))
}

// DescriptionRuContains applies the Contains predicate on the "description_ru" field.
func DescriptionRuContains(v string) predicate.Service {
	return predicate.Service(sql.FieldContains(FieldDescriptionRu, v))
}

// DescriptionRuHasPrefix applies the HasPrefix predicate on the "description_ru" field.
func DescriptionRuHasPrefix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasPrefix(FieldDescriptionRu, v))
}

// DescriptionRuHasSuffix applies the HasSuffix predicate on the "description_ru" field.
func DescriptionRuHasSuffix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasSuffix(FieldDescriptionRu, v))
}

// DescriptionRuIsNil applies the IsNil predicate on the "description_ru" field.
func DescriptionRuIsNil() predicate.Service {
	return predicate.Service(sql.FieldIsNull(FieldDescriptionRu))
}

// DescriptionRuNotNil applies the NotNil predicate on the "description_ru" field.
func DescriptionRuNotNil() predicate.Service {
	return predicate.Service(sql.FieldNotNull(FieldDescriptionRu))
}

// DescriptionRuEqualFold applies the EqualFold predicate on the "description_ru" field.
func DescriptionRuEqualFold(v string) predicate.Service {
	return predicate.Service(sql.FieldEqualFold(FieldDescriptionRu, v))
}

// DescriptionRuContainsFold applies the ContainsFold predicate on the "description_ru" field.
func DescriptionRuContainsFold(v string) predicate.Service {
	return predicate.Service(sql.FieldContainsFold(FieldDescriptionRu, v))
}

// DescriptionKkEQ applies the EQ predicate on the "description_kk" field.
func DescriptionKkEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldDescriptionKk, v))
}

// DescriptionKkNEQ applies the NEQ predicate on the "description_kk" field.
func DescriptionKkNEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldDescriptionKk, v))
}

// DescriptionKkIn applies the In predicate on the "description_kk" field.
func DescriptionKkIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldDescriptionKk, vs...))
}

// DescriptionKkNotIn applies the NotIn predicate on the "description_kk" field.
func DescriptionKkNotIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldDescriptionKk, vs...))
}

// DescriptionKkGT applies the GT predicate on the "description_kk" field.
func DescriptionKkGT(v string) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldDescriptionKk, v))
}

// DescriptionKkGTE applies the GTE predicate on the "description_kk" field.
func DescriptionKkGTE(v string) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldDescriptionKk, v))
}

// DescriptionKkLT applies the LT predicate on the "description_kk" field.
func DescriptionKkLT(v string) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldDescriptionKk, v))
}

// DescriptionKkLTE applies the LTE predicate on the "description_kk" field.
func DescriptionKkLTE(v string) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldDescriptionKk, v))
}

// DescriptionKkContains applies the Contains predicate on the "description_kk" field.
func DescriptionKkContains(v string) predicate.Service {
	return predicate.Service(sql.FieldContains(FieldDescriptionKk, v))
}

// DescriptionKkHasPrefix applies the HasPrefix predicate on the "description_kk" field.
func DescriptionKkHasPrefix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasPrefix(FieldDescriptionKk, v))
}

// DescriptionKkHasSuffix applies the HasSuffix predicate on the "description_kk" field.
func DescriptionKkHasSuffix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasSuffix(FieldDescriptionKk, v))
}

// DescriptionKkIsNil applies the IsNil predicate on the "description_kk" field.
func DescriptionKkIsNil() predicate.Service {
	return predicate.Service(sql.FieldIsNull(FieldDescriptionKk))
}

// DescriptionKkNotNil applies the NotNil predicate on the "description_kk" field.
func DescriptionKkNotNil() predicate.Service {
	return predicate.Service(sql.FieldNotNull(FieldDescriptionKk))
}

// DescriptionKkEqualFold applies the EqualFold predicate on the "description_kk" field.
func DescriptionKkEqualFold(v string) predicate.Service {
	return predicate.Service(sql.FieldEqualFold(FieldDescriptionKk, v))
}

// DescriptionKkContainsFold applies the ContainsFold predicate on the "description_kk" field.
func DescriptionKkContainsFold(v string) predicate.Service {
	return predicate.Service(sql.FieldContainsFold(FieldDescriptionKk, v))
}

// CoverURLEQ applies the EQ predicate on the "cover_url" field.
func CoverURLEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldCoverURL, v))
}

// CoverURLNEQ applies the NEQ predicate on the "cover_url" field.
func CoverURLNEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldCoverURL, v))
}

// CoverURLIn applies the In predicate on the "cover_url" field.
func CoverURLIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldCoverURL, vs...))
}

// CoverURLNotIn applies the NotIn predicate on the "cover_url" field.
func CoverURLNotIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldCoverURL, vs...))
}

// CoverURLGT applies the GT predicate on the "cover_url" field.
func CoverURLGT(v string) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldCoverURL, v))
}

// CoverURLGTE applies the GTE predicate on the "cover_url" field.
func CoverURLGTE(v string) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldCoverURL, v))
}

// CoverURLLT applies the LT predicate on the "cover_url" field.
func CoverURLLT(v string) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldCoverURL, v))
}

// CoverURLLTE applies the LTE predicate on the "cover_url" field.
func CoverURLLTE(v string) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldCoverURL, v))
}

// CoverURLContains applies the Contains predicate on the "cover_url" field.
func CoverURLContains(v string) predicate.Service {
	return predicate.Service(sql.FieldContains(FieldCoverURL, v))
}

// CoverURLHasPrefix applies the HasPrefix predicate on the "cover_url" field.
func CoverURLHasPrefix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasPrefix(FieldCoverURL, v))
}

// CoverURLHasSuffix applies the HasSuffix predicate on the "cover_url" field.
func CoverURLHasSuffix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasSuffix(FieldCoverURL, v))
}

// CoverURLIsNil applies the IsNil predicate on the "cover_url" field.
func CoverURLIsNil() predicate.Service {
	return predicate.Service(sql.FieldIsNull(FieldCoverURL))
}

// CoverURLNotNil applies the NotNil predicate on the "cover_url" field.
func CoverURLNotNil() predicate.Service {
	return predicate.Service(sql.FieldNotNull(FieldCoverURL))
}

// CoverURLEqualFold applies the EqualFold predicate on the "cover_url" field.
func CoverURLEqualFold(v string) predicate.Service {
	return predicate.Service(sql.FieldEqualFold(FieldCoverURL, v))
}

// CoverURLContainsFold applies the ContainsFold predicate on the "cover_url" field.
func CoverURLContainsFold(v string) predicate.Service {
	return predicate.Service(sql.FieldContainsFold(FieldCoverURL, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Service) predicate.Service {
	return predicate.Service(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Service) predicate.Service {
	return predicate.Service(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Service) predicate.Service {
	return predicate.Service(sql.NotPredicates(p))
}
