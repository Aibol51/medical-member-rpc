// Code generated by ent, DO NOT EDIT.

package medicalrecord

import (
	"time"

	"entgo.io/ent/dialect/sql"
	uuid "github.com/gofrs/uuid/v5"
)

const (
	// Label holds the string label denoting the medicalrecord type in the database.
	Label = "medical_record"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldPatientName holds the string denoting the patient_name field in the database.
	FieldPatientName = "patient_name"
	// FieldPhoneNumber holds the string denoting the phone_number field in the database.
	FieldPhoneNumber = "phone_number"
	// FieldGender holds the string denoting the gender field in the database.
	FieldGender = "gender"
	// FieldAge holds the string denoting the age field in the database.
	FieldAge = "age"
	// FieldVisitTime holds the string denoting the visit_time field in the database.
	FieldVisitTime = "visit_time"
	// FieldDiagnosis holds the string denoting the diagnosis field in the database.
	FieldDiagnosis = "diagnosis"
	// FieldTreatmentPlan holds the string denoting the treatment_plan field in the database.
	FieldTreatmentPlan = "treatment_plan"
	// FieldPrescription holds the string denoting the prescription field in the database.
	FieldPrescription = "prescription"
	// FieldExaminationResults holds the string denoting the examination_results field in the database.
	FieldExaminationResults = "examination_results"
	// FieldDoctorAdvice holds the string denoting the doctor_advice field in the database.
	FieldDoctorAdvice = "doctor_advice"
	// FieldDoctorID holds the string denoting the doctor_id field in the database.
	FieldDoctorID = "doctor_id"
	// FieldDepartment holds the string denoting the department field in the database.
	FieldDepartment = "department"
	// FieldAppointmentID holds the string denoting the appointment_id field in the database.
	FieldAppointmentID = "appointment_id"
	// FieldRemarks holds the string denoting the remarks field in the database.
	FieldRemarks = "remarks"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// Table holds the table name of the medicalrecord in the database.
	Table = "medical_records"
)

// Columns holds all SQL columns for medicalrecord fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldPatientName,
	FieldPhoneNumber,
	FieldGender,
	FieldAge,
	FieldVisitTime,
	FieldDiagnosis,
	FieldTreatmentPlan,
	FieldPrescription,
	FieldExaminationResults,
	FieldDoctorAdvice,
	FieldDoctorID,
	FieldDepartment,
	FieldAppointmentID,
	FieldRemarks,
	FieldUserID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the MedicalRecord queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByPatientName orders the results by the patient_name field.
func ByPatientName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPatientName, opts...).ToFunc()
}

// ByPhoneNumber orders the results by the phone_number field.
func ByPhoneNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhoneNumber, opts...).ToFunc()
}

// ByGender orders the results by the gender field.
func ByGender(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGender, opts...).ToFunc()
}

// ByAge orders the results by the age field.
func ByAge(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAge, opts...).ToFunc()
}

// ByVisitTime orders the results by the visit_time field.
func ByVisitTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVisitTime, opts...).ToFunc()
}

// ByDiagnosis orders the results by the diagnosis field.
func ByDiagnosis(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiagnosis, opts...).ToFunc()
}

// ByTreatmentPlan orders the results by the treatment_plan field.
func ByTreatmentPlan(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTreatmentPlan, opts...).ToFunc()
}

// ByPrescription orders the results by the prescription field.
func ByPrescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrescription, opts...).ToFunc()
}

// ByExaminationResults orders the results by the examination_results field.
func ByExaminationResults(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExaminationResults, opts...).ToFunc()
}

// ByDoctorAdvice orders the results by the doctor_advice field.
func ByDoctorAdvice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDoctorAdvice, opts...).ToFunc()
}

// ByDoctorID orders the results by the doctor_id field.
func ByDoctorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDoctorID, opts...).ToFunc()
}

// ByDepartment orders the results by the department field.
func ByDepartment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDepartment, opts...).ToFunc()
}

// ByAppointmentID orders the results by the appointment_id field.
func ByAppointmentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppointmentID, opts...).ToFunc()
}

// ByRemarks orders the results by the remarks field.
func ByRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemarks, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}
