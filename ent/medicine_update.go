// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/suyuan32/simple-admin-member-rpc/ent/medicine"
	"github.com/suyuan32/simple-admin-member-rpc/ent/predicate"
)

// MedicineUpdate is the builder for updating Medicine entities.
type MedicineUpdate struct {
	config
	hooks    []Hook
	mutation *MedicineMutation
}

// Where appends a list predicates to the MedicineUpdate builder.
func (mu *MedicineUpdate) Where(ps ...predicate.Medicine) *MedicineUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MedicineUpdate) SetUpdatedAt(t time.Time) *MedicineUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// SetStatus sets the "status" field.
func (mu *MedicineUpdate) SetStatus(u uint8) *MedicineUpdate {
	mu.mutation.ResetStatus()
	mu.mutation.SetStatus(u)
	return mu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mu *MedicineUpdate) SetNillableStatus(u *uint8) *MedicineUpdate {
	if u != nil {
		mu.SetStatus(*u)
	}
	return mu
}

// AddStatus adds u to the "status" field.
func (mu *MedicineUpdate) AddStatus(u int8) *MedicineUpdate {
	mu.mutation.AddStatus(u)
	return mu
}

// ClearStatus clears the value of the "status" field.
func (mu *MedicineUpdate) ClearStatus() *MedicineUpdate {
	mu.mutation.ClearStatus()
	return mu
}

// SetSort sets the "sort" field.
func (mu *MedicineUpdate) SetSort(u uint32) *MedicineUpdate {
	mu.mutation.ResetSort()
	mu.mutation.SetSort(u)
	return mu
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (mu *MedicineUpdate) SetNillableSort(u *uint32) *MedicineUpdate {
	if u != nil {
		mu.SetSort(*u)
	}
	return mu
}

// AddSort adds u to the "sort" field.
func (mu *MedicineUpdate) AddSort(u int32) *MedicineUpdate {
	mu.mutation.AddSort(u)
	return mu
}

// SetNameZh sets the "name_zh" field.
func (mu *MedicineUpdate) SetNameZh(s string) *MedicineUpdate {
	mu.mutation.SetNameZh(s)
	return mu
}

// SetNillableNameZh sets the "name_zh" field if the given value is not nil.
func (mu *MedicineUpdate) SetNillableNameZh(s *string) *MedicineUpdate {
	if s != nil {
		mu.SetNameZh(*s)
	}
	return mu
}

// SetNameEn sets the "name_en" field.
func (mu *MedicineUpdate) SetNameEn(s string) *MedicineUpdate {
	mu.mutation.SetNameEn(s)
	return mu
}

// SetNillableNameEn sets the "name_en" field if the given value is not nil.
func (mu *MedicineUpdate) SetNillableNameEn(s *string) *MedicineUpdate {
	if s != nil {
		mu.SetNameEn(*s)
	}
	return mu
}

// SetNameRu sets the "name_ru" field.
func (mu *MedicineUpdate) SetNameRu(s string) *MedicineUpdate {
	mu.mutation.SetNameRu(s)
	return mu
}

// SetNillableNameRu sets the "name_ru" field if the given value is not nil.
func (mu *MedicineUpdate) SetNillableNameRu(s *string) *MedicineUpdate {
	if s != nil {
		mu.SetNameRu(*s)
	}
	return mu
}

// SetNameKk sets the "name_kk" field.
func (mu *MedicineUpdate) SetNameKk(s string) *MedicineUpdate {
	mu.mutation.SetNameKk(s)
	return mu
}

// SetNillableNameKk sets the "name_kk" field if the given value is not nil.
func (mu *MedicineUpdate) SetNillableNameKk(s *string) *MedicineUpdate {
	if s != nil {
		mu.SetNameKk(*s)
	}
	return mu
}

// SetQuantity sets the "quantity" field.
func (mu *MedicineUpdate) SetQuantity(u uint32) *MedicineUpdate {
	mu.mutation.ResetQuantity()
	mu.mutation.SetQuantity(u)
	return mu
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (mu *MedicineUpdate) SetNillableQuantity(u *uint32) *MedicineUpdate {
	if u != nil {
		mu.SetQuantity(*u)
	}
	return mu
}

// AddQuantity adds u to the "quantity" field.
func (mu *MedicineUpdate) AddQuantity(u int32) *MedicineUpdate {
	mu.mutation.AddQuantity(u)
	return mu
}

// SetDescriptionZh sets the "description_zh" field.
func (mu *MedicineUpdate) SetDescriptionZh(s string) *MedicineUpdate {
	mu.mutation.SetDescriptionZh(s)
	return mu
}

// SetNillableDescriptionZh sets the "description_zh" field if the given value is not nil.
func (mu *MedicineUpdate) SetNillableDescriptionZh(s *string) *MedicineUpdate {
	if s != nil {
		mu.SetDescriptionZh(*s)
	}
	return mu
}

// ClearDescriptionZh clears the value of the "description_zh" field.
func (mu *MedicineUpdate) ClearDescriptionZh() *MedicineUpdate {
	mu.mutation.ClearDescriptionZh()
	return mu
}

// SetDescriptionEn sets the "description_en" field.
func (mu *MedicineUpdate) SetDescriptionEn(s string) *MedicineUpdate {
	mu.mutation.SetDescriptionEn(s)
	return mu
}

// SetNillableDescriptionEn sets the "description_en" field if the given value is not nil.
func (mu *MedicineUpdate) SetNillableDescriptionEn(s *string) *MedicineUpdate {
	if s != nil {
		mu.SetDescriptionEn(*s)
	}
	return mu
}

// ClearDescriptionEn clears the value of the "description_en" field.
func (mu *MedicineUpdate) ClearDescriptionEn() *MedicineUpdate {
	mu.mutation.ClearDescriptionEn()
	return mu
}

// SetDescriptionRu sets the "description_ru" field.
func (mu *MedicineUpdate) SetDescriptionRu(s string) *MedicineUpdate {
	mu.mutation.SetDescriptionRu(s)
	return mu
}

// SetNillableDescriptionRu sets the "description_ru" field if the given value is not nil.
func (mu *MedicineUpdate) SetNillableDescriptionRu(s *string) *MedicineUpdate {
	if s != nil {
		mu.SetDescriptionRu(*s)
	}
	return mu
}

// ClearDescriptionRu clears the value of the "description_ru" field.
func (mu *MedicineUpdate) ClearDescriptionRu() *MedicineUpdate {
	mu.mutation.ClearDescriptionRu()
	return mu
}

// SetDescriptionKk sets the "description_kk" field.
func (mu *MedicineUpdate) SetDescriptionKk(s string) *MedicineUpdate {
	mu.mutation.SetDescriptionKk(s)
	return mu
}

// SetNillableDescriptionKk sets the "description_kk" field if the given value is not nil.
func (mu *MedicineUpdate) SetNillableDescriptionKk(s *string) *MedicineUpdate {
	if s != nil {
		mu.SetDescriptionKk(*s)
	}
	return mu
}

// ClearDescriptionKk clears the value of the "description_kk" field.
func (mu *MedicineUpdate) ClearDescriptionKk() *MedicineUpdate {
	mu.mutation.ClearDescriptionKk()
	return mu
}

// SetRemarks sets the "remarks" field.
func (mu *MedicineUpdate) SetRemarks(s string) *MedicineUpdate {
	mu.mutation.SetRemarks(s)
	return mu
}

// SetNillableRemarks sets the "remarks" field if the given value is not nil.
func (mu *MedicineUpdate) SetNillableRemarks(s *string) *MedicineUpdate {
	if s != nil {
		mu.SetRemarks(*s)
	}
	return mu
}

// ClearRemarks clears the value of the "remarks" field.
func (mu *MedicineUpdate) ClearRemarks() *MedicineUpdate {
	mu.mutation.ClearRemarks()
	return mu
}

// SetImages sets the "images" field.
func (mu *MedicineUpdate) SetImages(s string) *MedicineUpdate {
	mu.mutation.SetImages(s)
	return mu
}

// SetNillableImages sets the "images" field if the given value is not nil.
func (mu *MedicineUpdate) SetNillableImages(s *string) *MedicineUpdate {
	if s != nil {
		mu.SetImages(*s)
	}
	return mu
}

// ClearImages clears the value of the "images" field.
func (mu *MedicineUpdate) ClearImages() *MedicineUpdate {
	mu.mutation.ClearImages()
	return mu
}

// Mutation returns the MedicineMutation object of the builder.
func (mu *MedicineUpdate) Mutation() *MedicineMutation {
	return mu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MedicineUpdate) Save(ctx context.Context) (int, error) {
	mu.defaults()
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MedicineUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MedicineUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MedicineUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MedicineUpdate) defaults() {
	if _, ok := mu.mutation.UpdatedAt(); !ok {
		v := medicine.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
}

func (mu *MedicineUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(medicine.Table, medicine.Columns, sqlgraph.NewFieldSpec(medicine.FieldID, field.TypeUint64))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.SetField(medicine.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mu.mutation.Status(); ok {
		_spec.SetField(medicine.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := mu.mutation.AddedStatus(); ok {
		_spec.AddField(medicine.FieldStatus, field.TypeUint8, value)
	}
	if mu.mutation.StatusCleared() {
		_spec.ClearField(medicine.FieldStatus, field.TypeUint8)
	}
	if value, ok := mu.mutation.Sort(); ok {
		_spec.SetField(medicine.FieldSort, field.TypeUint32, value)
	}
	if value, ok := mu.mutation.AddedSort(); ok {
		_spec.AddField(medicine.FieldSort, field.TypeUint32, value)
	}
	if value, ok := mu.mutation.NameZh(); ok {
		_spec.SetField(medicine.FieldNameZh, field.TypeString, value)
	}
	if value, ok := mu.mutation.NameEn(); ok {
		_spec.SetField(medicine.FieldNameEn, field.TypeString, value)
	}
	if value, ok := mu.mutation.NameRu(); ok {
		_spec.SetField(medicine.FieldNameRu, field.TypeString, value)
	}
	if value, ok := mu.mutation.NameKk(); ok {
		_spec.SetField(medicine.FieldNameKk, field.TypeString, value)
	}
	if value, ok := mu.mutation.Quantity(); ok {
		_spec.SetField(medicine.FieldQuantity, field.TypeUint32, value)
	}
	if value, ok := mu.mutation.AddedQuantity(); ok {
		_spec.AddField(medicine.FieldQuantity, field.TypeUint32, value)
	}
	if value, ok := mu.mutation.DescriptionZh(); ok {
		_spec.SetField(medicine.FieldDescriptionZh, field.TypeString, value)
	}
	if mu.mutation.DescriptionZhCleared() {
		_spec.ClearField(medicine.FieldDescriptionZh, field.TypeString)
	}
	if value, ok := mu.mutation.DescriptionEn(); ok {
		_spec.SetField(medicine.FieldDescriptionEn, field.TypeString, value)
	}
	if mu.mutation.DescriptionEnCleared() {
		_spec.ClearField(medicine.FieldDescriptionEn, field.TypeString)
	}
	if value, ok := mu.mutation.DescriptionRu(); ok {
		_spec.SetField(medicine.FieldDescriptionRu, field.TypeString, value)
	}
	if mu.mutation.DescriptionRuCleared() {
		_spec.ClearField(medicine.FieldDescriptionRu, field.TypeString)
	}
	if value, ok := mu.mutation.DescriptionKk(); ok {
		_spec.SetField(medicine.FieldDescriptionKk, field.TypeString, value)
	}
	if mu.mutation.DescriptionKkCleared() {
		_spec.ClearField(medicine.FieldDescriptionKk, field.TypeString)
	}
	if value, ok := mu.mutation.Remarks(); ok {
		_spec.SetField(medicine.FieldRemarks, field.TypeString, value)
	}
	if mu.mutation.RemarksCleared() {
		_spec.ClearField(medicine.FieldRemarks, field.TypeString)
	}
	if value, ok := mu.mutation.Images(); ok {
		_spec.SetField(medicine.FieldImages, field.TypeString, value)
	}
	if mu.mutation.ImagesCleared() {
		_spec.ClearField(medicine.FieldImages, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{medicine.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MedicineUpdateOne is the builder for updating a single Medicine entity.
type MedicineUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MedicineMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MedicineUpdateOne) SetUpdatedAt(t time.Time) *MedicineUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// SetStatus sets the "status" field.
func (muo *MedicineUpdateOne) SetStatus(u uint8) *MedicineUpdateOne {
	muo.mutation.ResetStatus()
	muo.mutation.SetStatus(u)
	return muo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (muo *MedicineUpdateOne) SetNillableStatus(u *uint8) *MedicineUpdateOne {
	if u != nil {
		muo.SetStatus(*u)
	}
	return muo
}

// AddStatus adds u to the "status" field.
func (muo *MedicineUpdateOne) AddStatus(u int8) *MedicineUpdateOne {
	muo.mutation.AddStatus(u)
	return muo
}

// ClearStatus clears the value of the "status" field.
func (muo *MedicineUpdateOne) ClearStatus() *MedicineUpdateOne {
	muo.mutation.ClearStatus()
	return muo
}

// SetSort sets the "sort" field.
func (muo *MedicineUpdateOne) SetSort(u uint32) *MedicineUpdateOne {
	muo.mutation.ResetSort()
	muo.mutation.SetSort(u)
	return muo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (muo *MedicineUpdateOne) SetNillableSort(u *uint32) *MedicineUpdateOne {
	if u != nil {
		muo.SetSort(*u)
	}
	return muo
}

// AddSort adds u to the "sort" field.
func (muo *MedicineUpdateOne) AddSort(u int32) *MedicineUpdateOne {
	muo.mutation.AddSort(u)
	return muo
}

// SetNameZh sets the "name_zh" field.
func (muo *MedicineUpdateOne) SetNameZh(s string) *MedicineUpdateOne {
	muo.mutation.SetNameZh(s)
	return muo
}

// SetNillableNameZh sets the "name_zh" field if the given value is not nil.
func (muo *MedicineUpdateOne) SetNillableNameZh(s *string) *MedicineUpdateOne {
	if s != nil {
		muo.SetNameZh(*s)
	}
	return muo
}

// SetNameEn sets the "name_en" field.
func (muo *MedicineUpdateOne) SetNameEn(s string) *MedicineUpdateOne {
	muo.mutation.SetNameEn(s)
	return muo
}

// SetNillableNameEn sets the "name_en" field if the given value is not nil.
func (muo *MedicineUpdateOne) SetNillableNameEn(s *string) *MedicineUpdateOne {
	if s != nil {
		muo.SetNameEn(*s)
	}
	return muo
}

// SetNameRu sets the "name_ru" field.
func (muo *MedicineUpdateOne) SetNameRu(s string) *MedicineUpdateOne {
	muo.mutation.SetNameRu(s)
	return muo
}

// SetNillableNameRu sets the "name_ru" field if the given value is not nil.
func (muo *MedicineUpdateOne) SetNillableNameRu(s *string) *MedicineUpdateOne {
	if s != nil {
		muo.SetNameRu(*s)
	}
	return muo
}

// SetNameKk sets the "name_kk" field.
func (muo *MedicineUpdateOne) SetNameKk(s string) *MedicineUpdateOne {
	muo.mutation.SetNameKk(s)
	return muo
}

// SetNillableNameKk sets the "name_kk" field if the given value is not nil.
func (muo *MedicineUpdateOne) SetNillableNameKk(s *string) *MedicineUpdateOne {
	if s != nil {
		muo.SetNameKk(*s)
	}
	return muo
}

// SetQuantity sets the "quantity" field.
func (muo *MedicineUpdateOne) SetQuantity(u uint32) *MedicineUpdateOne {
	muo.mutation.ResetQuantity()
	muo.mutation.SetQuantity(u)
	return muo
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (muo *MedicineUpdateOne) SetNillableQuantity(u *uint32) *MedicineUpdateOne {
	if u != nil {
		muo.SetQuantity(*u)
	}
	return muo
}

// AddQuantity adds u to the "quantity" field.
func (muo *MedicineUpdateOne) AddQuantity(u int32) *MedicineUpdateOne {
	muo.mutation.AddQuantity(u)
	return muo
}

// SetDescriptionZh sets the "description_zh" field.
func (muo *MedicineUpdateOne) SetDescriptionZh(s string) *MedicineUpdateOne {
	muo.mutation.SetDescriptionZh(s)
	return muo
}

// SetNillableDescriptionZh sets the "description_zh" field if the given value is not nil.
func (muo *MedicineUpdateOne) SetNillableDescriptionZh(s *string) *MedicineUpdateOne {
	if s != nil {
		muo.SetDescriptionZh(*s)
	}
	return muo
}

// ClearDescriptionZh clears the value of the "description_zh" field.
func (muo *MedicineUpdateOne) ClearDescriptionZh() *MedicineUpdateOne {
	muo.mutation.ClearDescriptionZh()
	return muo
}

// SetDescriptionEn sets the "description_en" field.
func (muo *MedicineUpdateOne) SetDescriptionEn(s string) *MedicineUpdateOne {
	muo.mutation.SetDescriptionEn(s)
	return muo
}

// SetNillableDescriptionEn sets the "description_en" field if the given value is not nil.
func (muo *MedicineUpdateOne) SetNillableDescriptionEn(s *string) *MedicineUpdateOne {
	if s != nil {
		muo.SetDescriptionEn(*s)
	}
	return muo
}

// ClearDescriptionEn clears the value of the "description_en" field.
func (muo *MedicineUpdateOne) ClearDescriptionEn() *MedicineUpdateOne {
	muo.mutation.ClearDescriptionEn()
	return muo
}

// SetDescriptionRu sets the "description_ru" field.
func (muo *MedicineUpdateOne) SetDescriptionRu(s string) *MedicineUpdateOne {
	muo.mutation.SetDescriptionRu(s)
	return muo
}

// SetNillableDescriptionRu sets the "description_ru" field if the given value is not nil.
func (muo *MedicineUpdateOne) SetNillableDescriptionRu(s *string) *MedicineUpdateOne {
	if s != nil {
		muo.SetDescriptionRu(*s)
	}
	return muo
}

// ClearDescriptionRu clears the value of the "description_ru" field.
func (muo *MedicineUpdateOne) ClearDescriptionRu() *MedicineUpdateOne {
	muo.mutation.ClearDescriptionRu()
	return muo
}

// SetDescriptionKk sets the "description_kk" field.
func (muo *MedicineUpdateOne) SetDescriptionKk(s string) *MedicineUpdateOne {
	muo.mutation.SetDescriptionKk(s)
	return muo
}

// SetNillableDescriptionKk sets the "description_kk" field if the given value is not nil.
func (muo *MedicineUpdateOne) SetNillableDescriptionKk(s *string) *MedicineUpdateOne {
	if s != nil {
		muo.SetDescriptionKk(*s)
	}
	return muo
}

// ClearDescriptionKk clears the value of the "description_kk" field.
func (muo *MedicineUpdateOne) ClearDescriptionKk() *MedicineUpdateOne {
	muo.mutation.ClearDescriptionKk()
	return muo
}

// SetRemarks sets the "remarks" field.
func (muo *MedicineUpdateOne) SetRemarks(s string) *MedicineUpdateOne {
	muo.mutation.SetRemarks(s)
	return muo
}

// SetNillableRemarks sets the "remarks" field if the given value is not nil.
func (muo *MedicineUpdateOne) SetNillableRemarks(s *string) *MedicineUpdateOne {
	if s != nil {
		muo.SetRemarks(*s)
	}
	return muo
}

// ClearRemarks clears the value of the "remarks" field.
func (muo *MedicineUpdateOne) ClearRemarks() *MedicineUpdateOne {
	muo.mutation.ClearRemarks()
	return muo
}

// SetImages sets the "images" field.
func (muo *MedicineUpdateOne) SetImages(s string) *MedicineUpdateOne {
	muo.mutation.SetImages(s)
	return muo
}

// SetNillableImages sets the "images" field if the given value is not nil.
func (muo *MedicineUpdateOne) SetNillableImages(s *string) *MedicineUpdateOne {
	if s != nil {
		muo.SetImages(*s)
	}
	return muo
}

// ClearImages clears the value of the "images" field.
func (muo *MedicineUpdateOne) ClearImages() *MedicineUpdateOne {
	muo.mutation.ClearImages()
	return muo
}

// Mutation returns the MedicineMutation object of the builder.
func (muo *MedicineUpdateOne) Mutation() *MedicineMutation {
	return muo.mutation
}

// Where appends a list predicates to the MedicineUpdate builder.
func (muo *MedicineUpdateOne) Where(ps ...predicate.Medicine) *MedicineUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MedicineUpdateOne) Select(field string, fields ...string) *MedicineUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Medicine entity.
func (muo *MedicineUpdateOne) Save(ctx context.Context) (*Medicine, error) {
	muo.defaults()
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MedicineUpdateOne) SaveX(ctx context.Context) *Medicine {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MedicineUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MedicineUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MedicineUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdatedAt(); !ok {
		v := medicine.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
}

func (muo *MedicineUpdateOne) sqlSave(ctx context.Context) (_node *Medicine, err error) {
	_spec := sqlgraph.NewUpdateSpec(medicine.Table, medicine.Columns, sqlgraph.NewFieldSpec(medicine.FieldID, field.TypeUint64))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Medicine.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, medicine.FieldID)
		for _, f := range fields {
			if !medicine.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != medicine.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.SetField(medicine.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := muo.mutation.Status(); ok {
		_spec.SetField(medicine.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := muo.mutation.AddedStatus(); ok {
		_spec.AddField(medicine.FieldStatus, field.TypeUint8, value)
	}
	if muo.mutation.StatusCleared() {
		_spec.ClearField(medicine.FieldStatus, field.TypeUint8)
	}
	if value, ok := muo.mutation.Sort(); ok {
		_spec.SetField(medicine.FieldSort, field.TypeUint32, value)
	}
	if value, ok := muo.mutation.AddedSort(); ok {
		_spec.AddField(medicine.FieldSort, field.TypeUint32, value)
	}
	if value, ok := muo.mutation.NameZh(); ok {
		_spec.SetField(medicine.FieldNameZh, field.TypeString, value)
	}
	if value, ok := muo.mutation.NameEn(); ok {
		_spec.SetField(medicine.FieldNameEn, field.TypeString, value)
	}
	if value, ok := muo.mutation.NameRu(); ok {
		_spec.SetField(medicine.FieldNameRu, field.TypeString, value)
	}
	if value, ok := muo.mutation.NameKk(); ok {
		_spec.SetField(medicine.FieldNameKk, field.TypeString, value)
	}
	if value, ok := muo.mutation.Quantity(); ok {
		_spec.SetField(medicine.FieldQuantity, field.TypeUint32, value)
	}
	if value, ok := muo.mutation.AddedQuantity(); ok {
		_spec.AddField(medicine.FieldQuantity, field.TypeUint32, value)
	}
	if value, ok := muo.mutation.DescriptionZh(); ok {
		_spec.SetField(medicine.FieldDescriptionZh, field.TypeString, value)
	}
	if muo.mutation.DescriptionZhCleared() {
		_spec.ClearField(medicine.FieldDescriptionZh, field.TypeString)
	}
	if value, ok := muo.mutation.DescriptionEn(); ok {
		_spec.SetField(medicine.FieldDescriptionEn, field.TypeString, value)
	}
	if muo.mutation.DescriptionEnCleared() {
		_spec.ClearField(medicine.FieldDescriptionEn, field.TypeString)
	}
	if value, ok := muo.mutation.DescriptionRu(); ok {
		_spec.SetField(medicine.FieldDescriptionRu, field.TypeString, value)
	}
	if muo.mutation.DescriptionRuCleared() {
		_spec.ClearField(medicine.FieldDescriptionRu, field.TypeString)
	}
	if value, ok := muo.mutation.DescriptionKk(); ok {
		_spec.SetField(medicine.FieldDescriptionKk, field.TypeString, value)
	}
	if muo.mutation.DescriptionKkCleared() {
		_spec.ClearField(medicine.FieldDescriptionKk, field.TypeString)
	}
	if value, ok := muo.mutation.Remarks(); ok {
		_spec.SetField(medicine.FieldRemarks, field.TypeString, value)
	}
	if muo.mutation.RemarksCleared() {
		_spec.ClearField(medicine.FieldRemarks, field.TypeString)
	}
	if value, ok := muo.mutation.Images(); ok {
		_spec.SetField(medicine.FieldImages, field.TypeString, value)
	}
	if muo.mutation.ImagesCleared() {
		_spec.ClearField(medicine.FieldImages, field.TypeString)
	}
	_node = &Medicine{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{medicine.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
