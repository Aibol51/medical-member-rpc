// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/suyuan32/simple-admin-member-rpc/ent/appointment"
)

// Appointment is the model entity for the Appointment schema.
type Appointment struct {
	config `json:"-"`
	// ID of the ent.
	// UUID
	ID uuid.UUID `json:"id,omitempty"`
	// Create Time | 创建日期
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Update Time | 修改日期
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Patient name | 患者姓名
	PatientName string `json:"patient_name,omitempty"`
	// Phone number | 联系电话
	PhoneNumber string `json:"phone_number,omitempty"`
	// ID card number | 身份证号
	IDCard string `json:"id_card,omitempty"`
	// Gender 1:male 2:female | 性别 1:男 2:女
	Gender int32 `json:"gender,omitempty"`
	// Age | 年龄
	Age int32 `json:"age,omitempty"`
	// Appointment time | 预约时间
	AppointmentTime int64 `json:"appointment_time,omitempty"`
	// Symptoms description | 症状描述
	Symptoms string `json:"symptoms,omitempty"`
	// Status 1:pending 2:confirmed 3:completed 4:cancelled 5:expired | 状态 1:待确认 2:已确认 3:已完成 4:已取消 5:已过期
	Status int32 `json:"status,omitempty"`
	// Remarks | 备注信息
	Remarks string `json:"remarks,omitempty"`
	// User ID | 用户ID
	UserID       string `json:"user_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Appointment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case appointment.FieldGender, appointment.FieldAge, appointment.FieldAppointmentTime, appointment.FieldStatus:
			values[i] = new(sql.NullInt64)
		case appointment.FieldPatientName, appointment.FieldPhoneNumber, appointment.FieldIDCard, appointment.FieldSymptoms, appointment.FieldRemarks, appointment.FieldUserID:
			values[i] = new(sql.NullString)
		case appointment.FieldCreatedAt, appointment.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case appointment.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Appointment fields.
func (a *Appointment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appointment.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				a.ID = *value
			}
		case appointment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case appointment.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case appointment.FieldPatientName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field patient_name", values[i])
			} else if value.Valid {
				a.PatientName = value.String
			}
		case appointment.FieldPhoneNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone_number", values[i])
			} else if value.Valid {
				a.PhoneNumber = value.String
			}
		case appointment.FieldIDCard:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id_card", values[i])
			} else if value.Valid {
				a.IDCard = value.String
			}
		case appointment.FieldGender:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				a.Gender = int32(value.Int64)
			}
		case appointment.FieldAge:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field age", values[i])
			} else if value.Valid {
				a.Age = int32(value.Int64)
			}
		case appointment.FieldAppointmentTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field appointment_time", values[i])
			} else if value.Valid {
				a.AppointmentTime = value.Int64
			}
		case appointment.FieldSymptoms:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field symptoms", values[i])
			} else if value.Valid {
				a.Symptoms = value.String
			}
		case appointment.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				a.Status = int32(value.Int64)
			}
		case appointment.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[i])
			} else if value.Valid {
				a.Remarks = value.String
			}
		case appointment.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				a.UserID = value.String
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Appointment.
// This includes values selected through modifiers, order, etc.
func (a *Appointment) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// Update returns a builder for updating this Appointment.
// Note that you need to call Appointment.Unwrap() before calling this method if this Appointment
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Appointment) Update() *AppointmentUpdateOne {
	return NewAppointmentClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Appointment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Appointment) Unwrap() *Appointment {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Appointment is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Appointment) String() string {
	var builder strings.Builder
	builder.WriteString("Appointment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("patient_name=")
	builder.WriteString(a.PatientName)
	builder.WriteString(", ")
	builder.WriteString("phone_number=")
	builder.WriteString(a.PhoneNumber)
	builder.WriteString(", ")
	builder.WriteString("id_card=")
	builder.WriteString(a.IDCard)
	builder.WriteString(", ")
	builder.WriteString("gender=")
	builder.WriteString(fmt.Sprintf("%v", a.Gender))
	builder.WriteString(", ")
	builder.WriteString("age=")
	builder.WriteString(fmt.Sprintf("%v", a.Age))
	builder.WriteString(", ")
	builder.WriteString("appointment_time=")
	builder.WriteString(fmt.Sprintf("%v", a.AppointmentTime))
	builder.WriteString(", ")
	builder.WriteString("symptoms=")
	builder.WriteString(a.Symptoms)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", a.Status))
	builder.WriteString(", ")
	builder.WriteString("remarks=")
	builder.WriteString(a.Remarks)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(a.UserID)
	builder.WriteByte(')')
	return builder.String()
}

// Appointments is a parsable slice of Appointment.
type Appointments []*Appointment
