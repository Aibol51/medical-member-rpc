// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/suyuan32/simple-admin-member-rpc/ent/medicalrecord"
	"github.com/suyuan32/simple-admin-member-rpc/ent/predicate"
)

// MedicalRecordUpdate is the builder for updating MedicalRecord entities.
type MedicalRecordUpdate struct {
	config
	hooks    []Hook
	mutation *MedicalRecordMutation
}

// Where appends a list predicates to the MedicalRecordUpdate builder.
func (mru *MedicalRecordUpdate) Where(ps ...predicate.MedicalRecord) *MedicalRecordUpdate {
	mru.mutation.Where(ps...)
	return mru
}

// SetUpdatedAt sets the "updated_at" field.
func (mru *MedicalRecordUpdate) SetUpdatedAt(t time.Time) *MedicalRecordUpdate {
	mru.mutation.SetUpdatedAt(t)
	return mru
}

// SetPatientName sets the "patient_name" field.
func (mru *MedicalRecordUpdate) SetPatientName(s string) *MedicalRecordUpdate {
	mru.mutation.SetPatientName(s)
	return mru
}

// SetNillablePatientName sets the "patient_name" field if the given value is not nil.
func (mru *MedicalRecordUpdate) SetNillablePatientName(s *string) *MedicalRecordUpdate {
	if s != nil {
		mru.SetPatientName(*s)
	}
	return mru
}

// ClearPatientName clears the value of the "patient_name" field.
func (mru *MedicalRecordUpdate) ClearPatientName() *MedicalRecordUpdate {
	mru.mutation.ClearPatientName()
	return mru
}

// SetPhoneNumber sets the "phone_number" field.
func (mru *MedicalRecordUpdate) SetPhoneNumber(s string) *MedicalRecordUpdate {
	mru.mutation.SetPhoneNumber(s)
	return mru
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (mru *MedicalRecordUpdate) SetNillablePhoneNumber(s *string) *MedicalRecordUpdate {
	if s != nil {
		mru.SetPhoneNumber(*s)
	}
	return mru
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (mru *MedicalRecordUpdate) ClearPhoneNumber() *MedicalRecordUpdate {
	mru.mutation.ClearPhoneNumber()
	return mru
}

// SetGender sets the "gender" field.
func (mru *MedicalRecordUpdate) SetGender(i int32) *MedicalRecordUpdate {
	mru.mutation.ResetGender()
	mru.mutation.SetGender(i)
	return mru
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (mru *MedicalRecordUpdate) SetNillableGender(i *int32) *MedicalRecordUpdate {
	if i != nil {
		mru.SetGender(*i)
	}
	return mru
}

// AddGender adds i to the "gender" field.
func (mru *MedicalRecordUpdate) AddGender(i int32) *MedicalRecordUpdate {
	mru.mutation.AddGender(i)
	return mru
}

// ClearGender clears the value of the "gender" field.
func (mru *MedicalRecordUpdate) ClearGender() *MedicalRecordUpdate {
	mru.mutation.ClearGender()
	return mru
}

// SetAge sets the "age" field.
func (mru *MedicalRecordUpdate) SetAge(i int32) *MedicalRecordUpdate {
	mru.mutation.ResetAge()
	mru.mutation.SetAge(i)
	return mru
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (mru *MedicalRecordUpdate) SetNillableAge(i *int32) *MedicalRecordUpdate {
	if i != nil {
		mru.SetAge(*i)
	}
	return mru
}

// AddAge adds i to the "age" field.
func (mru *MedicalRecordUpdate) AddAge(i int32) *MedicalRecordUpdate {
	mru.mutation.AddAge(i)
	return mru
}

// ClearAge clears the value of the "age" field.
func (mru *MedicalRecordUpdate) ClearAge() *MedicalRecordUpdate {
	mru.mutation.ClearAge()
	return mru
}

// SetVisitTime sets the "visit_time" field.
func (mru *MedicalRecordUpdate) SetVisitTime(i int64) *MedicalRecordUpdate {
	mru.mutation.ResetVisitTime()
	mru.mutation.SetVisitTime(i)
	return mru
}

// SetNillableVisitTime sets the "visit_time" field if the given value is not nil.
func (mru *MedicalRecordUpdate) SetNillableVisitTime(i *int64) *MedicalRecordUpdate {
	if i != nil {
		mru.SetVisitTime(*i)
	}
	return mru
}

// AddVisitTime adds i to the "visit_time" field.
func (mru *MedicalRecordUpdate) AddVisitTime(i int64) *MedicalRecordUpdate {
	mru.mutation.AddVisitTime(i)
	return mru
}

// ClearVisitTime clears the value of the "visit_time" field.
func (mru *MedicalRecordUpdate) ClearVisitTime() *MedicalRecordUpdate {
	mru.mutation.ClearVisitTime()
	return mru
}

// SetDiagnosis sets the "diagnosis" field.
func (mru *MedicalRecordUpdate) SetDiagnosis(s string) *MedicalRecordUpdate {
	mru.mutation.SetDiagnosis(s)
	return mru
}

// SetNillableDiagnosis sets the "diagnosis" field if the given value is not nil.
func (mru *MedicalRecordUpdate) SetNillableDiagnosis(s *string) *MedicalRecordUpdate {
	if s != nil {
		mru.SetDiagnosis(*s)
	}
	return mru
}

// ClearDiagnosis clears the value of the "diagnosis" field.
func (mru *MedicalRecordUpdate) ClearDiagnosis() *MedicalRecordUpdate {
	mru.mutation.ClearDiagnosis()
	return mru
}

// SetTreatmentPlan sets the "treatment_plan" field.
func (mru *MedicalRecordUpdate) SetTreatmentPlan(s string) *MedicalRecordUpdate {
	mru.mutation.SetTreatmentPlan(s)
	return mru
}

// SetNillableTreatmentPlan sets the "treatment_plan" field if the given value is not nil.
func (mru *MedicalRecordUpdate) SetNillableTreatmentPlan(s *string) *MedicalRecordUpdate {
	if s != nil {
		mru.SetTreatmentPlan(*s)
	}
	return mru
}

// ClearTreatmentPlan clears the value of the "treatment_plan" field.
func (mru *MedicalRecordUpdate) ClearTreatmentPlan() *MedicalRecordUpdate {
	mru.mutation.ClearTreatmentPlan()
	return mru
}

// SetPrescription sets the "prescription" field.
func (mru *MedicalRecordUpdate) SetPrescription(s string) *MedicalRecordUpdate {
	mru.mutation.SetPrescription(s)
	return mru
}

// SetNillablePrescription sets the "prescription" field if the given value is not nil.
func (mru *MedicalRecordUpdate) SetNillablePrescription(s *string) *MedicalRecordUpdate {
	if s != nil {
		mru.SetPrescription(*s)
	}
	return mru
}

// ClearPrescription clears the value of the "prescription" field.
func (mru *MedicalRecordUpdate) ClearPrescription() *MedicalRecordUpdate {
	mru.mutation.ClearPrescription()
	return mru
}

// SetExaminationResults sets the "examination_results" field.
func (mru *MedicalRecordUpdate) SetExaminationResults(s string) *MedicalRecordUpdate {
	mru.mutation.SetExaminationResults(s)
	return mru
}

// SetNillableExaminationResults sets the "examination_results" field if the given value is not nil.
func (mru *MedicalRecordUpdate) SetNillableExaminationResults(s *string) *MedicalRecordUpdate {
	if s != nil {
		mru.SetExaminationResults(*s)
	}
	return mru
}

// ClearExaminationResults clears the value of the "examination_results" field.
func (mru *MedicalRecordUpdate) ClearExaminationResults() *MedicalRecordUpdate {
	mru.mutation.ClearExaminationResults()
	return mru
}

// SetDoctorAdvice sets the "doctor_advice" field.
func (mru *MedicalRecordUpdate) SetDoctorAdvice(s string) *MedicalRecordUpdate {
	mru.mutation.SetDoctorAdvice(s)
	return mru
}

// SetNillableDoctorAdvice sets the "doctor_advice" field if the given value is not nil.
func (mru *MedicalRecordUpdate) SetNillableDoctorAdvice(s *string) *MedicalRecordUpdate {
	if s != nil {
		mru.SetDoctorAdvice(*s)
	}
	return mru
}

// ClearDoctorAdvice clears the value of the "doctor_advice" field.
func (mru *MedicalRecordUpdate) ClearDoctorAdvice() *MedicalRecordUpdate {
	mru.mutation.ClearDoctorAdvice()
	return mru
}

// SetDoctorID sets the "doctor_id" field.
func (mru *MedicalRecordUpdate) SetDoctorID(s string) *MedicalRecordUpdate {
	mru.mutation.SetDoctorID(s)
	return mru
}

// SetNillableDoctorID sets the "doctor_id" field if the given value is not nil.
func (mru *MedicalRecordUpdate) SetNillableDoctorID(s *string) *MedicalRecordUpdate {
	if s != nil {
		mru.SetDoctorID(*s)
	}
	return mru
}

// ClearDoctorID clears the value of the "doctor_id" field.
func (mru *MedicalRecordUpdate) ClearDoctorID() *MedicalRecordUpdate {
	mru.mutation.ClearDoctorID()
	return mru
}

// SetDepartment sets the "department" field.
func (mru *MedicalRecordUpdate) SetDepartment(s string) *MedicalRecordUpdate {
	mru.mutation.SetDepartment(s)
	return mru
}

// SetNillableDepartment sets the "department" field if the given value is not nil.
func (mru *MedicalRecordUpdate) SetNillableDepartment(s *string) *MedicalRecordUpdate {
	if s != nil {
		mru.SetDepartment(*s)
	}
	return mru
}

// ClearDepartment clears the value of the "department" field.
func (mru *MedicalRecordUpdate) ClearDepartment() *MedicalRecordUpdate {
	mru.mutation.ClearDepartment()
	return mru
}

// SetAppointmentID sets the "appointment_id" field.
func (mru *MedicalRecordUpdate) SetAppointmentID(s string) *MedicalRecordUpdate {
	mru.mutation.SetAppointmentID(s)
	return mru
}

// SetNillableAppointmentID sets the "appointment_id" field if the given value is not nil.
func (mru *MedicalRecordUpdate) SetNillableAppointmentID(s *string) *MedicalRecordUpdate {
	if s != nil {
		mru.SetAppointmentID(*s)
	}
	return mru
}

// ClearAppointmentID clears the value of the "appointment_id" field.
func (mru *MedicalRecordUpdate) ClearAppointmentID() *MedicalRecordUpdate {
	mru.mutation.ClearAppointmentID()
	return mru
}

// SetRemarks sets the "remarks" field.
func (mru *MedicalRecordUpdate) SetRemarks(s string) *MedicalRecordUpdate {
	mru.mutation.SetRemarks(s)
	return mru
}

// SetNillableRemarks sets the "remarks" field if the given value is not nil.
func (mru *MedicalRecordUpdate) SetNillableRemarks(s *string) *MedicalRecordUpdate {
	if s != nil {
		mru.SetRemarks(*s)
	}
	return mru
}

// ClearRemarks clears the value of the "remarks" field.
func (mru *MedicalRecordUpdate) ClearRemarks() *MedicalRecordUpdate {
	mru.mutation.ClearRemarks()
	return mru
}

// SetUserID sets the "user_id" field.
func (mru *MedicalRecordUpdate) SetUserID(s string) *MedicalRecordUpdate {
	mru.mutation.SetUserID(s)
	return mru
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (mru *MedicalRecordUpdate) SetNillableUserID(s *string) *MedicalRecordUpdate {
	if s != nil {
		mru.SetUserID(*s)
	}
	return mru
}

// ClearUserID clears the value of the "user_id" field.
func (mru *MedicalRecordUpdate) ClearUserID() *MedicalRecordUpdate {
	mru.mutation.ClearUserID()
	return mru
}

// Mutation returns the MedicalRecordMutation object of the builder.
func (mru *MedicalRecordUpdate) Mutation() *MedicalRecordMutation {
	return mru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mru *MedicalRecordUpdate) Save(ctx context.Context) (int, error) {
	mru.defaults()
	return withHooks(ctx, mru.sqlSave, mru.mutation, mru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mru *MedicalRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := mru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mru *MedicalRecordUpdate) Exec(ctx context.Context) error {
	_, err := mru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mru *MedicalRecordUpdate) ExecX(ctx context.Context) {
	if err := mru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mru *MedicalRecordUpdate) defaults() {
	if _, ok := mru.mutation.UpdatedAt(); !ok {
		v := medicalrecord.UpdateDefaultUpdatedAt()
		mru.mutation.SetUpdatedAt(v)
	}
}

func (mru *MedicalRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(medicalrecord.Table, medicalrecord.Columns, sqlgraph.NewFieldSpec(medicalrecord.FieldID, field.TypeUUID))
	if ps := mru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mru.mutation.UpdatedAt(); ok {
		_spec.SetField(medicalrecord.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mru.mutation.PatientName(); ok {
		_spec.SetField(medicalrecord.FieldPatientName, field.TypeString, value)
	}
	if mru.mutation.PatientNameCleared() {
		_spec.ClearField(medicalrecord.FieldPatientName, field.TypeString)
	}
	if value, ok := mru.mutation.PhoneNumber(); ok {
		_spec.SetField(medicalrecord.FieldPhoneNumber, field.TypeString, value)
	}
	if mru.mutation.PhoneNumberCleared() {
		_spec.ClearField(medicalrecord.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := mru.mutation.Gender(); ok {
		_spec.SetField(medicalrecord.FieldGender, field.TypeInt32, value)
	}
	if value, ok := mru.mutation.AddedGender(); ok {
		_spec.AddField(medicalrecord.FieldGender, field.TypeInt32, value)
	}
	if mru.mutation.GenderCleared() {
		_spec.ClearField(medicalrecord.FieldGender, field.TypeInt32)
	}
	if value, ok := mru.mutation.Age(); ok {
		_spec.SetField(medicalrecord.FieldAge, field.TypeInt32, value)
	}
	if value, ok := mru.mutation.AddedAge(); ok {
		_spec.AddField(medicalrecord.FieldAge, field.TypeInt32, value)
	}
	if mru.mutation.AgeCleared() {
		_spec.ClearField(medicalrecord.FieldAge, field.TypeInt32)
	}
	if value, ok := mru.mutation.VisitTime(); ok {
		_spec.SetField(medicalrecord.FieldVisitTime, field.TypeInt64, value)
	}
	if value, ok := mru.mutation.AddedVisitTime(); ok {
		_spec.AddField(medicalrecord.FieldVisitTime, field.TypeInt64, value)
	}
	if mru.mutation.VisitTimeCleared() {
		_spec.ClearField(medicalrecord.FieldVisitTime, field.TypeInt64)
	}
	if value, ok := mru.mutation.Diagnosis(); ok {
		_spec.SetField(medicalrecord.FieldDiagnosis, field.TypeString, value)
	}
	if mru.mutation.DiagnosisCleared() {
		_spec.ClearField(medicalrecord.FieldDiagnosis, field.TypeString)
	}
	if value, ok := mru.mutation.TreatmentPlan(); ok {
		_spec.SetField(medicalrecord.FieldTreatmentPlan, field.TypeString, value)
	}
	if mru.mutation.TreatmentPlanCleared() {
		_spec.ClearField(medicalrecord.FieldTreatmentPlan, field.TypeString)
	}
	if value, ok := mru.mutation.Prescription(); ok {
		_spec.SetField(medicalrecord.FieldPrescription, field.TypeString, value)
	}
	if mru.mutation.PrescriptionCleared() {
		_spec.ClearField(medicalrecord.FieldPrescription, field.TypeString)
	}
	if value, ok := mru.mutation.ExaminationResults(); ok {
		_spec.SetField(medicalrecord.FieldExaminationResults, field.TypeString, value)
	}
	if mru.mutation.ExaminationResultsCleared() {
		_spec.ClearField(medicalrecord.FieldExaminationResults, field.TypeString)
	}
	if value, ok := mru.mutation.DoctorAdvice(); ok {
		_spec.SetField(medicalrecord.FieldDoctorAdvice, field.TypeString, value)
	}
	if mru.mutation.DoctorAdviceCleared() {
		_spec.ClearField(medicalrecord.FieldDoctorAdvice, field.TypeString)
	}
	if value, ok := mru.mutation.DoctorID(); ok {
		_spec.SetField(medicalrecord.FieldDoctorID, field.TypeString, value)
	}
	if mru.mutation.DoctorIDCleared() {
		_spec.ClearField(medicalrecord.FieldDoctorID, field.TypeString)
	}
	if value, ok := mru.mutation.Department(); ok {
		_spec.SetField(medicalrecord.FieldDepartment, field.TypeString, value)
	}
	if mru.mutation.DepartmentCleared() {
		_spec.ClearField(medicalrecord.FieldDepartment, field.TypeString)
	}
	if value, ok := mru.mutation.AppointmentID(); ok {
		_spec.SetField(medicalrecord.FieldAppointmentID, field.TypeString, value)
	}
	if mru.mutation.AppointmentIDCleared() {
		_spec.ClearField(medicalrecord.FieldAppointmentID, field.TypeString)
	}
	if value, ok := mru.mutation.Remarks(); ok {
		_spec.SetField(medicalrecord.FieldRemarks, field.TypeString, value)
	}
	if mru.mutation.RemarksCleared() {
		_spec.ClearField(medicalrecord.FieldRemarks, field.TypeString)
	}
	if value, ok := mru.mutation.UserID(); ok {
		_spec.SetField(medicalrecord.FieldUserID, field.TypeString, value)
	}
	if mru.mutation.UserIDCleared() {
		_spec.ClearField(medicalrecord.FieldUserID, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{medicalrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mru.mutation.done = true
	return n, nil
}

// MedicalRecordUpdateOne is the builder for updating a single MedicalRecord entity.
type MedicalRecordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MedicalRecordMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (mruo *MedicalRecordUpdateOne) SetUpdatedAt(t time.Time) *MedicalRecordUpdateOne {
	mruo.mutation.SetUpdatedAt(t)
	return mruo
}

// SetPatientName sets the "patient_name" field.
func (mruo *MedicalRecordUpdateOne) SetPatientName(s string) *MedicalRecordUpdateOne {
	mruo.mutation.SetPatientName(s)
	return mruo
}

// SetNillablePatientName sets the "patient_name" field if the given value is not nil.
func (mruo *MedicalRecordUpdateOne) SetNillablePatientName(s *string) *MedicalRecordUpdateOne {
	if s != nil {
		mruo.SetPatientName(*s)
	}
	return mruo
}

// ClearPatientName clears the value of the "patient_name" field.
func (mruo *MedicalRecordUpdateOne) ClearPatientName() *MedicalRecordUpdateOne {
	mruo.mutation.ClearPatientName()
	return mruo
}

// SetPhoneNumber sets the "phone_number" field.
func (mruo *MedicalRecordUpdateOne) SetPhoneNumber(s string) *MedicalRecordUpdateOne {
	mruo.mutation.SetPhoneNumber(s)
	return mruo
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (mruo *MedicalRecordUpdateOne) SetNillablePhoneNumber(s *string) *MedicalRecordUpdateOne {
	if s != nil {
		mruo.SetPhoneNumber(*s)
	}
	return mruo
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (mruo *MedicalRecordUpdateOne) ClearPhoneNumber() *MedicalRecordUpdateOne {
	mruo.mutation.ClearPhoneNumber()
	return mruo
}

// SetGender sets the "gender" field.
func (mruo *MedicalRecordUpdateOne) SetGender(i int32) *MedicalRecordUpdateOne {
	mruo.mutation.ResetGender()
	mruo.mutation.SetGender(i)
	return mruo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (mruo *MedicalRecordUpdateOne) SetNillableGender(i *int32) *MedicalRecordUpdateOne {
	if i != nil {
		mruo.SetGender(*i)
	}
	return mruo
}

// AddGender adds i to the "gender" field.
func (mruo *MedicalRecordUpdateOne) AddGender(i int32) *MedicalRecordUpdateOne {
	mruo.mutation.AddGender(i)
	return mruo
}

// ClearGender clears the value of the "gender" field.
func (mruo *MedicalRecordUpdateOne) ClearGender() *MedicalRecordUpdateOne {
	mruo.mutation.ClearGender()
	return mruo
}

// SetAge sets the "age" field.
func (mruo *MedicalRecordUpdateOne) SetAge(i int32) *MedicalRecordUpdateOne {
	mruo.mutation.ResetAge()
	mruo.mutation.SetAge(i)
	return mruo
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (mruo *MedicalRecordUpdateOne) SetNillableAge(i *int32) *MedicalRecordUpdateOne {
	if i != nil {
		mruo.SetAge(*i)
	}
	return mruo
}

// AddAge adds i to the "age" field.
func (mruo *MedicalRecordUpdateOne) AddAge(i int32) *MedicalRecordUpdateOne {
	mruo.mutation.AddAge(i)
	return mruo
}

// ClearAge clears the value of the "age" field.
func (mruo *MedicalRecordUpdateOne) ClearAge() *MedicalRecordUpdateOne {
	mruo.mutation.ClearAge()
	return mruo
}

// SetVisitTime sets the "visit_time" field.
func (mruo *MedicalRecordUpdateOne) SetVisitTime(i int64) *MedicalRecordUpdateOne {
	mruo.mutation.ResetVisitTime()
	mruo.mutation.SetVisitTime(i)
	return mruo
}

// SetNillableVisitTime sets the "visit_time" field if the given value is not nil.
func (mruo *MedicalRecordUpdateOne) SetNillableVisitTime(i *int64) *MedicalRecordUpdateOne {
	if i != nil {
		mruo.SetVisitTime(*i)
	}
	return mruo
}

// AddVisitTime adds i to the "visit_time" field.
func (mruo *MedicalRecordUpdateOne) AddVisitTime(i int64) *MedicalRecordUpdateOne {
	mruo.mutation.AddVisitTime(i)
	return mruo
}

// ClearVisitTime clears the value of the "visit_time" field.
func (mruo *MedicalRecordUpdateOne) ClearVisitTime() *MedicalRecordUpdateOne {
	mruo.mutation.ClearVisitTime()
	return mruo
}

// SetDiagnosis sets the "diagnosis" field.
func (mruo *MedicalRecordUpdateOne) SetDiagnosis(s string) *MedicalRecordUpdateOne {
	mruo.mutation.SetDiagnosis(s)
	return mruo
}

// SetNillableDiagnosis sets the "diagnosis" field if the given value is not nil.
func (mruo *MedicalRecordUpdateOne) SetNillableDiagnosis(s *string) *MedicalRecordUpdateOne {
	if s != nil {
		mruo.SetDiagnosis(*s)
	}
	return mruo
}

// ClearDiagnosis clears the value of the "diagnosis" field.
func (mruo *MedicalRecordUpdateOne) ClearDiagnosis() *MedicalRecordUpdateOne {
	mruo.mutation.ClearDiagnosis()
	return mruo
}

// SetTreatmentPlan sets the "treatment_plan" field.
func (mruo *MedicalRecordUpdateOne) SetTreatmentPlan(s string) *MedicalRecordUpdateOne {
	mruo.mutation.SetTreatmentPlan(s)
	return mruo
}

// SetNillableTreatmentPlan sets the "treatment_plan" field if the given value is not nil.
func (mruo *MedicalRecordUpdateOne) SetNillableTreatmentPlan(s *string) *MedicalRecordUpdateOne {
	if s != nil {
		mruo.SetTreatmentPlan(*s)
	}
	return mruo
}

// ClearTreatmentPlan clears the value of the "treatment_plan" field.
func (mruo *MedicalRecordUpdateOne) ClearTreatmentPlan() *MedicalRecordUpdateOne {
	mruo.mutation.ClearTreatmentPlan()
	return mruo
}

// SetPrescription sets the "prescription" field.
func (mruo *MedicalRecordUpdateOne) SetPrescription(s string) *MedicalRecordUpdateOne {
	mruo.mutation.SetPrescription(s)
	return mruo
}

// SetNillablePrescription sets the "prescription" field if the given value is not nil.
func (mruo *MedicalRecordUpdateOne) SetNillablePrescription(s *string) *MedicalRecordUpdateOne {
	if s != nil {
		mruo.SetPrescription(*s)
	}
	return mruo
}

// ClearPrescription clears the value of the "prescription" field.
func (mruo *MedicalRecordUpdateOne) ClearPrescription() *MedicalRecordUpdateOne {
	mruo.mutation.ClearPrescription()
	return mruo
}

// SetExaminationResults sets the "examination_results" field.
func (mruo *MedicalRecordUpdateOne) SetExaminationResults(s string) *MedicalRecordUpdateOne {
	mruo.mutation.SetExaminationResults(s)
	return mruo
}

// SetNillableExaminationResults sets the "examination_results" field if the given value is not nil.
func (mruo *MedicalRecordUpdateOne) SetNillableExaminationResults(s *string) *MedicalRecordUpdateOne {
	if s != nil {
		mruo.SetExaminationResults(*s)
	}
	return mruo
}

// ClearExaminationResults clears the value of the "examination_results" field.
func (mruo *MedicalRecordUpdateOne) ClearExaminationResults() *MedicalRecordUpdateOne {
	mruo.mutation.ClearExaminationResults()
	return mruo
}

// SetDoctorAdvice sets the "doctor_advice" field.
func (mruo *MedicalRecordUpdateOne) SetDoctorAdvice(s string) *MedicalRecordUpdateOne {
	mruo.mutation.SetDoctorAdvice(s)
	return mruo
}

// SetNillableDoctorAdvice sets the "doctor_advice" field if the given value is not nil.
func (mruo *MedicalRecordUpdateOne) SetNillableDoctorAdvice(s *string) *MedicalRecordUpdateOne {
	if s != nil {
		mruo.SetDoctorAdvice(*s)
	}
	return mruo
}

// ClearDoctorAdvice clears the value of the "doctor_advice" field.
func (mruo *MedicalRecordUpdateOne) ClearDoctorAdvice() *MedicalRecordUpdateOne {
	mruo.mutation.ClearDoctorAdvice()
	return mruo
}

// SetDoctorID sets the "doctor_id" field.
func (mruo *MedicalRecordUpdateOne) SetDoctorID(s string) *MedicalRecordUpdateOne {
	mruo.mutation.SetDoctorID(s)
	return mruo
}

// SetNillableDoctorID sets the "doctor_id" field if the given value is not nil.
func (mruo *MedicalRecordUpdateOne) SetNillableDoctorID(s *string) *MedicalRecordUpdateOne {
	if s != nil {
		mruo.SetDoctorID(*s)
	}
	return mruo
}

// ClearDoctorID clears the value of the "doctor_id" field.
func (mruo *MedicalRecordUpdateOne) ClearDoctorID() *MedicalRecordUpdateOne {
	mruo.mutation.ClearDoctorID()
	return mruo
}

// SetDepartment sets the "department" field.
func (mruo *MedicalRecordUpdateOne) SetDepartment(s string) *MedicalRecordUpdateOne {
	mruo.mutation.SetDepartment(s)
	return mruo
}

// SetNillableDepartment sets the "department" field if the given value is not nil.
func (mruo *MedicalRecordUpdateOne) SetNillableDepartment(s *string) *MedicalRecordUpdateOne {
	if s != nil {
		mruo.SetDepartment(*s)
	}
	return mruo
}

// ClearDepartment clears the value of the "department" field.
func (mruo *MedicalRecordUpdateOne) ClearDepartment() *MedicalRecordUpdateOne {
	mruo.mutation.ClearDepartment()
	return mruo
}

// SetAppointmentID sets the "appointment_id" field.
func (mruo *MedicalRecordUpdateOne) SetAppointmentID(s string) *MedicalRecordUpdateOne {
	mruo.mutation.SetAppointmentID(s)
	return mruo
}

// SetNillableAppointmentID sets the "appointment_id" field if the given value is not nil.
func (mruo *MedicalRecordUpdateOne) SetNillableAppointmentID(s *string) *MedicalRecordUpdateOne {
	if s != nil {
		mruo.SetAppointmentID(*s)
	}
	return mruo
}

// ClearAppointmentID clears the value of the "appointment_id" field.
func (mruo *MedicalRecordUpdateOne) ClearAppointmentID() *MedicalRecordUpdateOne {
	mruo.mutation.ClearAppointmentID()
	return mruo
}

// SetRemarks sets the "remarks" field.
func (mruo *MedicalRecordUpdateOne) SetRemarks(s string) *MedicalRecordUpdateOne {
	mruo.mutation.SetRemarks(s)
	return mruo
}

// SetNillableRemarks sets the "remarks" field if the given value is not nil.
func (mruo *MedicalRecordUpdateOne) SetNillableRemarks(s *string) *MedicalRecordUpdateOne {
	if s != nil {
		mruo.SetRemarks(*s)
	}
	return mruo
}

// ClearRemarks clears the value of the "remarks" field.
func (mruo *MedicalRecordUpdateOne) ClearRemarks() *MedicalRecordUpdateOne {
	mruo.mutation.ClearRemarks()
	return mruo
}

// SetUserID sets the "user_id" field.
func (mruo *MedicalRecordUpdateOne) SetUserID(s string) *MedicalRecordUpdateOne {
	mruo.mutation.SetUserID(s)
	return mruo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (mruo *MedicalRecordUpdateOne) SetNillableUserID(s *string) *MedicalRecordUpdateOne {
	if s != nil {
		mruo.SetUserID(*s)
	}
	return mruo
}

// ClearUserID clears the value of the "user_id" field.
func (mruo *MedicalRecordUpdateOne) ClearUserID() *MedicalRecordUpdateOne {
	mruo.mutation.ClearUserID()
	return mruo
}

// Mutation returns the MedicalRecordMutation object of the builder.
func (mruo *MedicalRecordUpdateOne) Mutation() *MedicalRecordMutation {
	return mruo.mutation
}

// Where appends a list predicates to the MedicalRecordUpdate builder.
func (mruo *MedicalRecordUpdateOne) Where(ps ...predicate.MedicalRecord) *MedicalRecordUpdateOne {
	mruo.mutation.Where(ps...)
	return mruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mruo *MedicalRecordUpdateOne) Select(field string, fields ...string) *MedicalRecordUpdateOne {
	mruo.fields = append([]string{field}, fields...)
	return mruo
}

// Save executes the query and returns the updated MedicalRecord entity.
func (mruo *MedicalRecordUpdateOne) Save(ctx context.Context) (*MedicalRecord, error) {
	mruo.defaults()
	return withHooks(ctx, mruo.sqlSave, mruo.mutation, mruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mruo *MedicalRecordUpdateOne) SaveX(ctx context.Context) *MedicalRecord {
	node, err := mruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mruo *MedicalRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := mruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mruo *MedicalRecordUpdateOne) ExecX(ctx context.Context) {
	if err := mruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mruo *MedicalRecordUpdateOne) defaults() {
	if _, ok := mruo.mutation.UpdatedAt(); !ok {
		v := medicalrecord.UpdateDefaultUpdatedAt()
		mruo.mutation.SetUpdatedAt(v)
	}
}

func (mruo *MedicalRecordUpdateOne) sqlSave(ctx context.Context) (_node *MedicalRecord, err error) {
	_spec := sqlgraph.NewUpdateSpec(medicalrecord.Table, medicalrecord.Columns, sqlgraph.NewFieldSpec(medicalrecord.FieldID, field.TypeUUID))
	id, ok := mruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MedicalRecord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, medicalrecord.FieldID)
		for _, f := range fields {
			if !medicalrecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != medicalrecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mruo.mutation.UpdatedAt(); ok {
		_spec.SetField(medicalrecord.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mruo.mutation.PatientName(); ok {
		_spec.SetField(medicalrecord.FieldPatientName, field.TypeString, value)
	}
	if mruo.mutation.PatientNameCleared() {
		_spec.ClearField(medicalrecord.FieldPatientName, field.TypeString)
	}
	if value, ok := mruo.mutation.PhoneNumber(); ok {
		_spec.SetField(medicalrecord.FieldPhoneNumber, field.TypeString, value)
	}
	if mruo.mutation.PhoneNumberCleared() {
		_spec.ClearField(medicalrecord.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := mruo.mutation.Gender(); ok {
		_spec.SetField(medicalrecord.FieldGender, field.TypeInt32, value)
	}
	if value, ok := mruo.mutation.AddedGender(); ok {
		_spec.AddField(medicalrecord.FieldGender, field.TypeInt32, value)
	}
	if mruo.mutation.GenderCleared() {
		_spec.ClearField(medicalrecord.FieldGender, field.TypeInt32)
	}
	if value, ok := mruo.mutation.Age(); ok {
		_spec.SetField(medicalrecord.FieldAge, field.TypeInt32, value)
	}
	if value, ok := mruo.mutation.AddedAge(); ok {
		_spec.AddField(medicalrecord.FieldAge, field.TypeInt32, value)
	}
	if mruo.mutation.AgeCleared() {
		_spec.ClearField(medicalrecord.FieldAge, field.TypeInt32)
	}
	if value, ok := mruo.mutation.VisitTime(); ok {
		_spec.SetField(medicalrecord.FieldVisitTime, field.TypeInt64, value)
	}
	if value, ok := mruo.mutation.AddedVisitTime(); ok {
		_spec.AddField(medicalrecord.FieldVisitTime, field.TypeInt64, value)
	}
	if mruo.mutation.VisitTimeCleared() {
		_spec.ClearField(medicalrecord.FieldVisitTime, field.TypeInt64)
	}
	if value, ok := mruo.mutation.Diagnosis(); ok {
		_spec.SetField(medicalrecord.FieldDiagnosis, field.TypeString, value)
	}
	if mruo.mutation.DiagnosisCleared() {
		_spec.ClearField(medicalrecord.FieldDiagnosis, field.TypeString)
	}
	if value, ok := mruo.mutation.TreatmentPlan(); ok {
		_spec.SetField(medicalrecord.FieldTreatmentPlan, field.TypeString, value)
	}
	if mruo.mutation.TreatmentPlanCleared() {
		_spec.ClearField(medicalrecord.FieldTreatmentPlan, field.TypeString)
	}
	if value, ok := mruo.mutation.Prescription(); ok {
		_spec.SetField(medicalrecord.FieldPrescription, field.TypeString, value)
	}
	if mruo.mutation.PrescriptionCleared() {
		_spec.ClearField(medicalrecord.FieldPrescription, field.TypeString)
	}
	if value, ok := mruo.mutation.ExaminationResults(); ok {
		_spec.SetField(medicalrecord.FieldExaminationResults, field.TypeString, value)
	}
	if mruo.mutation.ExaminationResultsCleared() {
		_spec.ClearField(medicalrecord.FieldExaminationResults, field.TypeString)
	}
	if value, ok := mruo.mutation.DoctorAdvice(); ok {
		_spec.SetField(medicalrecord.FieldDoctorAdvice, field.TypeString, value)
	}
	if mruo.mutation.DoctorAdviceCleared() {
		_spec.ClearField(medicalrecord.FieldDoctorAdvice, field.TypeString)
	}
	if value, ok := mruo.mutation.DoctorID(); ok {
		_spec.SetField(medicalrecord.FieldDoctorID, field.TypeString, value)
	}
	if mruo.mutation.DoctorIDCleared() {
		_spec.ClearField(medicalrecord.FieldDoctorID, field.TypeString)
	}
	if value, ok := mruo.mutation.Department(); ok {
		_spec.SetField(medicalrecord.FieldDepartment, field.TypeString, value)
	}
	if mruo.mutation.DepartmentCleared() {
		_spec.ClearField(medicalrecord.FieldDepartment, field.TypeString)
	}
	if value, ok := mruo.mutation.AppointmentID(); ok {
		_spec.SetField(medicalrecord.FieldAppointmentID, field.TypeString, value)
	}
	if mruo.mutation.AppointmentIDCleared() {
		_spec.ClearField(medicalrecord.FieldAppointmentID, field.TypeString)
	}
	if value, ok := mruo.mutation.Remarks(); ok {
		_spec.SetField(medicalrecord.FieldRemarks, field.TypeString, value)
	}
	if mruo.mutation.RemarksCleared() {
		_spec.ClearField(medicalrecord.FieldRemarks, field.TypeString)
	}
	if value, ok := mruo.mutation.UserID(); ok {
		_spec.SetField(medicalrecord.FieldUserID, field.TypeString, value)
	}
	if mruo.mutation.UserIDCleared() {
		_spec.ClearField(medicalrecord.FieldUserID, field.TypeString)
	}
	_node = &MedicalRecord{config: mruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{medicalrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mruo.mutation.done = true
	return _node, nil
}
