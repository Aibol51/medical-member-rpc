// Code generated by ent, DO NOT EDIT.

package news

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/suyuan32/simple-admin-member-rpc/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.News {
	return predicate.News(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.News {
	return predicate.News(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.News {
	return predicate.News(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.News {
	return predicate.News(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.News {
	return predicate.News(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.News {
	return predicate.News(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.News {
	return predicate.News(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.News {
	return predicate.News(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.News {
	return predicate.News(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.News {
	return predicate.News(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.News {
	return predicate.News(sql.FieldEQ(FieldUpdatedAt, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v uint8) predicate.News {
	return predicate.News(sql.FieldEQ(FieldStatus, v))
}

// Sort applies equality check predicate on the "sort" field. It's identical to SortEQ.
func Sort(v uint32) predicate.News {
	return predicate.News(sql.FieldEQ(FieldSort, v))
}

// TitleZh applies equality check predicate on the "title_zh" field. It's identical to TitleZhEQ.
func TitleZh(v string) predicate.News {
	return predicate.News(sql.FieldEQ(FieldTitleZh, v))
}

// TitleEn applies equality check predicate on the "title_en" field. It's identical to TitleEnEQ.
func TitleEn(v string) predicate.News {
	return predicate.News(sql.FieldEQ(FieldTitleEn, v))
}

// TitleRu applies equality check predicate on the "title_ru" field. It's identical to TitleRuEQ.
func TitleRu(v string) predicate.News {
	return predicate.News(sql.FieldEQ(FieldTitleRu, v))
}

// TitleKk applies equality check predicate on the "title_kk" field. It's identical to TitleKkEQ.
func TitleKk(v string) predicate.News {
	return predicate.News(sql.FieldEQ(FieldTitleKk, v))
}

// ContentZh applies equality check predicate on the "content_zh" field. It's identical to ContentZhEQ.
func ContentZh(v string) predicate.News {
	return predicate.News(sql.FieldEQ(FieldContentZh, v))
}

// ContentEn applies equality check predicate on the "content_en" field. It's identical to ContentEnEQ.
func ContentEn(v string) predicate.News {
	return predicate.News(sql.FieldEQ(FieldContentEn, v))
}

// ContentRu applies equality check predicate on the "content_ru" field. It's identical to ContentRuEQ.
func ContentRu(v string) predicate.News {
	return predicate.News(sql.FieldEQ(FieldContentRu, v))
}

// ContentKk applies equality check predicate on the "content_kk" field. It's identical to ContentKkEQ.
func ContentKk(v string) predicate.News {
	return predicate.News(sql.FieldEQ(FieldContentKk, v))
}

// CoverURL applies equality check predicate on the "cover_url" field. It's identical to CoverURLEQ.
func CoverURL(v string) predicate.News {
	return predicate.News(sql.FieldEQ(FieldCoverURL, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.News {
	return predicate.News(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.News {
	return predicate.News(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.News {
	return predicate.News(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.News {
	return predicate.News(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.News {
	return predicate.News(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.News {
	return predicate.News(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.News {
	return predicate.News(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.News {
	return predicate.News(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.News {
	return predicate.News(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.News {
	return predicate.News(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.News {
	return predicate.News(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.News {
	return predicate.News(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.News {
	return predicate.News(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.News {
	return predicate.News(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.News {
	return predicate.News(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.News {
	return predicate.News(sql.FieldLTE(FieldUpdatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v uint8) predicate.News {
	return predicate.News(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v uint8) predicate.News {
	return predicate.News(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...uint8) predicate.News {
	return predicate.News(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...uint8) predicate.News {
	return predicate.News(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v uint8) predicate.News {
	return predicate.News(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v uint8) predicate.News {
	return predicate.News(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v uint8) predicate.News {
	return predicate.News(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v uint8) predicate.News {
	return predicate.News(sql.FieldLTE(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.News {
	return predicate.News(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.News {
	return predicate.News(sql.FieldNotNull(FieldStatus))
}

// SortEQ applies the EQ predicate on the "sort" field.
func SortEQ(v uint32) predicate.News {
	return predicate.News(sql.FieldEQ(FieldSort, v))
}

// SortNEQ applies the NEQ predicate on the "sort" field.
func SortNEQ(v uint32) predicate.News {
	return predicate.News(sql.FieldNEQ(FieldSort, v))
}

// SortIn applies the In predicate on the "sort" field.
func SortIn(vs ...uint32) predicate.News {
	return predicate.News(sql.FieldIn(FieldSort, vs...))
}

// SortNotIn applies the NotIn predicate on the "sort" field.
func SortNotIn(vs ...uint32) predicate.News {
	return predicate.News(sql.FieldNotIn(FieldSort, vs...))
}

// SortGT applies the GT predicate on the "sort" field.
func SortGT(v uint32) predicate.News {
	return predicate.News(sql.FieldGT(FieldSort, v))
}

// SortGTE applies the GTE predicate on the "sort" field.
func SortGTE(v uint32) predicate.News {
	return predicate.News(sql.FieldGTE(FieldSort, v))
}

// SortLT applies the LT predicate on the "sort" field.
func SortLT(v uint32) predicate.News {
	return predicate.News(sql.FieldLT(FieldSort, v))
}

// SortLTE applies the LTE predicate on the "sort" field.
func SortLTE(v uint32) predicate.News {
	return predicate.News(sql.FieldLTE(FieldSort, v))
}

// TitleZhEQ applies the EQ predicate on the "title_zh" field.
func TitleZhEQ(v string) predicate.News {
	return predicate.News(sql.FieldEQ(FieldTitleZh, v))
}

// TitleZhNEQ applies the NEQ predicate on the "title_zh" field.
func TitleZhNEQ(v string) predicate.News {
	return predicate.News(sql.FieldNEQ(FieldTitleZh, v))
}

// TitleZhIn applies the In predicate on the "title_zh" field.
func TitleZhIn(vs ...string) predicate.News {
	return predicate.News(sql.FieldIn(FieldTitleZh, vs...))
}

// TitleZhNotIn applies the NotIn predicate on the "title_zh" field.
func TitleZhNotIn(vs ...string) predicate.News {
	return predicate.News(sql.FieldNotIn(FieldTitleZh, vs...))
}

// TitleZhGT applies the GT predicate on the "title_zh" field.
func TitleZhGT(v string) predicate.News {
	return predicate.News(sql.FieldGT(FieldTitleZh, v))
}

// TitleZhGTE applies the GTE predicate on the "title_zh" field.
func TitleZhGTE(v string) predicate.News {
	return predicate.News(sql.FieldGTE(FieldTitleZh, v))
}

// TitleZhLT applies the LT predicate on the "title_zh" field.
func TitleZhLT(v string) predicate.News {
	return predicate.News(sql.FieldLT(FieldTitleZh, v))
}

// TitleZhLTE applies the LTE predicate on the "title_zh" field.
func TitleZhLTE(v string) predicate.News {
	return predicate.News(sql.FieldLTE(FieldTitleZh, v))
}

// TitleZhContains applies the Contains predicate on the "title_zh" field.
func TitleZhContains(v string) predicate.News {
	return predicate.News(sql.FieldContains(FieldTitleZh, v))
}

// TitleZhHasPrefix applies the HasPrefix predicate on the "title_zh" field.
func TitleZhHasPrefix(v string) predicate.News {
	return predicate.News(sql.FieldHasPrefix(FieldTitleZh, v))
}

// TitleZhHasSuffix applies the HasSuffix predicate on the "title_zh" field.
func TitleZhHasSuffix(v string) predicate.News {
	return predicate.News(sql.FieldHasSuffix(FieldTitleZh, v))
}

// TitleZhIsNil applies the IsNil predicate on the "title_zh" field.
func TitleZhIsNil() predicate.News {
	return predicate.News(sql.FieldIsNull(FieldTitleZh))
}

// TitleZhNotNil applies the NotNil predicate on the "title_zh" field.
func TitleZhNotNil() predicate.News {
	return predicate.News(sql.FieldNotNull(FieldTitleZh))
}

// TitleZhEqualFold applies the EqualFold predicate on the "title_zh" field.
func TitleZhEqualFold(v string) predicate.News {
	return predicate.News(sql.FieldEqualFold(FieldTitleZh, v))
}

// TitleZhContainsFold applies the ContainsFold predicate on the "title_zh" field.
func TitleZhContainsFold(v string) predicate.News {
	return predicate.News(sql.FieldContainsFold(FieldTitleZh, v))
}

// TitleEnEQ applies the EQ predicate on the "title_en" field.
func TitleEnEQ(v string) predicate.News {
	return predicate.News(sql.FieldEQ(FieldTitleEn, v))
}

// TitleEnNEQ applies the NEQ predicate on the "title_en" field.
func TitleEnNEQ(v string) predicate.News {
	return predicate.News(sql.FieldNEQ(FieldTitleEn, v))
}

// TitleEnIn applies the In predicate on the "title_en" field.
func TitleEnIn(vs ...string) predicate.News {
	return predicate.News(sql.FieldIn(FieldTitleEn, vs...))
}

// TitleEnNotIn applies the NotIn predicate on the "title_en" field.
func TitleEnNotIn(vs ...string) predicate.News {
	return predicate.News(sql.FieldNotIn(FieldTitleEn, vs...))
}

// TitleEnGT applies the GT predicate on the "title_en" field.
func TitleEnGT(v string) predicate.News {
	return predicate.News(sql.FieldGT(FieldTitleEn, v))
}

// TitleEnGTE applies the GTE predicate on the "title_en" field.
func TitleEnGTE(v string) predicate.News {
	return predicate.News(sql.FieldGTE(FieldTitleEn, v))
}

// TitleEnLT applies the LT predicate on the "title_en" field.
func TitleEnLT(v string) predicate.News {
	return predicate.News(sql.FieldLT(FieldTitleEn, v))
}

// TitleEnLTE applies the LTE predicate on the "title_en" field.
func TitleEnLTE(v string) predicate.News {
	return predicate.News(sql.FieldLTE(FieldTitleEn, v))
}

// TitleEnContains applies the Contains predicate on the "title_en" field.
func TitleEnContains(v string) predicate.News {
	return predicate.News(sql.FieldContains(FieldTitleEn, v))
}

// TitleEnHasPrefix applies the HasPrefix predicate on the "title_en" field.
func TitleEnHasPrefix(v string) predicate.News {
	return predicate.News(sql.FieldHasPrefix(FieldTitleEn, v))
}

// TitleEnHasSuffix applies the HasSuffix predicate on the "title_en" field.
func TitleEnHasSuffix(v string) predicate.News {
	return predicate.News(sql.FieldHasSuffix(FieldTitleEn, v))
}

// TitleEnIsNil applies the IsNil predicate on the "title_en" field.
func TitleEnIsNil() predicate.News {
	return predicate.News(sql.FieldIsNull(FieldTitleEn))
}

// TitleEnNotNil applies the NotNil predicate on the "title_en" field.
func TitleEnNotNil() predicate.News {
	return predicate.News(sql.FieldNotNull(FieldTitleEn))
}

// TitleEnEqualFold applies the EqualFold predicate on the "title_en" field.
func TitleEnEqualFold(v string) predicate.News {
	return predicate.News(sql.FieldEqualFold(FieldTitleEn, v))
}

// TitleEnContainsFold applies the ContainsFold predicate on the "title_en" field.
func TitleEnContainsFold(v string) predicate.News {
	return predicate.News(sql.FieldContainsFold(FieldTitleEn, v))
}

// TitleRuEQ applies the EQ predicate on the "title_ru" field.
func TitleRuEQ(v string) predicate.News {
	return predicate.News(sql.FieldEQ(FieldTitleRu, v))
}

// TitleRuNEQ applies the NEQ predicate on the "title_ru" field.
func TitleRuNEQ(v string) predicate.News {
	return predicate.News(sql.FieldNEQ(FieldTitleRu, v))
}

// TitleRuIn applies the In predicate on the "title_ru" field.
func TitleRuIn(vs ...string) predicate.News {
	return predicate.News(sql.FieldIn(FieldTitleRu, vs...))
}

// TitleRuNotIn applies the NotIn predicate on the "title_ru" field.
func TitleRuNotIn(vs ...string) predicate.News {
	return predicate.News(sql.FieldNotIn(FieldTitleRu, vs...))
}

// TitleRuGT applies the GT predicate on the "title_ru" field.
func TitleRuGT(v string) predicate.News {
	return predicate.News(sql.FieldGT(FieldTitleRu, v))
}

// TitleRuGTE applies the GTE predicate on the "title_ru" field.
func TitleRuGTE(v string) predicate.News {
	return predicate.News(sql.FieldGTE(FieldTitleRu, v))
}

// TitleRuLT applies the LT predicate on the "title_ru" field.
func TitleRuLT(v string) predicate.News {
	return predicate.News(sql.FieldLT(FieldTitleRu, v))
}

// TitleRuLTE applies the LTE predicate on the "title_ru" field.
func TitleRuLTE(v string) predicate.News {
	return predicate.News(sql.FieldLTE(FieldTitleRu, v))
}

// TitleRuContains applies the Contains predicate on the "title_ru" field.
func TitleRuContains(v string) predicate.News {
	return predicate.News(sql.FieldContains(FieldTitleRu, v))
}

// TitleRuHasPrefix applies the HasPrefix predicate on the "title_ru" field.
func TitleRuHasPrefix(v string) predicate.News {
	return predicate.News(sql.FieldHasPrefix(FieldTitleRu, v))
}

// TitleRuHasSuffix applies the HasSuffix predicate on the "title_ru" field.
func TitleRuHasSuffix(v string) predicate.News {
	return predicate.News(sql.FieldHasSuffix(FieldTitleRu, v))
}

// TitleRuIsNil applies the IsNil predicate on the "title_ru" field.
func TitleRuIsNil() predicate.News {
	return predicate.News(sql.FieldIsNull(FieldTitleRu))
}

// TitleRuNotNil applies the NotNil predicate on the "title_ru" field.
func TitleRuNotNil() predicate.News {
	return predicate.News(sql.FieldNotNull(FieldTitleRu))
}

// TitleRuEqualFold applies the EqualFold predicate on the "title_ru" field.
func TitleRuEqualFold(v string) predicate.News {
	return predicate.News(sql.FieldEqualFold(FieldTitleRu, v))
}

// TitleRuContainsFold applies the ContainsFold predicate on the "title_ru" field.
func TitleRuContainsFold(v string) predicate.News {
	return predicate.News(sql.FieldContainsFold(FieldTitleRu, v))
}

// TitleKkEQ applies the EQ predicate on the "title_kk" field.
func TitleKkEQ(v string) predicate.News {
	return predicate.News(sql.FieldEQ(FieldTitleKk, v))
}

// TitleKkNEQ applies the NEQ predicate on the "title_kk" field.
func TitleKkNEQ(v string) predicate.News {
	return predicate.News(sql.FieldNEQ(FieldTitleKk, v))
}

// TitleKkIn applies the In predicate on the "title_kk" field.
func TitleKkIn(vs ...string) predicate.News {
	return predicate.News(sql.FieldIn(FieldTitleKk, vs...))
}

// TitleKkNotIn applies the NotIn predicate on the "title_kk" field.
func TitleKkNotIn(vs ...string) predicate.News {
	return predicate.News(sql.FieldNotIn(FieldTitleKk, vs...))
}

// TitleKkGT applies the GT predicate on the "title_kk" field.
func TitleKkGT(v string) predicate.News {
	return predicate.News(sql.FieldGT(FieldTitleKk, v))
}

// TitleKkGTE applies the GTE predicate on the "title_kk" field.
func TitleKkGTE(v string) predicate.News {
	return predicate.News(sql.FieldGTE(FieldTitleKk, v))
}

// TitleKkLT applies the LT predicate on the "title_kk" field.
func TitleKkLT(v string) predicate.News {
	return predicate.News(sql.FieldLT(FieldTitleKk, v))
}

// TitleKkLTE applies the LTE predicate on the "title_kk" field.
func TitleKkLTE(v string) predicate.News {
	return predicate.News(sql.FieldLTE(FieldTitleKk, v))
}

// TitleKkContains applies the Contains predicate on the "title_kk" field.
func TitleKkContains(v string) predicate.News {
	return predicate.News(sql.FieldContains(FieldTitleKk, v))
}

// TitleKkHasPrefix applies the HasPrefix predicate on the "title_kk" field.
func TitleKkHasPrefix(v string) predicate.News {
	return predicate.News(sql.FieldHasPrefix(FieldTitleKk, v))
}

// TitleKkHasSuffix applies the HasSuffix predicate on the "title_kk" field.
func TitleKkHasSuffix(v string) predicate.News {
	return predicate.News(sql.FieldHasSuffix(FieldTitleKk, v))
}

// TitleKkIsNil applies the IsNil predicate on the "title_kk" field.
func TitleKkIsNil() predicate.News {
	return predicate.News(sql.FieldIsNull(FieldTitleKk))
}

// TitleKkNotNil applies the NotNil predicate on the "title_kk" field.
func TitleKkNotNil() predicate.News {
	return predicate.News(sql.FieldNotNull(FieldTitleKk))
}

// TitleKkEqualFold applies the EqualFold predicate on the "title_kk" field.
func TitleKkEqualFold(v string) predicate.News {
	return predicate.News(sql.FieldEqualFold(FieldTitleKk, v))
}

// TitleKkContainsFold applies the ContainsFold predicate on the "title_kk" field.
func TitleKkContainsFold(v string) predicate.News {
	return predicate.News(sql.FieldContainsFold(FieldTitleKk, v))
}

// ContentZhEQ applies the EQ predicate on the "content_zh" field.
func ContentZhEQ(v string) predicate.News {
	return predicate.News(sql.FieldEQ(FieldContentZh, v))
}

// ContentZhNEQ applies the NEQ predicate on the "content_zh" field.
func ContentZhNEQ(v string) predicate.News {
	return predicate.News(sql.FieldNEQ(FieldContentZh, v))
}

// ContentZhIn applies the In predicate on the "content_zh" field.
func ContentZhIn(vs ...string) predicate.News {
	return predicate.News(sql.FieldIn(FieldContentZh, vs...))
}

// ContentZhNotIn applies the NotIn predicate on the "content_zh" field.
func ContentZhNotIn(vs ...string) predicate.News {
	return predicate.News(sql.FieldNotIn(FieldContentZh, vs...))
}

// ContentZhGT applies the GT predicate on the "content_zh" field.
func ContentZhGT(v string) predicate.News {
	return predicate.News(sql.FieldGT(FieldContentZh, v))
}

// ContentZhGTE applies the GTE predicate on the "content_zh" field.
func ContentZhGTE(v string) predicate.News {
	return predicate.News(sql.FieldGTE(FieldContentZh, v))
}

// ContentZhLT applies the LT predicate on the "content_zh" field.
func ContentZhLT(v string) predicate.News {
	return predicate.News(sql.FieldLT(FieldContentZh, v))
}

// ContentZhLTE applies the LTE predicate on the "content_zh" field.
func ContentZhLTE(v string) predicate.News {
	return predicate.News(sql.FieldLTE(FieldContentZh, v))
}

// ContentZhContains applies the Contains predicate on the "content_zh" field.
func ContentZhContains(v string) predicate.News {
	return predicate.News(sql.FieldContains(FieldContentZh, v))
}

// ContentZhHasPrefix applies the HasPrefix predicate on the "content_zh" field.
func ContentZhHasPrefix(v string) predicate.News {
	return predicate.News(sql.FieldHasPrefix(FieldContentZh, v))
}

// ContentZhHasSuffix applies the HasSuffix predicate on the "content_zh" field.
func ContentZhHasSuffix(v string) predicate.News {
	return predicate.News(sql.FieldHasSuffix(FieldContentZh, v))
}

// ContentZhIsNil applies the IsNil predicate on the "content_zh" field.
func ContentZhIsNil() predicate.News {
	return predicate.News(sql.FieldIsNull(FieldContentZh))
}

// ContentZhNotNil applies the NotNil predicate on the "content_zh" field.
func ContentZhNotNil() predicate.News {
	return predicate.News(sql.FieldNotNull(FieldContentZh))
}

// ContentZhEqualFold applies the EqualFold predicate on the "content_zh" field.
func ContentZhEqualFold(v string) predicate.News {
	return predicate.News(sql.FieldEqualFold(FieldContentZh, v))
}

// ContentZhContainsFold applies the ContainsFold predicate on the "content_zh" field.
func ContentZhContainsFold(v string) predicate.News {
	return predicate.News(sql.FieldContainsFold(FieldContentZh, v))
}

// ContentEnEQ applies the EQ predicate on the "content_en" field.
func ContentEnEQ(v string) predicate.News {
	return predicate.News(sql.FieldEQ(FieldContentEn, v))
}

// ContentEnNEQ applies the NEQ predicate on the "content_en" field.
func ContentEnNEQ(v string) predicate.News {
	return predicate.News(sql.FieldNEQ(FieldContentEn, v))
}

// ContentEnIn applies the In predicate on the "content_en" field.
func ContentEnIn(vs ...string) predicate.News {
	return predicate.News(sql.FieldIn(FieldContentEn, vs...))
}

// ContentEnNotIn applies the NotIn predicate on the "content_en" field.
func ContentEnNotIn(vs ...string) predicate.News {
	return predicate.News(sql.FieldNotIn(FieldContentEn, vs...))
}

// ContentEnGT applies the GT predicate on the "content_en" field.
func ContentEnGT(v string) predicate.News {
	return predicate.News(sql.FieldGT(FieldContentEn, v))
}

// ContentEnGTE applies the GTE predicate on the "content_en" field.
func ContentEnGTE(v string) predicate.News {
	return predicate.News(sql.FieldGTE(FieldContentEn, v))
}

// ContentEnLT applies the LT predicate on the "content_en" field.
func ContentEnLT(v string) predicate.News {
	return predicate.News(sql.FieldLT(FieldContentEn, v))
}

// ContentEnLTE applies the LTE predicate on the "content_en" field.
func ContentEnLTE(v string) predicate.News {
	return predicate.News(sql.FieldLTE(FieldContentEn, v))
}

// ContentEnContains applies the Contains predicate on the "content_en" field.
func ContentEnContains(v string) predicate.News {
	return predicate.News(sql.FieldContains(FieldContentEn, v))
}

// ContentEnHasPrefix applies the HasPrefix predicate on the "content_en" field.
func ContentEnHasPrefix(v string) predicate.News {
	return predicate.News(sql.FieldHasPrefix(FieldContentEn, v))
}

// ContentEnHasSuffix applies the HasSuffix predicate on the "content_en" field.
func ContentEnHasSuffix(v string) predicate.News {
	return predicate.News(sql.FieldHasSuffix(FieldContentEn, v))
}

// ContentEnIsNil applies the IsNil predicate on the "content_en" field.
func ContentEnIsNil() predicate.News {
	return predicate.News(sql.FieldIsNull(FieldContentEn))
}

// ContentEnNotNil applies the NotNil predicate on the "content_en" field.
func ContentEnNotNil() predicate.News {
	return predicate.News(sql.FieldNotNull(FieldContentEn))
}

// ContentEnEqualFold applies the EqualFold predicate on the "content_en" field.
func ContentEnEqualFold(v string) predicate.News {
	return predicate.News(sql.FieldEqualFold(FieldContentEn, v))
}

// ContentEnContainsFold applies the ContainsFold predicate on the "content_en" field.
func ContentEnContainsFold(v string) predicate.News {
	return predicate.News(sql.FieldContainsFold(FieldContentEn, v))
}

// ContentRuEQ applies the EQ predicate on the "content_ru" field.
func ContentRuEQ(v string) predicate.News {
	return predicate.News(sql.FieldEQ(FieldContentRu, v))
}

// ContentRuNEQ applies the NEQ predicate on the "content_ru" field.
func ContentRuNEQ(v string) predicate.News {
	return predicate.News(sql.FieldNEQ(FieldContentRu, v))
}

// ContentRuIn applies the In predicate on the "content_ru" field.
func ContentRuIn(vs ...string) predicate.News {
	return predicate.News(sql.FieldIn(FieldContentRu, vs...))
}

// ContentRuNotIn applies the NotIn predicate on the "content_ru" field.
func ContentRuNotIn(vs ...string) predicate.News {
	return predicate.News(sql.FieldNotIn(FieldContentRu, vs...))
}

// ContentRuGT applies the GT predicate on the "content_ru" field.
func ContentRuGT(v string) predicate.News {
	return predicate.News(sql.FieldGT(FieldContentRu, v))
}

// ContentRuGTE applies the GTE predicate on the "content_ru" field.
func ContentRuGTE(v string) predicate.News {
	return predicate.News(sql.FieldGTE(FieldContentRu, v))
}

// ContentRuLT applies the LT predicate on the "content_ru" field.
func ContentRuLT(v string) predicate.News {
	return predicate.News(sql.FieldLT(FieldContentRu, v))
}

// ContentRuLTE applies the LTE predicate on the "content_ru" field.
func ContentRuLTE(v string) predicate.News {
	return predicate.News(sql.FieldLTE(FieldContentRu, v))
}

// ContentRuContains applies the Contains predicate on the "content_ru" field.
func ContentRuContains(v string) predicate.News {
	return predicate.News(sql.FieldContains(FieldContentRu, v))
}

// ContentRuHasPrefix applies the HasPrefix predicate on the "content_ru" field.
func ContentRuHasPrefix(v string) predicate.News {
	return predicate.News(sql.FieldHasPrefix(FieldContentRu, v))
}

// ContentRuHasSuffix applies the HasSuffix predicate on the "content_ru" field.
func ContentRuHasSuffix(v string) predicate.News {
	return predicate.News(sql.FieldHasSuffix(FieldContentRu, v))
}

// ContentRuIsNil applies the IsNil predicate on the "content_ru" field.
func ContentRuIsNil() predicate.News {
	return predicate.News(sql.FieldIsNull(FieldContentRu))
}

// ContentRuNotNil applies the NotNil predicate on the "content_ru" field.
func ContentRuNotNil() predicate.News {
	return predicate.News(sql.FieldNotNull(FieldContentRu))
}

// ContentRuEqualFold applies the EqualFold predicate on the "content_ru" field.
func ContentRuEqualFold(v string) predicate.News {
	return predicate.News(sql.FieldEqualFold(FieldContentRu, v))
}

// ContentRuContainsFold applies the ContainsFold predicate on the "content_ru" field.
func ContentRuContainsFold(v string) predicate.News {
	return predicate.News(sql.FieldContainsFold(FieldContentRu, v))
}

// ContentKkEQ applies the EQ predicate on the "content_kk" field.
func ContentKkEQ(v string) predicate.News {
	return predicate.News(sql.FieldEQ(FieldContentKk, v))
}

// ContentKkNEQ applies the NEQ predicate on the "content_kk" field.
func ContentKkNEQ(v string) predicate.News {
	return predicate.News(sql.FieldNEQ(FieldContentKk, v))
}

// ContentKkIn applies the In predicate on the "content_kk" field.
func ContentKkIn(vs ...string) predicate.News {
	return predicate.News(sql.FieldIn(FieldContentKk, vs...))
}

// ContentKkNotIn applies the NotIn predicate on the "content_kk" field.
func ContentKkNotIn(vs ...string) predicate.News {
	return predicate.News(sql.FieldNotIn(FieldContentKk, vs...))
}

// ContentKkGT applies the GT predicate on the "content_kk" field.
func ContentKkGT(v string) predicate.News {
	return predicate.News(sql.FieldGT(FieldContentKk, v))
}

// ContentKkGTE applies the GTE predicate on the "content_kk" field.
func ContentKkGTE(v string) predicate.News {
	return predicate.News(sql.FieldGTE(FieldContentKk, v))
}

// ContentKkLT applies the LT predicate on the "content_kk" field.
func ContentKkLT(v string) predicate.News {
	return predicate.News(sql.FieldLT(FieldContentKk, v))
}

// ContentKkLTE applies the LTE predicate on the "content_kk" field.
func ContentKkLTE(v string) predicate.News {
	return predicate.News(sql.FieldLTE(FieldContentKk, v))
}

// ContentKkContains applies the Contains predicate on the "content_kk" field.
func ContentKkContains(v string) predicate.News {
	return predicate.News(sql.FieldContains(FieldContentKk, v))
}

// ContentKkHasPrefix applies the HasPrefix predicate on the "content_kk" field.
func ContentKkHasPrefix(v string) predicate.News {
	return predicate.News(sql.FieldHasPrefix(FieldContentKk, v))
}

// ContentKkHasSuffix applies the HasSuffix predicate on the "content_kk" field.
func ContentKkHasSuffix(v string) predicate.News {
	return predicate.News(sql.FieldHasSuffix(FieldContentKk, v))
}

// ContentKkIsNil applies the IsNil predicate on the "content_kk" field.
func ContentKkIsNil() predicate.News {
	return predicate.News(sql.FieldIsNull(FieldContentKk))
}

// ContentKkNotNil applies the NotNil predicate on the "content_kk" field.
func ContentKkNotNil() predicate.News {
	return predicate.News(sql.FieldNotNull(FieldContentKk))
}

// ContentKkEqualFold applies the EqualFold predicate on the "content_kk" field.
func ContentKkEqualFold(v string) predicate.News {
	return predicate.News(sql.FieldEqualFold(FieldContentKk, v))
}

// ContentKkContainsFold applies the ContainsFold predicate on the "content_kk" field.
func ContentKkContainsFold(v string) predicate.News {
	return predicate.News(sql.FieldContainsFold(FieldContentKk, v))
}

// CoverURLEQ applies the EQ predicate on the "cover_url" field.
func CoverURLEQ(v string) predicate.News {
	return predicate.News(sql.FieldEQ(FieldCoverURL, v))
}

// CoverURLNEQ applies the NEQ predicate on the "cover_url" field.
func CoverURLNEQ(v string) predicate.News {
	return predicate.News(sql.FieldNEQ(FieldCoverURL, v))
}

// CoverURLIn applies the In predicate on the "cover_url" field.
func CoverURLIn(vs ...string) predicate.News {
	return predicate.News(sql.FieldIn(FieldCoverURL, vs...))
}

// CoverURLNotIn applies the NotIn predicate on the "cover_url" field.
func CoverURLNotIn(vs ...string) predicate.News {
	return predicate.News(sql.FieldNotIn(FieldCoverURL, vs...))
}

// CoverURLGT applies the GT predicate on the "cover_url" field.
func CoverURLGT(v string) predicate.News {
	return predicate.News(sql.FieldGT(FieldCoverURL, v))
}

// CoverURLGTE applies the GTE predicate on the "cover_url" field.
func CoverURLGTE(v string) predicate.News {
	return predicate.News(sql.FieldGTE(FieldCoverURL, v))
}

// CoverURLLT applies the LT predicate on the "cover_url" field.
func CoverURLLT(v string) predicate.News {
	return predicate.News(sql.FieldLT(FieldCoverURL, v))
}

// CoverURLLTE applies the LTE predicate on the "cover_url" field.
func CoverURLLTE(v string) predicate.News {
	return predicate.News(sql.FieldLTE(FieldCoverURL, v))
}

// CoverURLContains applies the Contains predicate on the "cover_url" field.
func CoverURLContains(v string) predicate.News {
	return predicate.News(sql.FieldContains(FieldCoverURL, v))
}

// CoverURLHasPrefix applies the HasPrefix predicate on the "cover_url" field.
func CoverURLHasPrefix(v string) predicate.News {
	return predicate.News(sql.FieldHasPrefix(FieldCoverURL, v))
}

// CoverURLHasSuffix applies the HasSuffix predicate on the "cover_url" field.
func CoverURLHasSuffix(v string) predicate.News {
	return predicate.News(sql.FieldHasSuffix(FieldCoverURL, v))
}

// CoverURLIsNil applies the IsNil predicate on the "cover_url" field.
func CoverURLIsNil() predicate.News {
	return predicate.News(sql.FieldIsNull(FieldCoverURL))
}

// CoverURLNotNil applies the NotNil predicate on the "cover_url" field.
func CoverURLNotNil() predicate.News {
	return predicate.News(sql.FieldNotNull(FieldCoverURL))
}

// CoverURLEqualFold applies the EqualFold predicate on the "cover_url" field.
func CoverURLEqualFold(v string) predicate.News {
	return predicate.News(sql.FieldEqualFold(FieldCoverURL, v))
}

// CoverURLContainsFold applies the ContainsFold predicate on the "cover_url" field.
func CoverURLContainsFold(v string) predicate.News {
	return predicate.News(sql.FieldContainsFold(FieldCoverURL, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.News) predicate.News {
	return predicate.News(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.News) predicate.News {
	return predicate.News(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.News) predicate.News {
	return predicate.News(sql.NotPredicates(p))
}
