// Code generated by ent, DO NOT EDIT.

package news

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the news type in the database.
	Label = "news"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldSort holds the string denoting the sort field in the database.
	FieldSort = "sort"
	// FieldTitleZh holds the string denoting the title_zh field in the database.
	FieldTitleZh = "title_zh"
	// FieldTitleEn holds the string denoting the title_en field in the database.
	FieldTitleEn = "title_en"
	// FieldTitleRu holds the string denoting the title_ru field in the database.
	FieldTitleRu = "title_ru"
	// FieldTitleKk holds the string denoting the title_kk field in the database.
	FieldTitleKk = "title_kk"
	// FieldContentZh holds the string denoting the content_zh field in the database.
	FieldContentZh = "content_zh"
	// FieldContentEn holds the string denoting the content_en field in the database.
	FieldContentEn = "content_en"
	// FieldContentRu holds the string denoting the content_ru field in the database.
	FieldContentRu = "content_ru"
	// FieldContentKk holds the string denoting the content_kk field in the database.
	FieldContentKk = "content_kk"
	// FieldCoverURL holds the string denoting the cover_url field in the database.
	FieldCoverURL = "cover_url"
	// Table holds the table name of the news in the database.
	Table = "news"
)

// Columns holds all SQL columns for news fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldStatus,
	FieldSort,
	FieldTitleZh,
	FieldTitleEn,
	FieldTitleRu,
	FieldTitleKk,
	FieldContentZh,
	FieldContentEn,
	FieldContentRu,
	FieldContentKk,
	FieldCoverURL,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus uint8
	// DefaultSort holds the default value on creation for the "sort" field.
	DefaultSort uint32
)

// OrderOption defines the ordering options for the News queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// BySort orders the results by the sort field.
func BySort(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSort, opts...).ToFunc()
}

// ByTitleZh orders the results by the title_zh field.
func ByTitleZh(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitleZh, opts...).ToFunc()
}

// ByTitleEn orders the results by the title_en field.
func ByTitleEn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitleEn, opts...).ToFunc()
}

// ByTitleRu orders the results by the title_ru field.
func ByTitleRu(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitleRu, opts...).ToFunc()
}

// ByTitleKk orders the results by the title_kk field.
func ByTitleKk(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitleKk, opts...).ToFunc()
}

// ByContentZh orders the results by the content_zh field.
func ByContentZh(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContentZh, opts...).ToFunc()
}

// ByContentEn orders the results by the content_en field.
func ByContentEn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContentEn, opts...).ToFunc()
}

// ByContentRu orders the results by the content_ru field.
func ByContentRu(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContentRu, opts...).ToFunc()
}

// ByContentKk orders the results by the content_kk field.
func ByContentKk(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContentKk, opts...).ToFunc()
}

// ByCoverURL orders the results by the cover_url field.
func ByCoverURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoverURL, opts...).ToFunc()
}
