// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/suyuan32/simple-admin-member-rpc/ent/appointment"
	"github.com/suyuan32/simple-admin-member-rpc/ent/predicate"
)

// AppointmentUpdate is the builder for updating Appointment entities.
type AppointmentUpdate struct {
	config
	hooks    []Hook
	mutation *AppointmentMutation
}

// Where appends a list predicates to the AppointmentUpdate builder.
func (au *AppointmentUpdate) Where(ps ...predicate.Appointment) *AppointmentUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AppointmentUpdate) SetUpdatedAt(t time.Time) *AppointmentUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetPatientName sets the "patient_name" field.
func (au *AppointmentUpdate) SetPatientName(s string) *AppointmentUpdate {
	au.mutation.SetPatientName(s)
	return au
}

// SetNillablePatientName sets the "patient_name" field if the given value is not nil.
func (au *AppointmentUpdate) SetNillablePatientName(s *string) *AppointmentUpdate {
	if s != nil {
		au.SetPatientName(*s)
	}
	return au
}

// ClearPatientName clears the value of the "patient_name" field.
func (au *AppointmentUpdate) ClearPatientName() *AppointmentUpdate {
	au.mutation.ClearPatientName()
	return au
}

// SetPhoneNumber sets the "phone_number" field.
func (au *AppointmentUpdate) SetPhoneNumber(s string) *AppointmentUpdate {
	au.mutation.SetPhoneNumber(s)
	return au
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (au *AppointmentUpdate) SetNillablePhoneNumber(s *string) *AppointmentUpdate {
	if s != nil {
		au.SetPhoneNumber(*s)
	}
	return au
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (au *AppointmentUpdate) ClearPhoneNumber() *AppointmentUpdate {
	au.mutation.ClearPhoneNumber()
	return au
}

// SetIDCard sets the "id_card" field.
func (au *AppointmentUpdate) SetIDCard(s string) *AppointmentUpdate {
	au.mutation.SetIDCard(s)
	return au
}

// SetNillableIDCard sets the "id_card" field if the given value is not nil.
func (au *AppointmentUpdate) SetNillableIDCard(s *string) *AppointmentUpdate {
	if s != nil {
		au.SetIDCard(*s)
	}
	return au
}

// ClearIDCard clears the value of the "id_card" field.
func (au *AppointmentUpdate) ClearIDCard() *AppointmentUpdate {
	au.mutation.ClearIDCard()
	return au
}

// SetGender sets the "gender" field.
func (au *AppointmentUpdate) SetGender(i int32) *AppointmentUpdate {
	au.mutation.ResetGender()
	au.mutation.SetGender(i)
	return au
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (au *AppointmentUpdate) SetNillableGender(i *int32) *AppointmentUpdate {
	if i != nil {
		au.SetGender(*i)
	}
	return au
}

// AddGender adds i to the "gender" field.
func (au *AppointmentUpdate) AddGender(i int32) *AppointmentUpdate {
	au.mutation.AddGender(i)
	return au
}

// ClearGender clears the value of the "gender" field.
func (au *AppointmentUpdate) ClearGender() *AppointmentUpdate {
	au.mutation.ClearGender()
	return au
}

// SetAge sets the "age" field.
func (au *AppointmentUpdate) SetAge(i int32) *AppointmentUpdate {
	au.mutation.ResetAge()
	au.mutation.SetAge(i)
	return au
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (au *AppointmentUpdate) SetNillableAge(i *int32) *AppointmentUpdate {
	if i != nil {
		au.SetAge(*i)
	}
	return au
}

// AddAge adds i to the "age" field.
func (au *AppointmentUpdate) AddAge(i int32) *AppointmentUpdate {
	au.mutation.AddAge(i)
	return au
}

// ClearAge clears the value of the "age" field.
func (au *AppointmentUpdate) ClearAge() *AppointmentUpdate {
	au.mutation.ClearAge()
	return au
}

// SetAppointmentTime sets the "appointment_time" field.
func (au *AppointmentUpdate) SetAppointmentTime(i int64) *AppointmentUpdate {
	au.mutation.ResetAppointmentTime()
	au.mutation.SetAppointmentTime(i)
	return au
}

// SetNillableAppointmentTime sets the "appointment_time" field if the given value is not nil.
func (au *AppointmentUpdate) SetNillableAppointmentTime(i *int64) *AppointmentUpdate {
	if i != nil {
		au.SetAppointmentTime(*i)
	}
	return au
}

// AddAppointmentTime adds i to the "appointment_time" field.
func (au *AppointmentUpdate) AddAppointmentTime(i int64) *AppointmentUpdate {
	au.mutation.AddAppointmentTime(i)
	return au
}

// ClearAppointmentTime clears the value of the "appointment_time" field.
func (au *AppointmentUpdate) ClearAppointmentTime() *AppointmentUpdate {
	au.mutation.ClearAppointmentTime()
	return au
}

// SetSymptoms sets the "symptoms" field.
func (au *AppointmentUpdate) SetSymptoms(s string) *AppointmentUpdate {
	au.mutation.SetSymptoms(s)
	return au
}

// SetNillableSymptoms sets the "symptoms" field if the given value is not nil.
func (au *AppointmentUpdate) SetNillableSymptoms(s *string) *AppointmentUpdate {
	if s != nil {
		au.SetSymptoms(*s)
	}
	return au
}

// ClearSymptoms clears the value of the "symptoms" field.
func (au *AppointmentUpdate) ClearSymptoms() *AppointmentUpdate {
	au.mutation.ClearSymptoms()
	return au
}

// SetStatus sets the "status" field.
func (au *AppointmentUpdate) SetStatus(i int32) *AppointmentUpdate {
	au.mutation.ResetStatus()
	au.mutation.SetStatus(i)
	return au
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (au *AppointmentUpdate) SetNillableStatus(i *int32) *AppointmentUpdate {
	if i != nil {
		au.SetStatus(*i)
	}
	return au
}

// AddStatus adds i to the "status" field.
func (au *AppointmentUpdate) AddStatus(i int32) *AppointmentUpdate {
	au.mutation.AddStatus(i)
	return au
}

// ClearStatus clears the value of the "status" field.
func (au *AppointmentUpdate) ClearStatus() *AppointmentUpdate {
	au.mutation.ClearStatus()
	return au
}

// SetRemarks sets the "remarks" field.
func (au *AppointmentUpdate) SetRemarks(s string) *AppointmentUpdate {
	au.mutation.SetRemarks(s)
	return au
}

// SetNillableRemarks sets the "remarks" field if the given value is not nil.
func (au *AppointmentUpdate) SetNillableRemarks(s *string) *AppointmentUpdate {
	if s != nil {
		au.SetRemarks(*s)
	}
	return au
}

// ClearRemarks clears the value of the "remarks" field.
func (au *AppointmentUpdate) ClearRemarks() *AppointmentUpdate {
	au.mutation.ClearRemarks()
	return au
}

// SetUserID sets the "user_id" field.
func (au *AppointmentUpdate) SetUserID(s string) *AppointmentUpdate {
	au.mutation.SetUserID(s)
	return au
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (au *AppointmentUpdate) SetNillableUserID(s *string) *AppointmentUpdate {
	if s != nil {
		au.SetUserID(*s)
	}
	return au
}

// ClearUserID clears the value of the "user_id" field.
func (au *AppointmentUpdate) ClearUserID() *AppointmentUpdate {
	au.mutation.ClearUserID()
	return au
}

// Mutation returns the AppointmentMutation object of the builder.
func (au *AppointmentUpdate) Mutation() *AppointmentMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AppointmentUpdate) Save(ctx context.Context) (int, error) {
	au.defaults()
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AppointmentUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AppointmentUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AppointmentUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AppointmentUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		v := appointment.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

func (au *AppointmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(appointment.Table, appointment.Columns, sqlgraph.NewFieldSpec(appointment.FieldID, field.TypeUUID))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(appointment.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.PatientName(); ok {
		_spec.SetField(appointment.FieldPatientName, field.TypeString, value)
	}
	if au.mutation.PatientNameCleared() {
		_spec.ClearField(appointment.FieldPatientName, field.TypeString)
	}
	if value, ok := au.mutation.PhoneNumber(); ok {
		_spec.SetField(appointment.FieldPhoneNumber, field.TypeString, value)
	}
	if au.mutation.PhoneNumberCleared() {
		_spec.ClearField(appointment.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := au.mutation.IDCard(); ok {
		_spec.SetField(appointment.FieldIDCard, field.TypeString, value)
	}
	if au.mutation.IDCardCleared() {
		_spec.ClearField(appointment.FieldIDCard, field.TypeString)
	}
	if value, ok := au.mutation.Gender(); ok {
		_spec.SetField(appointment.FieldGender, field.TypeInt32, value)
	}
	if value, ok := au.mutation.AddedGender(); ok {
		_spec.AddField(appointment.FieldGender, field.TypeInt32, value)
	}
	if au.mutation.GenderCleared() {
		_spec.ClearField(appointment.FieldGender, field.TypeInt32)
	}
	if value, ok := au.mutation.Age(); ok {
		_spec.SetField(appointment.FieldAge, field.TypeInt32, value)
	}
	if value, ok := au.mutation.AddedAge(); ok {
		_spec.AddField(appointment.FieldAge, field.TypeInt32, value)
	}
	if au.mutation.AgeCleared() {
		_spec.ClearField(appointment.FieldAge, field.TypeInt32)
	}
	if value, ok := au.mutation.AppointmentTime(); ok {
		_spec.SetField(appointment.FieldAppointmentTime, field.TypeInt64, value)
	}
	if value, ok := au.mutation.AddedAppointmentTime(); ok {
		_spec.AddField(appointment.FieldAppointmentTime, field.TypeInt64, value)
	}
	if au.mutation.AppointmentTimeCleared() {
		_spec.ClearField(appointment.FieldAppointmentTime, field.TypeInt64)
	}
	if value, ok := au.mutation.Symptoms(); ok {
		_spec.SetField(appointment.FieldSymptoms, field.TypeString, value)
	}
	if au.mutation.SymptomsCleared() {
		_spec.ClearField(appointment.FieldSymptoms, field.TypeString)
	}
	if value, ok := au.mutation.Status(); ok {
		_spec.SetField(appointment.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := au.mutation.AddedStatus(); ok {
		_spec.AddField(appointment.FieldStatus, field.TypeInt32, value)
	}
	if au.mutation.StatusCleared() {
		_spec.ClearField(appointment.FieldStatus, field.TypeInt32)
	}
	if value, ok := au.mutation.Remarks(); ok {
		_spec.SetField(appointment.FieldRemarks, field.TypeString, value)
	}
	if au.mutation.RemarksCleared() {
		_spec.ClearField(appointment.FieldRemarks, field.TypeString)
	}
	if value, ok := au.mutation.UserID(); ok {
		_spec.SetField(appointment.FieldUserID, field.TypeString, value)
	}
	if au.mutation.UserIDCleared() {
		_spec.ClearField(appointment.FieldUserID, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appointment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AppointmentUpdateOne is the builder for updating a single Appointment entity.
type AppointmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppointmentMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AppointmentUpdateOne) SetUpdatedAt(t time.Time) *AppointmentUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetPatientName sets the "patient_name" field.
func (auo *AppointmentUpdateOne) SetPatientName(s string) *AppointmentUpdateOne {
	auo.mutation.SetPatientName(s)
	return auo
}

// SetNillablePatientName sets the "patient_name" field if the given value is not nil.
func (auo *AppointmentUpdateOne) SetNillablePatientName(s *string) *AppointmentUpdateOne {
	if s != nil {
		auo.SetPatientName(*s)
	}
	return auo
}

// ClearPatientName clears the value of the "patient_name" field.
func (auo *AppointmentUpdateOne) ClearPatientName() *AppointmentUpdateOne {
	auo.mutation.ClearPatientName()
	return auo
}

// SetPhoneNumber sets the "phone_number" field.
func (auo *AppointmentUpdateOne) SetPhoneNumber(s string) *AppointmentUpdateOne {
	auo.mutation.SetPhoneNumber(s)
	return auo
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (auo *AppointmentUpdateOne) SetNillablePhoneNumber(s *string) *AppointmentUpdateOne {
	if s != nil {
		auo.SetPhoneNumber(*s)
	}
	return auo
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (auo *AppointmentUpdateOne) ClearPhoneNumber() *AppointmentUpdateOne {
	auo.mutation.ClearPhoneNumber()
	return auo
}

// SetIDCard sets the "id_card" field.
func (auo *AppointmentUpdateOne) SetIDCard(s string) *AppointmentUpdateOne {
	auo.mutation.SetIDCard(s)
	return auo
}

// SetNillableIDCard sets the "id_card" field if the given value is not nil.
func (auo *AppointmentUpdateOne) SetNillableIDCard(s *string) *AppointmentUpdateOne {
	if s != nil {
		auo.SetIDCard(*s)
	}
	return auo
}

// ClearIDCard clears the value of the "id_card" field.
func (auo *AppointmentUpdateOne) ClearIDCard() *AppointmentUpdateOne {
	auo.mutation.ClearIDCard()
	return auo
}

// SetGender sets the "gender" field.
func (auo *AppointmentUpdateOne) SetGender(i int32) *AppointmentUpdateOne {
	auo.mutation.ResetGender()
	auo.mutation.SetGender(i)
	return auo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (auo *AppointmentUpdateOne) SetNillableGender(i *int32) *AppointmentUpdateOne {
	if i != nil {
		auo.SetGender(*i)
	}
	return auo
}

// AddGender adds i to the "gender" field.
func (auo *AppointmentUpdateOne) AddGender(i int32) *AppointmentUpdateOne {
	auo.mutation.AddGender(i)
	return auo
}

// ClearGender clears the value of the "gender" field.
func (auo *AppointmentUpdateOne) ClearGender() *AppointmentUpdateOne {
	auo.mutation.ClearGender()
	return auo
}

// SetAge sets the "age" field.
func (auo *AppointmentUpdateOne) SetAge(i int32) *AppointmentUpdateOne {
	auo.mutation.ResetAge()
	auo.mutation.SetAge(i)
	return auo
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (auo *AppointmentUpdateOne) SetNillableAge(i *int32) *AppointmentUpdateOne {
	if i != nil {
		auo.SetAge(*i)
	}
	return auo
}

// AddAge adds i to the "age" field.
func (auo *AppointmentUpdateOne) AddAge(i int32) *AppointmentUpdateOne {
	auo.mutation.AddAge(i)
	return auo
}

// ClearAge clears the value of the "age" field.
func (auo *AppointmentUpdateOne) ClearAge() *AppointmentUpdateOne {
	auo.mutation.ClearAge()
	return auo
}

// SetAppointmentTime sets the "appointment_time" field.
func (auo *AppointmentUpdateOne) SetAppointmentTime(i int64) *AppointmentUpdateOne {
	auo.mutation.ResetAppointmentTime()
	auo.mutation.SetAppointmentTime(i)
	return auo
}

// SetNillableAppointmentTime sets the "appointment_time" field if the given value is not nil.
func (auo *AppointmentUpdateOne) SetNillableAppointmentTime(i *int64) *AppointmentUpdateOne {
	if i != nil {
		auo.SetAppointmentTime(*i)
	}
	return auo
}

// AddAppointmentTime adds i to the "appointment_time" field.
func (auo *AppointmentUpdateOne) AddAppointmentTime(i int64) *AppointmentUpdateOne {
	auo.mutation.AddAppointmentTime(i)
	return auo
}

// ClearAppointmentTime clears the value of the "appointment_time" field.
func (auo *AppointmentUpdateOne) ClearAppointmentTime() *AppointmentUpdateOne {
	auo.mutation.ClearAppointmentTime()
	return auo
}

// SetSymptoms sets the "symptoms" field.
func (auo *AppointmentUpdateOne) SetSymptoms(s string) *AppointmentUpdateOne {
	auo.mutation.SetSymptoms(s)
	return auo
}

// SetNillableSymptoms sets the "symptoms" field if the given value is not nil.
func (auo *AppointmentUpdateOne) SetNillableSymptoms(s *string) *AppointmentUpdateOne {
	if s != nil {
		auo.SetSymptoms(*s)
	}
	return auo
}

// ClearSymptoms clears the value of the "symptoms" field.
func (auo *AppointmentUpdateOne) ClearSymptoms() *AppointmentUpdateOne {
	auo.mutation.ClearSymptoms()
	return auo
}

// SetStatus sets the "status" field.
func (auo *AppointmentUpdateOne) SetStatus(i int32) *AppointmentUpdateOne {
	auo.mutation.ResetStatus()
	auo.mutation.SetStatus(i)
	return auo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (auo *AppointmentUpdateOne) SetNillableStatus(i *int32) *AppointmentUpdateOne {
	if i != nil {
		auo.SetStatus(*i)
	}
	return auo
}

// AddStatus adds i to the "status" field.
func (auo *AppointmentUpdateOne) AddStatus(i int32) *AppointmentUpdateOne {
	auo.mutation.AddStatus(i)
	return auo
}

// ClearStatus clears the value of the "status" field.
func (auo *AppointmentUpdateOne) ClearStatus() *AppointmentUpdateOne {
	auo.mutation.ClearStatus()
	return auo
}

// SetRemarks sets the "remarks" field.
func (auo *AppointmentUpdateOne) SetRemarks(s string) *AppointmentUpdateOne {
	auo.mutation.SetRemarks(s)
	return auo
}

// SetNillableRemarks sets the "remarks" field if the given value is not nil.
func (auo *AppointmentUpdateOne) SetNillableRemarks(s *string) *AppointmentUpdateOne {
	if s != nil {
		auo.SetRemarks(*s)
	}
	return auo
}

// ClearRemarks clears the value of the "remarks" field.
func (auo *AppointmentUpdateOne) ClearRemarks() *AppointmentUpdateOne {
	auo.mutation.ClearRemarks()
	return auo
}

// SetUserID sets the "user_id" field.
func (auo *AppointmentUpdateOne) SetUserID(s string) *AppointmentUpdateOne {
	auo.mutation.SetUserID(s)
	return auo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (auo *AppointmentUpdateOne) SetNillableUserID(s *string) *AppointmentUpdateOne {
	if s != nil {
		auo.SetUserID(*s)
	}
	return auo
}

// ClearUserID clears the value of the "user_id" field.
func (auo *AppointmentUpdateOne) ClearUserID() *AppointmentUpdateOne {
	auo.mutation.ClearUserID()
	return auo
}

// Mutation returns the AppointmentMutation object of the builder.
func (auo *AppointmentUpdateOne) Mutation() *AppointmentMutation {
	return auo.mutation
}

// Where appends a list predicates to the AppointmentUpdate builder.
func (auo *AppointmentUpdateOne) Where(ps ...predicate.Appointment) *AppointmentUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AppointmentUpdateOne) Select(field string, fields ...string) *AppointmentUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Appointment entity.
func (auo *AppointmentUpdateOne) Save(ctx context.Context) (*Appointment, error) {
	auo.defaults()
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AppointmentUpdateOne) SaveX(ctx context.Context) *Appointment {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AppointmentUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AppointmentUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AppointmentUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		v := appointment.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

func (auo *AppointmentUpdateOne) sqlSave(ctx context.Context) (_node *Appointment, err error) {
	_spec := sqlgraph.NewUpdateSpec(appointment.Table, appointment.Columns, sqlgraph.NewFieldSpec(appointment.FieldID, field.TypeUUID))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Appointment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appointment.FieldID)
		for _, f := range fields {
			if !appointment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appointment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(appointment.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.PatientName(); ok {
		_spec.SetField(appointment.FieldPatientName, field.TypeString, value)
	}
	if auo.mutation.PatientNameCleared() {
		_spec.ClearField(appointment.FieldPatientName, field.TypeString)
	}
	if value, ok := auo.mutation.PhoneNumber(); ok {
		_spec.SetField(appointment.FieldPhoneNumber, field.TypeString, value)
	}
	if auo.mutation.PhoneNumberCleared() {
		_spec.ClearField(appointment.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := auo.mutation.IDCard(); ok {
		_spec.SetField(appointment.FieldIDCard, field.TypeString, value)
	}
	if auo.mutation.IDCardCleared() {
		_spec.ClearField(appointment.FieldIDCard, field.TypeString)
	}
	if value, ok := auo.mutation.Gender(); ok {
		_spec.SetField(appointment.FieldGender, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.AddedGender(); ok {
		_spec.AddField(appointment.FieldGender, field.TypeInt32, value)
	}
	if auo.mutation.GenderCleared() {
		_spec.ClearField(appointment.FieldGender, field.TypeInt32)
	}
	if value, ok := auo.mutation.Age(); ok {
		_spec.SetField(appointment.FieldAge, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.AddedAge(); ok {
		_spec.AddField(appointment.FieldAge, field.TypeInt32, value)
	}
	if auo.mutation.AgeCleared() {
		_spec.ClearField(appointment.FieldAge, field.TypeInt32)
	}
	if value, ok := auo.mutation.AppointmentTime(); ok {
		_spec.SetField(appointment.FieldAppointmentTime, field.TypeInt64, value)
	}
	if value, ok := auo.mutation.AddedAppointmentTime(); ok {
		_spec.AddField(appointment.FieldAppointmentTime, field.TypeInt64, value)
	}
	if auo.mutation.AppointmentTimeCleared() {
		_spec.ClearField(appointment.FieldAppointmentTime, field.TypeInt64)
	}
	if value, ok := auo.mutation.Symptoms(); ok {
		_spec.SetField(appointment.FieldSymptoms, field.TypeString, value)
	}
	if auo.mutation.SymptomsCleared() {
		_spec.ClearField(appointment.FieldSymptoms, field.TypeString)
	}
	if value, ok := auo.mutation.Status(); ok {
		_spec.SetField(appointment.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.AddedStatus(); ok {
		_spec.AddField(appointment.FieldStatus, field.TypeInt32, value)
	}
	if auo.mutation.StatusCleared() {
		_spec.ClearField(appointment.FieldStatus, field.TypeInt32)
	}
	if value, ok := auo.mutation.Remarks(); ok {
		_spec.SetField(appointment.FieldRemarks, field.TypeString, value)
	}
	if auo.mutation.RemarksCleared() {
		_spec.ClearField(appointment.FieldRemarks, field.TypeString)
	}
	if value, ok := auo.mutation.UserID(); ok {
		_spec.SetField(appointment.FieldUserID, field.TypeString, value)
	}
	if auo.mutation.UserIDCleared() {
		_spec.ClearField(appointment.FieldUserID, field.TypeString)
	}
	_node = &Appointment{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appointment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
