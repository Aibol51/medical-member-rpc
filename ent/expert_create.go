// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/suyuan32/simple-admin-member-rpc/ent/expert"
)

// ExpertCreate is the builder for creating a Expert entity.
type ExpertCreate struct {
	config
	mutation *ExpertMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ec *ExpertCreate) SetCreatedAt(t time.Time) *ExpertCreate {
	ec.mutation.SetCreatedAt(t)
	return ec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ec *ExpertCreate) SetNillableCreatedAt(t *time.Time) *ExpertCreate {
	if t != nil {
		ec.SetCreatedAt(*t)
	}
	return ec
}

// SetUpdatedAt sets the "updated_at" field.
func (ec *ExpertCreate) SetUpdatedAt(t time.Time) *ExpertCreate {
	ec.mutation.SetUpdatedAt(t)
	return ec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ec *ExpertCreate) SetNillableUpdatedAt(t *time.Time) *ExpertCreate {
	if t != nil {
		ec.SetUpdatedAt(*t)
	}
	return ec
}

// SetStatus sets the "status" field.
func (ec *ExpertCreate) SetStatus(u uint8) *ExpertCreate {
	ec.mutation.SetStatus(u)
	return ec
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ec *ExpertCreate) SetNillableStatus(u *uint8) *ExpertCreate {
	if u != nil {
		ec.SetStatus(*u)
	}
	return ec
}

// SetSort sets the "sort" field.
func (ec *ExpertCreate) SetSort(u uint32) *ExpertCreate {
	ec.mutation.SetSort(u)
	return ec
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (ec *ExpertCreate) SetNillableSort(u *uint32) *ExpertCreate {
	if u != nil {
		ec.SetSort(*u)
	}
	return ec
}

// SetNameZh sets the "name_zh" field.
func (ec *ExpertCreate) SetNameZh(s string) *ExpertCreate {
	ec.mutation.SetNameZh(s)
	return ec
}

// SetNillableNameZh sets the "name_zh" field if the given value is not nil.
func (ec *ExpertCreate) SetNillableNameZh(s *string) *ExpertCreate {
	if s != nil {
		ec.SetNameZh(*s)
	}
	return ec
}

// SetNameEn sets the "name_en" field.
func (ec *ExpertCreate) SetNameEn(s string) *ExpertCreate {
	ec.mutation.SetNameEn(s)
	return ec
}

// SetNillableNameEn sets the "name_en" field if the given value is not nil.
func (ec *ExpertCreate) SetNillableNameEn(s *string) *ExpertCreate {
	if s != nil {
		ec.SetNameEn(*s)
	}
	return ec
}

// SetNameRu sets the "name_ru" field.
func (ec *ExpertCreate) SetNameRu(s string) *ExpertCreate {
	ec.mutation.SetNameRu(s)
	return ec
}

// SetNillableNameRu sets the "name_ru" field if the given value is not nil.
func (ec *ExpertCreate) SetNillableNameRu(s *string) *ExpertCreate {
	if s != nil {
		ec.SetNameRu(*s)
	}
	return ec
}

// SetNameKk sets the "name_kk" field.
func (ec *ExpertCreate) SetNameKk(s string) *ExpertCreate {
	ec.mutation.SetNameKk(s)
	return ec
}

// SetNillableNameKk sets the "name_kk" field if the given value is not nil.
func (ec *ExpertCreate) SetNillableNameKk(s *string) *ExpertCreate {
	if s != nil {
		ec.SetNameKk(*s)
	}
	return ec
}

// SetContentZh sets the "content_zh" field.
func (ec *ExpertCreate) SetContentZh(s string) *ExpertCreate {
	ec.mutation.SetContentZh(s)
	return ec
}

// SetNillableContentZh sets the "content_zh" field if the given value is not nil.
func (ec *ExpertCreate) SetNillableContentZh(s *string) *ExpertCreate {
	if s != nil {
		ec.SetContentZh(*s)
	}
	return ec
}

// SetContentEn sets the "content_en" field.
func (ec *ExpertCreate) SetContentEn(s string) *ExpertCreate {
	ec.mutation.SetContentEn(s)
	return ec
}

// SetNillableContentEn sets the "content_en" field if the given value is not nil.
func (ec *ExpertCreate) SetNillableContentEn(s *string) *ExpertCreate {
	if s != nil {
		ec.SetContentEn(*s)
	}
	return ec
}

// SetContentRu sets the "content_ru" field.
func (ec *ExpertCreate) SetContentRu(s string) *ExpertCreate {
	ec.mutation.SetContentRu(s)
	return ec
}

// SetNillableContentRu sets the "content_ru" field if the given value is not nil.
func (ec *ExpertCreate) SetNillableContentRu(s *string) *ExpertCreate {
	if s != nil {
		ec.SetContentRu(*s)
	}
	return ec
}

// SetContentKk sets the "content_kk" field.
func (ec *ExpertCreate) SetContentKk(s string) *ExpertCreate {
	ec.mutation.SetContentKk(s)
	return ec
}

// SetNillableContentKk sets the "content_kk" field if the given value is not nil.
func (ec *ExpertCreate) SetNillableContentKk(s *string) *ExpertCreate {
	if s != nil {
		ec.SetContentKk(*s)
	}
	return ec
}

// SetCoverURL sets the "cover_url" field.
func (ec *ExpertCreate) SetCoverURL(s string) *ExpertCreate {
	ec.mutation.SetCoverURL(s)
	return ec
}

// SetNillableCoverURL sets the "cover_url" field if the given value is not nil.
func (ec *ExpertCreate) SetNillableCoverURL(s *string) *ExpertCreate {
	if s != nil {
		ec.SetCoverURL(*s)
	}
	return ec
}

// SetID sets the "id" field.
func (ec *ExpertCreate) SetID(u uint64) *ExpertCreate {
	ec.mutation.SetID(u)
	return ec
}

// Mutation returns the ExpertMutation object of the builder.
func (ec *ExpertCreate) Mutation() *ExpertMutation {
	return ec.mutation
}

// Save creates the Expert in the database.
func (ec *ExpertCreate) Save(ctx context.Context) (*Expert, error) {
	ec.defaults()
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *ExpertCreate) SaveX(ctx context.Context) *Expert {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *ExpertCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *ExpertCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *ExpertCreate) defaults() {
	if _, ok := ec.mutation.CreatedAt(); !ok {
		v := expert.DefaultCreatedAt()
		ec.mutation.SetCreatedAt(v)
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		v := expert.DefaultUpdatedAt()
		ec.mutation.SetUpdatedAt(v)
	}
	if _, ok := ec.mutation.Status(); !ok {
		v := expert.DefaultStatus
		ec.mutation.SetStatus(v)
	}
	if _, ok := ec.mutation.Sort(); !ok {
		v := expert.DefaultSort
		ec.mutation.SetSort(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *ExpertCreate) check() error {
	if _, ok := ec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Expert.created_at"`)}
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Expert.updated_at"`)}
	}
	if _, ok := ec.mutation.Sort(); !ok {
		return &ValidationError{Name: "sort", err: errors.New(`ent: missing required field "Expert.sort"`)}
	}
	return nil
}

func (ec *ExpertCreate) sqlSave(ctx context.Context) (*Expert, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *ExpertCreate) createSpec() (*Expert, *sqlgraph.CreateSpec) {
	var (
		_node = &Expert{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(expert.Table, sqlgraph.NewFieldSpec(expert.FieldID, field.TypeUint64))
	)
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ec.mutation.CreatedAt(); ok {
		_spec.SetField(expert.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ec.mutation.UpdatedAt(); ok {
		_spec.SetField(expert.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ec.mutation.Status(); ok {
		_spec.SetField(expert.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	if value, ok := ec.mutation.Sort(); ok {
		_spec.SetField(expert.FieldSort, field.TypeUint32, value)
		_node.Sort = value
	}
	if value, ok := ec.mutation.NameZh(); ok {
		_spec.SetField(expert.FieldNameZh, field.TypeString, value)
		_node.NameZh = value
	}
	if value, ok := ec.mutation.NameEn(); ok {
		_spec.SetField(expert.FieldNameEn, field.TypeString, value)
		_node.NameEn = value
	}
	if value, ok := ec.mutation.NameRu(); ok {
		_spec.SetField(expert.FieldNameRu, field.TypeString, value)
		_node.NameRu = value
	}
	if value, ok := ec.mutation.NameKk(); ok {
		_spec.SetField(expert.FieldNameKk, field.TypeString, value)
		_node.NameKk = value
	}
	if value, ok := ec.mutation.ContentZh(); ok {
		_spec.SetField(expert.FieldContentZh, field.TypeString, value)
		_node.ContentZh = value
	}
	if value, ok := ec.mutation.ContentEn(); ok {
		_spec.SetField(expert.FieldContentEn, field.TypeString, value)
		_node.ContentEn = value
	}
	if value, ok := ec.mutation.ContentRu(); ok {
		_spec.SetField(expert.FieldContentRu, field.TypeString, value)
		_node.ContentRu = value
	}
	if value, ok := ec.mutation.ContentKk(); ok {
		_spec.SetField(expert.FieldContentKk, field.TypeString, value)
		_node.ContentKk = value
	}
	if value, ok := ec.mutation.CoverURL(); ok {
		_spec.SetField(expert.FieldCoverURL, field.TypeString, value)
		_node.CoverURL = value
	}
	return _node, _spec
}

// ExpertCreateBulk is the builder for creating many Expert entities in bulk.
type ExpertCreateBulk struct {
	config
	err      error
	builders []*ExpertCreate
}

// Save creates the Expert entities in the database.
func (ecb *ExpertCreateBulk) Save(ctx context.Context) ([]*Expert, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Expert, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExpertMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *ExpertCreateBulk) SaveX(ctx context.Context) []*Expert {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *ExpertCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *ExpertCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
