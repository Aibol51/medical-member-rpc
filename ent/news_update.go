// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/suyuan32/simple-admin-member-rpc/ent/news"
	"github.com/suyuan32/simple-admin-member-rpc/ent/predicate"
)

// NewsUpdate is the builder for updating News entities.
type NewsUpdate struct {
	config
	hooks    []Hook
	mutation *NewsMutation
}

// Where appends a list predicates to the NewsUpdate builder.
func (nu *NewsUpdate) Where(ps ...predicate.News) *NewsUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetUpdatedAt sets the "updated_at" field.
func (nu *NewsUpdate) SetUpdatedAt(t time.Time) *NewsUpdate {
	nu.mutation.SetUpdatedAt(t)
	return nu
}

// SetStatus sets the "status" field.
func (nu *NewsUpdate) SetStatus(u uint8) *NewsUpdate {
	nu.mutation.ResetStatus()
	nu.mutation.SetStatus(u)
	return nu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (nu *NewsUpdate) SetNillableStatus(u *uint8) *NewsUpdate {
	if u != nil {
		nu.SetStatus(*u)
	}
	return nu
}

// AddStatus adds u to the "status" field.
func (nu *NewsUpdate) AddStatus(u int8) *NewsUpdate {
	nu.mutation.AddStatus(u)
	return nu
}

// ClearStatus clears the value of the "status" field.
func (nu *NewsUpdate) ClearStatus() *NewsUpdate {
	nu.mutation.ClearStatus()
	return nu
}

// SetSort sets the "sort" field.
func (nu *NewsUpdate) SetSort(u uint32) *NewsUpdate {
	nu.mutation.ResetSort()
	nu.mutation.SetSort(u)
	return nu
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (nu *NewsUpdate) SetNillableSort(u *uint32) *NewsUpdate {
	if u != nil {
		nu.SetSort(*u)
	}
	return nu
}

// AddSort adds u to the "sort" field.
func (nu *NewsUpdate) AddSort(u int32) *NewsUpdate {
	nu.mutation.AddSort(u)
	return nu
}

// SetTitleZh sets the "title_zh" field.
func (nu *NewsUpdate) SetTitleZh(s string) *NewsUpdate {
	nu.mutation.SetTitleZh(s)
	return nu
}

// SetNillableTitleZh sets the "title_zh" field if the given value is not nil.
func (nu *NewsUpdate) SetNillableTitleZh(s *string) *NewsUpdate {
	if s != nil {
		nu.SetTitleZh(*s)
	}
	return nu
}

// ClearTitleZh clears the value of the "title_zh" field.
func (nu *NewsUpdate) ClearTitleZh() *NewsUpdate {
	nu.mutation.ClearTitleZh()
	return nu
}

// SetTitleEn sets the "title_en" field.
func (nu *NewsUpdate) SetTitleEn(s string) *NewsUpdate {
	nu.mutation.SetTitleEn(s)
	return nu
}

// SetNillableTitleEn sets the "title_en" field if the given value is not nil.
func (nu *NewsUpdate) SetNillableTitleEn(s *string) *NewsUpdate {
	if s != nil {
		nu.SetTitleEn(*s)
	}
	return nu
}

// ClearTitleEn clears the value of the "title_en" field.
func (nu *NewsUpdate) ClearTitleEn() *NewsUpdate {
	nu.mutation.ClearTitleEn()
	return nu
}

// SetTitleRu sets the "title_ru" field.
func (nu *NewsUpdate) SetTitleRu(s string) *NewsUpdate {
	nu.mutation.SetTitleRu(s)
	return nu
}

// SetNillableTitleRu sets the "title_ru" field if the given value is not nil.
func (nu *NewsUpdate) SetNillableTitleRu(s *string) *NewsUpdate {
	if s != nil {
		nu.SetTitleRu(*s)
	}
	return nu
}

// ClearTitleRu clears the value of the "title_ru" field.
func (nu *NewsUpdate) ClearTitleRu() *NewsUpdate {
	nu.mutation.ClearTitleRu()
	return nu
}

// SetTitleKk sets the "title_kk" field.
func (nu *NewsUpdate) SetTitleKk(s string) *NewsUpdate {
	nu.mutation.SetTitleKk(s)
	return nu
}

// SetNillableTitleKk sets the "title_kk" field if the given value is not nil.
func (nu *NewsUpdate) SetNillableTitleKk(s *string) *NewsUpdate {
	if s != nil {
		nu.SetTitleKk(*s)
	}
	return nu
}

// ClearTitleKk clears the value of the "title_kk" field.
func (nu *NewsUpdate) ClearTitleKk() *NewsUpdate {
	nu.mutation.ClearTitleKk()
	return nu
}

// SetContentZh sets the "content_zh" field.
func (nu *NewsUpdate) SetContentZh(s string) *NewsUpdate {
	nu.mutation.SetContentZh(s)
	return nu
}

// SetNillableContentZh sets the "content_zh" field if the given value is not nil.
func (nu *NewsUpdate) SetNillableContentZh(s *string) *NewsUpdate {
	if s != nil {
		nu.SetContentZh(*s)
	}
	return nu
}

// ClearContentZh clears the value of the "content_zh" field.
func (nu *NewsUpdate) ClearContentZh() *NewsUpdate {
	nu.mutation.ClearContentZh()
	return nu
}

// SetContentEn sets the "content_en" field.
func (nu *NewsUpdate) SetContentEn(s string) *NewsUpdate {
	nu.mutation.SetContentEn(s)
	return nu
}

// SetNillableContentEn sets the "content_en" field if the given value is not nil.
func (nu *NewsUpdate) SetNillableContentEn(s *string) *NewsUpdate {
	if s != nil {
		nu.SetContentEn(*s)
	}
	return nu
}

// ClearContentEn clears the value of the "content_en" field.
func (nu *NewsUpdate) ClearContentEn() *NewsUpdate {
	nu.mutation.ClearContentEn()
	return nu
}

// SetContentRu sets the "content_ru" field.
func (nu *NewsUpdate) SetContentRu(s string) *NewsUpdate {
	nu.mutation.SetContentRu(s)
	return nu
}

// SetNillableContentRu sets the "content_ru" field if the given value is not nil.
func (nu *NewsUpdate) SetNillableContentRu(s *string) *NewsUpdate {
	if s != nil {
		nu.SetContentRu(*s)
	}
	return nu
}

// ClearContentRu clears the value of the "content_ru" field.
func (nu *NewsUpdate) ClearContentRu() *NewsUpdate {
	nu.mutation.ClearContentRu()
	return nu
}

// SetContentKk sets the "content_kk" field.
func (nu *NewsUpdate) SetContentKk(s string) *NewsUpdate {
	nu.mutation.SetContentKk(s)
	return nu
}

// SetNillableContentKk sets the "content_kk" field if the given value is not nil.
func (nu *NewsUpdate) SetNillableContentKk(s *string) *NewsUpdate {
	if s != nil {
		nu.SetContentKk(*s)
	}
	return nu
}

// ClearContentKk clears the value of the "content_kk" field.
func (nu *NewsUpdate) ClearContentKk() *NewsUpdate {
	nu.mutation.ClearContentKk()
	return nu
}

// SetCoverURL sets the "cover_url" field.
func (nu *NewsUpdate) SetCoverURL(s string) *NewsUpdate {
	nu.mutation.SetCoverURL(s)
	return nu
}

// SetNillableCoverURL sets the "cover_url" field if the given value is not nil.
func (nu *NewsUpdate) SetNillableCoverURL(s *string) *NewsUpdate {
	if s != nil {
		nu.SetCoverURL(*s)
	}
	return nu
}

// ClearCoverURL clears the value of the "cover_url" field.
func (nu *NewsUpdate) ClearCoverURL() *NewsUpdate {
	nu.mutation.ClearCoverURL()
	return nu
}

// Mutation returns the NewsMutation object of the builder.
func (nu *NewsUpdate) Mutation() *NewsMutation {
	return nu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NewsUpdate) Save(ctx context.Context) (int, error) {
	nu.defaults()
	return withHooks(ctx, nu.sqlSave, nu.mutation, nu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NewsUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NewsUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NewsUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nu *NewsUpdate) defaults() {
	if _, ok := nu.mutation.UpdatedAt(); !ok {
		v := news.UpdateDefaultUpdatedAt()
		nu.mutation.SetUpdatedAt(v)
	}
}

func (nu *NewsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(news.Table, news.Columns, sqlgraph.NewFieldSpec(news.FieldID, field.TypeUint64))
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.UpdatedAt(); ok {
		_spec.SetField(news.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := nu.mutation.Status(); ok {
		_spec.SetField(news.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := nu.mutation.AddedStatus(); ok {
		_spec.AddField(news.FieldStatus, field.TypeUint8, value)
	}
	if nu.mutation.StatusCleared() {
		_spec.ClearField(news.FieldStatus, field.TypeUint8)
	}
	if value, ok := nu.mutation.Sort(); ok {
		_spec.SetField(news.FieldSort, field.TypeUint32, value)
	}
	if value, ok := nu.mutation.AddedSort(); ok {
		_spec.AddField(news.FieldSort, field.TypeUint32, value)
	}
	if value, ok := nu.mutation.TitleZh(); ok {
		_spec.SetField(news.FieldTitleZh, field.TypeString, value)
	}
	if nu.mutation.TitleZhCleared() {
		_spec.ClearField(news.FieldTitleZh, field.TypeString)
	}
	if value, ok := nu.mutation.TitleEn(); ok {
		_spec.SetField(news.FieldTitleEn, field.TypeString, value)
	}
	if nu.mutation.TitleEnCleared() {
		_spec.ClearField(news.FieldTitleEn, field.TypeString)
	}
	if value, ok := nu.mutation.TitleRu(); ok {
		_spec.SetField(news.FieldTitleRu, field.TypeString, value)
	}
	if nu.mutation.TitleRuCleared() {
		_spec.ClearField(news.FieldTitleRu, field.TypeString)
	}
	if value, ok := nu.mutation.TitleKk(); ok {
		_spec.SetField(news.FieldTitleKk, field.TypeString, value)
	}
	if nu.mutation.TitleKkCleared() {
		_spec.ClearField(news.FieldTitleKk, field.TypeString)
	}
	if value, ok := nu.mutation.ContentZh(); ok {
		_spec.SetField(news.FieldContentZh, field.TypeString, value)
	}
	if nu.mutation.ContentZhCleared() {
		_spec.ClearField(news.FieldContentZh, field.TypeString)
	}
	if value, ok := nu.mutation.ContentEn(); ok {
		_spec.SetField(news.FieldContentEn, field.TypeString, value)
	}
	if nu.mutation.ContentEnCleared() {
		_spec.ClearField(news.FieldContentEn, field.TypeString)
	}
	if value, ok := nu.mutation.ContentRu(); ok {
		_spec.SetField(news.FieldContentRu, field.TypeString, value)
	}
	if nu.mutation.ContentRuCleared() {
		_spec.ClearField(news.FieldContentRu, field.TypeString)
	}
	if value, ok := nu.mutation.ContentKk(); ok {
		_spec.SetField(news.FieldContentKk, field.TypeString, value)
	}
	if nu.mutation.ContentKkCleared() {
		_spec.ClearField(news.FieldContentKk, field.TypeString)
	}
	if value, ok := nu.mutation.CoverURL(); ok {
		_spec.SetField(news.FieldCoverURL, field.TypeString, value)
	}
	if nu.mutation.CoverURLCleared() {
		_spec.ClearField(news.FieldCoverURL, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{news.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nu.mutation.done = true
	return n, nil
}

// NewsUpdateOne is the builder for updating a single News entity.
type NewsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NewsMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (nuo *NewsUpdateOne) SetUpdatedAt(t time.Time) *NewsUpdateOne {
	nuo.mutation.SetUpdatedAt(t)
	return nuo
}

// SetStatus sets the "status" field.
func (nuo *NewsUpdateOne) SetStatus(u uint8) *NewsUpdateOne {
	nuo.mutation.ResetStatus()
	nuo.mutation.SetStatus(u)
	return nuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (nuo *NewsUpdateOne) SetNillableStatus(u *uint8) *NewsUpdateOne {
	if u != nil {
		nuo.SetStatus(*u)
	}
	return nuo
}

// AddStatus adds u to the "status" field.
func (nuo *NewsUpdateOne) AddStatus(u int8) *NewsUpdateOne {
	nuo.mutation.AddStatus(u)
	return nuo
}

// ClearStatus clears the value of the "status" field.
func (nuo *NewsUpdateOne) ClearStatus() *NewsUpdateOne {
	nuo.mutation.ClearStatus()
	return nuo
}

// SetSort sets the "sort" field.
func (nuo *NewsUpdateOne) SetSort(u uint32) *NewsUpdateOne {
	nuo.mutation.ResetSort()
	nuo.mutation.SetSort(u)
	return nuo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (nuo *NewsUpdateOne) SetNillableSort(u *uint32) *NewsUpdateOne {
	if u != nil {
		nuo.SetSort(*u)
	}
	return nuo
}

// AddSort adds u to the "sort" field.
func (nuo *NewsUpdateOne) AddSort(u int32) *NewsUpdateOne {
	nuo.mutation.AddSort(u)
	return nuo
}

// SetTitleZh sets the "title_zh" field.
func (nuo *NewsUpdateOne) SetTitleZh(s string) *NewsUpdateOne {
	nuo.mutation.SetTitleZh(s)
	return nuo
}

// SetNillableTitleZh sets the "title_zh" field if the given value is not nil.
func (nuo *NewsUpdateOne) SetNillableTitleZh(s *string) *NewsUpdateOne {
	if s != nil {
		nuo.SetTitleZh(*s)
	}
	return nuo
}

// ClearTitleZh clears the value of the "title_zh" field.
func (nuo *NewsUpdateOne) ClearTitleZh() *NewsUpdateOne {
	nuo.mutation.ClearTitleZh()
	return nuo
}

// SetTitleEn sets the "title_en" field.
func (nuo *NewsUpdateOne) SetTitleEn(s string) *NewsUpdateOne {
	nuo.mutation.SetTitleEn(s)
	return nuo
}

// SetNillableTitleEn sets the "title_en" field if the given value is not nil.
func (nuo *NewsUpdateOne) SetNillableTitleEn(s *string) *NewsUpdateOne {
	if s != nil {
		nuo.SetTitleEn(*s)
	}
	return nuo
}

// ClearTitleEn clears the value of the "title_en" field.
func (nuo *NewsUpdateOne) ClearTitleEn() *NewsUpdateOne {
	nuo.mutation.ClearTitleEn()
	return nuo
}

// SetTitleRu sets the "title_ru" field.
func (nuo *NewsUpdateOne) SetTitleRu(s string) *NewsUpdateOne {
	nuo.mutation.SetTitleRu(s)
	return nuo
}

// SetNillableTitleRu sets the "title_ru" field if the given value is not nil.
func (nuo *NewsUpdateOne) SetNillableTitleRu(s *string) *NewsUpdateOne {
	if s != nil {
		nuo.SetTitleRu(*s)
	}
	return nuo
}

// ClearTitleRu clears the value of the "title_ru" field.
func (nuo *NewsUpdateOne) ClearTitleRu() *NewsUpdateOne {
	nuo.mutation.ClearTitleRu()
	return nuo
}

// SetTitleKk sets the "title_kk" field.
func (nuo *NewsUpdateOne) SetTitleKk(s string) *NewsUpdateOne {
	nuo.mutation.SetTitleKk(s)
	return nuo
}

// SetNillableTitleKk sets the "title_kk" field if the given value is not nil.
func (nuo *NewsUpdateOne) SetNillableTitleKk(s *string) *NewsUpdateOne {
	if s != nil {
		nuo.SetTitleKk(*s)
	}
	return nuo
}

// ClearTitleKk clears the value of the "title_kk" field.
func (nuo *NewsUpdateOne) ClearTitleKk() *NewsUpdateOne {
	nuo.mutation.ClearTitleKk()
	return nuo
}

// SetContentZh sets the "content_zh" field.
func (nuo *NewsUpdateOne) SetContentZh(s string) *NewsUpdateOne {
	nuo.mutation.SetContentZh(s)
	return nuo
}

// SetNillableContentZh sets the "content_zh" field if the given value is not nil.
func (nuo *NewsUpdateOne) SetNillableContentZh(s *string) *NewsUpdateOne {
	if s != nil {
		nuo.SetContentZh(*s)
	}
	return nuo
}

// ClearContentZh clears the value of the "content_zh" field.
func (nuo *NewsUpdateOne) ClearContentZh() *NewsUpdateOne {
	nuo.mutation.ClearContentZh()
	return nuo
}

// SetContentEn sets the "content_en" field.
func (nuo *NewsUpdateOne) SetContentEn(s string) *NewsUpdateOne {
	nuo.mutation.SetContentEn(s)
	return nuo
}

// SetNillableContentEn sets the "content_en" field if the given value is not nil.
func (nuo *NewsUpdateOne) SetNillableContentEn(s *string) *NewsUpdateOne {
	if s != nil {
		nuo.SetContentEn(*s)
	}
	return nuo
}

// ClearContentEn clears the value of the "content_en" field.
func (nuo *NewsUpdateOne) ClearContentEn() *NewsUpdateOne {
	nuo.mutation.ClearContentEn()
	return nuo
}

// SetContentRu sets the "content_ru" field.
func (nuo *NewsUpdateOne) SetContentRu(s string) *NewsUpdateOne {
	nuo.mutation.SetContentRu(s)
	return nuo
}

// SetNillableContentRu sets the "content_ru" field if the given value is not nil.
func (nuo *NewsUpdateOne) SetNillableContentRu(s *string) *NewsUpdateOne {
	if s != nil {
		nuo.SetContentRu(*s)
	}
	return nuo
}

// ClearContentRu clears the value of the "content_ru" field.
func (nuo *NewsUpdateOne) ClearContentRu() *NewsUpdateOne {
	nuo.mutation.ClearContentRu()
	return nuo
}

// SetContentKk sets the "content_kk" field.
func (nuo *NewsUpdateOne) SetContentKk(s string) *NewsUpdateOne {
	nuo.mutation.SetContentKk(s)
	return nuo
}

// SetNillableContentKk sets the "content_kk" field if the given value is not nil.
func (nuo *NewsUpdateOne) SetNillableContentKk(s *string) *NewsUpdateOne {
	if s != nil {
		nuo.SetContentKk(*s)
	}
	return nuo
}

// ClearContentKk clears the value of the "content_kk" field.
func (nuo *NewsUpdateOne) ClearContentKk() *NewsUpdateOne {
	nuo.mutation.ClearContentKk()
	return nuo
}

// SetCoverURL sets the "cover_url" field.
func (nuo *NewsUpdateOne) SetCoverURL(s string) *NewsUpdateOne {
	nuo.mutation.SetCoverURL(s)
	return nuo
}

// SetNillableCoverURL sets the "cover_url" field if the given value is not nil.
func (nuo *NewsUpdateOne) SetNillableCoverURL(s *string) *NewsUpdateOne {
	if s != nil {
		nuo.SetCoverURL(*s)
	}
	return nuo
}

// ClearCoverURL clears the value of the "cover_url" field.
func (nuo *NewsUpdateOne) ClearCoverURL() *NewsUpdateOne {
	nuo.mutation.ClearCoverURL()
	return nuo
}

// Mutation returns the NewsMutation object of the builder.
func (nuo *NewsUpdateOne) Mutation() *NewsMutation {
	return nuo.mutation
}

// Where appends a list predicates to the NewsUpdate builder.
func (nuo *NewsUpdateOne) Where(ps ...predicate.News) *NewsUpdateOne {
	nuo.mutation.Where(ps...)
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NewsUpdateOne) Select(field string, fields ...string) *NewsUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated News entity.
func (nuo *NewsUpdateOne) Save(ctx context.Context) (*News, error) {
	nuo.defaults()
	return withHooks(ctx, nuo.sqlSave, nuo.mutation, nuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NewsUpdateOne) SaveX(ctx context.Context) *News {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NewsUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NewsUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nuo *NewsUpdateOne) defaults() {
	if _, ok := nuo.mutation.UpdatedAt(); !ok {
		v := news.UpdateDefaultUpdatedAt()
		nuo.mutation.SetUpdatedAt(v)
	}
}

func (nuo *NewsUpdateOne) sqlSave(ctx context.Context) (_node *News, err error) {
	_spec := sqlgraph.NewUpdateSpec(news.Table, news.Columns, sqlgraph.NewFieldSpec(news.FieldID, field.TypeUint64))
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "News.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, news.FieldID)
		for _, f := range fields {
			if !news.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != news.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.UpdatedAt(); ok {
		_spec.SetField(news.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := nuo.mutation.Status(); ok {
		_spec.SetField(news.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := nuo.mutation.AddedStatus(); ok {
		_spec.AddField(news.FieldStatus, field.TypeUint8, value)
	}
	if nuo.mutation.StatusCleared() {
		_spec.ClearField(news.FieldStatus, field.TypeUint8)
	}
	if value, ok := nuo.mutation.Sort(); ok {
		_spec.SetField(news.FieldSort, field.TypeUint32, value)
	}
	if value, ok := nuo.mutation.AddedSort(); ok {
		_spec.AddField(news.FieldSort, field.TypeUint32, value)
	}
	if value, ok := nuo.mutation.TitleZh(); ok {
		_spec.SetField(news.FieldTitleZh, field.TypeString, value)
	}
	if nuo.mutation.TitleZhCleared() {
		_spec.ClearField(news.FieldTitleZh, field.TypeString)
	}
	if value, ok := nuo.mutation.TitleEn(); ok {
		_spec.SetField(news.FieldTitleEn, field.TypeString, value)
	}
	if nuo.mutation.TitleEnCleared() {
		_spec.ClearField(news.FieldTitleEn, field.TypeString)
	}
	if value, ok := nuo.mutation.TitleRu(); ok {
		_spec.SetField(news.FieldTitleRu, field.TypeString, value)
	}
	if nuo.mutation.TitleRuCleared() {
		_spec.ClearField(news.FieldTitleRu, field.TypeString)
	}
	if value, ok := nuo.mutation.TitleKk(); ok {
		_spec.SetField(news.FieldTitleKk, field.TypeString, value)
	}
	if nuo.mutation.TitleKkCleared() {
		_spec.ClearField(news.FieldTitleKk, field.TypeString)
	}
	if value, ok := nuo.mutation.ContentZh(); ok {
		_spec.SetField(news.FieldContentZh, field.TypeString, value)
	}
	if nuo.mutation.ContentZhCleared() {
		_spec.ClearField(news.FieldContentZh, field.TypeString)
	}
	if value, ok := nuo.mutation.ContentEn(); ok {
		_spec.SetField(news.FieldContentEn, field.TypeString, value)
	}
	if nuo.mutation.ContentEnCleared() {
		_spec.ClearField(news.FieldContentEn, field.TypeString)
	}
	if value, ok := nuo.mutation.ContentRu(); ok {
		_spec.SetField(news.FieldContentRu, field.TypeString, value)
	}
	if nuo.mutation.ContentRuCleared() {
		_spec.ClearField(news.FieldContentRu, field.TypeString)
	}
	if value, ok := nuo.mutation.ContentKk(); ok {
		_spec.SetField(news.FieldContentKk, field.TypeString, value)
	}
	if nuo.mutation.ContentKkCleared() {
		_spec.ClearField(news.FieldContentKk, field.TypeString)
	}
	if value, ok := nuo.mutation.CoverURL(); ok {
		_spec.SetField(news.FieldCoverURL, field.TypeString, value)
	}
	if nuo.mutation.CoverURLCleared() {
		_spec.ClearField(news.FieldCoverURL, field.TypeString)
	}
	_node = &News{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{news.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nuo.mutation.done = true
	return _node, nil
}
