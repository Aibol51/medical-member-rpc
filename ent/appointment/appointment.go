// Code generated by ent, DO NOT EDIT.

package appointment

import (
	"time"

	"entgo.io/ent/dialect/sql"
	uuid "github.com/gofrs/uuid/v5"
)

const (
	// Label holds the string label denoting the appointment type in the database.
	Label = "appointment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldPatientName holds the string denoting the patient_name field in the database.
	FieldPatientName = "patient_name"
	// FieldPhoneNumber holds the string denoting the phone_number field in the database.
	FieldPhoneNumber = "phone_number"
	// FieldIDCard holds the string denoting the id_card field in the database.
	FieldIDCard = "id_card"
	// FieldGender holds the string denoting the gender field in the database.
	FieldGender = "gender"
	// FieldAge holds the string denoting the age field in the database.
	FieldAge = "age"
	// FieldAppointmentTime holds the string denoting the appointment_time field in the database.
	FieldAppointmentTime = "appointment_time"
	// FieldSymptoms holds the string denoting the symptoms field in the database.
	FieldSymptoms = "symptoms"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldRemarks holds the string denoting the remarks field in the database.
	FieldRemarks = "remarks"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// Table holds the table name of the appointment in the database.
	Table = "appointments"
)

// Columns holds all SQL columns for appointment fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldPatientName,
	FieldPhoneNumber,
	FieldIDCard,
	FieldGender,
	FieldAge,
	FieldAppointmentTime,
	FieldSymptoms,
	FieldStatus,
	FieldRemarks,
	FieldUserID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int32
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Appointment queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByPatientName orders the results by the patient_name field.
func ByPatientName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPatientName, opts...).ToFunc()
}

// ByPhoneNumber orders the results by the phone_number field.
func ByPhoneNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhoneNumber, opts...).ToFunc()
}

// ByIDCard orders the results by the id_card field.
func ByIDCard(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIDCard, opts...).ToFunc()
}

// ByGender orders the results by the gender field.
func ByGender(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGender, opts...).ToFunc()
}

// ByAge orders the results by the age field.
func ByAge(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAge, opts...).ToFunc()
}

// ByAppointmentTime orders the results by the appointment_time field.
func ByAppointmentTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppointmentTime, opts...).ToFunc()
}

// BySymptoms orders the results by the symptoms field.
func BySymptoms(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSymptoms, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByRemarks orders the results by the remarks field.
func ByRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemarks, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}
