// Code generated by ent, DO NOT EDIT.

package appointment

import (
	"time"

	"entgo.io/ent/dialect/sql"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/suyuan32/simple-admin-member-rpc/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Appointment {
	return predicate.Appointment(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Appointment {
	return predicate.Appointment(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Appointment {
	return predicate.Appointment(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Appointment {
	return predicate.Appointment(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Appointment {
	return predicate.Appointment(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Appointment {
	return predicate.Appointment(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Appointment {
	return predicate.Appointment(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldUpdatedAt, v))
}

// PatientName applies equality check predicate on the "patient_name" field. It's identical to PatientNameEQ.
func PatientName(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldPatientName, v))
}

// PhoneNumber applies equality check predicate on the "phone_number" field. It's identical to PhoneNumberEQ.
func PhoneNumber(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldPhoneNumber, v))
}

// IDCard applies equality check predicate on the "id_card" field. It's identical to IDCardEQ.
func IDCard(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldIDCard, v))
}

// Gender applies equality check predicate on the "gender" field. It's identical to GenderEQ.
func Gender(v int32) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldGender, v))
}

// Age applies equality check predicate on the "age" field. It's identical to AgeEQ.
func Age(v int32) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldAge, v))
}

// AppointmentTime applies equality check predicate on the "appointment_time" field. It's identical to AppointmentTimeEQ.
func AppointmentTime(v int64) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldAppointmentTime, v))
}

// Symptoms applies equality check predicate on the "symptoms" field. It's identical to SymptomsEQ.
func Symptoms(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldSymptoms, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int32) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldStatus, v))
}

// Remarks applies equality check predicate on the "remarks" field. It's identical to RemarksEQ.
func Remarks(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldRemarks, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldUserID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldLTE(FieldUpdatedAt, v))
}

// PatientNameEQ applies the EQ predicate on the "patient_name" field.
func PatientNameEQ(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldPatientName, v))
}

// PatientNameNEQ applies the NEQ predicate on the "patient_name" field.
func PatientNameNEQ(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldNEQ(FieldPatientName, v))
}

// PatientNameIn applies the In predicate on the "patient_name" field.
func PatientNameIn(vs ...string) predicate.Appointment {
	return predicate.Appointment(sql.FieldIn(FieldPatientName, vs...))
}

// PatientNameNotIn applies the NotIn predicate on the "patient_name" field.
func PatientNameNotIn(vs ...string) predicate.Appointment {
	return predicate.Appointment(sql.FieldNotIn(FieldPatientName, vs...))
}

// PatientNameGT applies the GT predicate on the "patient_name" field.
func PatientNameGT(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldGT(FieldPatientName, v))
}

// PatientNameGTE applies the GTE predicate on the "patient_name" field.
func PatientNameGTE(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldGTE(FieldPatientName, v))
}

// PatientNameLT applies the LT predicate on the "patient_name" field.
func PatientNameLT(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldLT(FieldPatientName, v))
}

// PatientNameLTE applies the LTE predicate on the "patient_name" field.
func PatientNameLTE(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldLTE(FieldPatientName, v))
}

// PatientNameContains applies the Contains predicate on the "patient_name" field.
func PatientNameContains(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldContains(FieldPatientName, v))
}

// PatientNameHasPrefix applies the HasPrefix predicate on the "patient_name" field.
func PatientNameHasPrefix(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldHasPrefix(FieldPatientName, v))
}

// PatientNameHasSuffix applies the HasSuffix predicate on the "patient_name" field.
func PatientNameHasSuffix(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldHasSuffix(FieldPatientName, v))
}

// PatientNameIsNil applies the IsNil predicate on the "patient_name" field.
func PatientNameIsNil() predicate.Appointment {
	return predicate.Appointment(sql.FieldIsNull(FieldPatientName))
}

// PatientNameNotNil applies the NotNil predicate on the "patient_name" field.
func PatientNameNotNil() predicate.Appointment {
	return predicate.Appointment(sql.FieldNotNull(FieldPatientName))
}

// PatientNameEqualFold applies the EqualFold predicate on the "patient_name" field.
func PatientNameEqualFold(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldEqualFold(FieldPatientName, v))
}

// PatientNameContainsFold applies the ContainsFold predicate on the "patient_name" field.
func PatientNameContainsFold(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldContainsFold(FieldPatientName, v))
}

// PhoneNumberEQ applies the EQ predicate on the "phone_number" field.
func PhoneNumberEQ(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldPhoneNumber, v))
}

// PhoneNumberNEQ applies the NEQ predicate on the "phone_number" field.
func PhoneNumberNEQ(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldNEQ(FieldPhoneNumber, v))
}

// PhoneNumberIn applies the In predicate on the "phone_number" field.
func PhoneNumberIn(vs ...string) predicate.Appointment {
	return predicate.Appointment(sql.FieldIn(FieldPhoneNumber, vs...))
}

// PhoneNumberNotIn applies the NotIn predicate on the "phone_number" field.
func PhoneNumberNotIn(vs ...string) predicate.Appointment {
	return predicate.Appointment(sql.FieldNotIn(FieldPhoneNumber, vs...))
}

// PhoneNumberGT applies the GT predicate on the "phone_number" field.
func PhoneNumberGT(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldGT(FieldPhoneNumber, v))
}

// PhoneNumberGTE applies the GTE predicate on the "phone_number" field.
func PhoneNumberGTE(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldGTE(FieldPhoneNumber, v))
}

// PhoneNumberLT applies the LT predicate on the "phone_number" field.
func PhoneNumberLT(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldLT(FieldPhoneNumber, v))
}

// PhoneNumberLTE applies the LTE predicate on the "phone_number" field.
func PhoneNumberLTE(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldLTE(FieldPhoneNumber, v))
}

// PhoneNumberContains applies the Contains predicate on the "phone_number" field.
func PhoneNumberContains(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldContains(FieldPhoneNumber, v))
}

// PhoneNumberHasPrefix applies the HasPrefix predicate on the "phone_number" field.
func PhoneNumberHasPrefix(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldHasPrefix(FieldPhoneNumber, v))
}

// PhoneNumberHasSuffix applies the HasSuffix predicate on the "phone_number" field.
func PhoneNumberHasSuffix(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldHasSuffix(FieldPhoneNumber, v))
}

// PhoneNumberIsNil applies the IsNil predicate on the "phone_number" field.
func PhoneNumberIsNil() predicate.Appointment {
	return predicate.Appointment(sql.FieldIsNull(FieldPhoneNumber))
}

// PhoneNumberNotNil applies the NotNil predicate on the "phone_number" field.
func PhoneNumberNotNil() predicate.Appointment {
	return predicate.Appointment(sql.FieldNotNull(FieldPhoneNumber))
}

// PhoneNumberEqualFold applies the EqualFold predicate on the "phone_number" field.
func PhoneNumberEqualFold(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldEqualFold(FieldPhoneNumber, v))
}

// PhoneNumberContainsFold applies the ContainsFold predicate on the "phone_number" field.
func PhoneNumberContainsFold(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldContainsFold(FieldPhoneNumber, v))
}

// IDCardEQ applies the EQ predicate on the "id_card" field.
func IDCardEQ(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldIDCard, v))
}

// IDCardNEQ applies the NEQ predicate on the "id_card" field.
func IDCardNEQ(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldNEQ(FieldIDCard, v))
}

// IDCardIn applies the In predicate on the "id_card" field.
func IDCardIn(vs ...string) predicate.Appointment {
	return predicate.Appointment(sql.FieldIn(FieldIDCard, vs...))
}

// IDCardNotIn applies the NotIn predicate on the "id_card" field.
func IDCardNotIn(vs ...string) predicate.Appointment {
	return predicate.Appointment(sql.FieldNotIn(FieldIDCard, vs...))
}

// IDCardGT applies the GT predicate on the "id_card" field.
func IDCardGT(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldGT(FieldIDCard, v))
}

// IDCardGTE applies the GTE predicate on the "id_card" field.
func IDCardGTE(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldGTE(FieldIDCard, v))
}

// IDCardLT applies the LT predicate on the "id_card" field.
func IDCardLT(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldLT(FieldIDCard, v))
}

// IDCardLTE applies the LTE predicate on the "id_card" field.
func IDCardLTE(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldLTE(FieldIDCard, v))
}

// IDCardContains applies the Contains predicate on the "id_card" field.
func IDCardContains(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldContains(FieldIDCard, v))
}

// IDCardHasPrefix applies the HasPrefix predicate on the "id_card" field.
func IDCardHasPrefix(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldHasPrefix(FieldIDCard, v))
}

// IDCardHasSuffix applies the HasSuffix predicate on the "id_card" field.
func IDCardHasSuffix(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldHasSuffix(FieldIDCard, v))
}

// IDCardIsNil applies the IsNil predicate on the "id_card" field.
func IDCardIsNil() predicate.Appointment {
	return predicate.Appointment(sql.FieldIsNull(FieldIDCard))
}

// IDCardNotNil applies the NotNil predicate on the "id_card" field.
func IDCardNotNil() predicate.Appointment {
	return predicate.Appointment(sql.FieldNotNull(FieldIDCard))
}

// IDCardEqualFold applies the EqualFold predicate on the "id_card" field.
func IDCardEqualFold(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldEqualFold(FieldIDCard, v))
}

// IDCardContainsFold applies the ContainsFold predicate on the "id_card" field.
func IDCardContainsFold(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldContainsFold(FieldIDCard, v))
}

// GenderEQ applies the EQ predicate on the "gender" field.
func GenderEQ(v int32) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldGender, v))
}

// GenderNEQ applies the NEQ predicate on the "gender" field.
func GenderNEQ(v int32) predicate.Appointment {
	return predicate.Appointment(sql.FieldNEQ(FieldGender, v))
}

// GenderIn applies the In predicate on the "gender" field.
func GenderIn(vs ...int32) predicate.Appointment {
	return predicate.Appointment(sql.FieldIn(FieldGender, vs...))
}

// GenderNotIn applies the NotIn predicate on the "gender" field.
func GenderNotIn(vs ...int32) predicate.Appointment {
	return predicate.Appointment(sql.FieldNotIn(FieldGender, vs...))
}

// GenderGT applies the GT predicate on the "gender" field.
func GenderGT(v int32) predicate.Appointment {
	return predicate.Appointment(sql.FieldGT(FieldGender, v))
}

// GenderGTE applies the GTE predicate on the "gender" field.
func GenderGTE(v int32) predicate.Appointment {
	return predicate.Appointment(sql.FieldGTE(FieldGender, v))
}

// GenderLT applies the LT predicate on the "gender" field.
func GenderLT(v int32) predicate.Appointment {
	return predicate.Appointment(sql.FieldLT(FieldGender, v))
}

// GenderLTE applies the LTE predicate on the "gender" field.
func GenderLTE(v int32) predicate.Appointment {
	return predicate.Appointment(sql.FieldLTE(FieldGender, v))
}

// GenderIsNil applies the IsNil predicate on the "gender" field.
func GenderIsNil() predicate.Appointment {
	return predicate.Appointment(sql.FieldIsNull(FieldGender))
}

// GenderNotNil applies the NotNil predicate on the "gender" field.
func GenderNotNil() predicate.Appointment {
	return predicate.Appointment(sql.FieldNotNull(FieldGender))
}

// AgeEQ applies the EQ predicate on the "age" field.
func AgeEQ(v int32) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldAge, v))
}

// AgeNEQ applies the NEQ predicate on the "age" field.
func AgeNEQ(v int32) predicate.Appointment {
	return predicate.Appointment(sql.FieldNEQ(FieldAge, v))
}

// AgeIn applies the In predicate on the "age" field.
func AgeIn(vs ...int32) predicate.Appointment {
	return predicate.Appointment(sql.FieldIn(FieldAge, vs...))
}

// AgeNotIn applies the NotIn predicate on the "age" field.
func AgeNotIn(vs ...int32) predicate.Appointment {
	return predicate.Appointment(sql.FieldNotIn(FieldAge, vs...))
}

// AgeGT applies the GT predicate on the "age" field.
func AgeGT(v int32) predicate.Appointment {
	return predicate.Appointment(sql.FieldGT(FieldAge, v))
}

// AgeGTE applies the GTE predicate on the "age" field.
func AgeGTE(v int32) predicate.Appointment {
	return predicate.Appointment(sql.FieldGTE(FieldAge, v))
}

// AgeLT applies the LT predicate on the "age" field.
func AgeLT(v int32) predicate.Appointment {
	return predicate.Appointment(sql.FieldLT(FieldAge, v))
}

// AgeLTE applies the LTE predicate on the "age" field.
func AgeLTE(v int32) predicate.Appointment {
	return predicate.Appointment(sql.FieldLTE(FieldAge, v))
}

// AgeIsNil applies the IsNil predicate on the "age" field.
func AgeIsNil() predicate.Appointment {
	return predicate.Appointment(sql.FieldIsNull(FieldAge))
}

// AgeNotNil applies the NotNil predicate on the "age" field.
func AgeNotNil() predicate.Appointment {
	return predicate.Appointment(sql.FieldNotNull(FieldAge))
}

// AppointmentTimeEQ applies the EQ predicate on the "appointment_time" field.
func AppointmentTimeEQ(v int64) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldAppointmentTime, v))
}

// AppointmentTimeNEQ applies the NEQ predicate on the "appointment_time" field.
func AppointmentTimeNEQ(v int64) predicate.Appointment {
	return predicate.Appointment(sql.FieldNEQ(FieldAppointmentTime, v))
}

// AppointmentTimeIn applies the In predicate on the "appointment_time" field.
func AppointmentTimeIn(vs ...int64) predicate.Appointment {
	return predicate.Appointment(sql.FieldIn(FieldAppointmentTime, vs...))
}

// AppointmentTimeNotIn applies the NotIn predicate on the "appointment_time" field.
func AppointmentTimeNotIn(vs ...int64) predicate.Appointment {
	return predicate.Appointment(sql.FieldNotIn(FieldAppointmentTime, vs...))
}

// AppointmentTimeGT applies the GT predicate on the "appointment_time" field.
func AppointmentTimeGT(v int64) predicate.Appointment {
	return predicate.Appointment(sql.FieldGT(FieldAppointmentTime, v))
}

// AppointmentTimeGTE applies the GTE predicate on the "appointment_time" field.
func AppointmentTimeGTE(v int64) predicate.Appointment {
	return predicate.Appointment(sql.FieldGTE(FieldAppointmentTime, v))
}

// AppointmentTimeLT applies the LT predicate on the "appointment_time" field.
func AppointmentTimeLT(v int64) predicate.Appointment {
	return predicate.Appointment(sql.FieldLT(FieldAppointmentTime, v))
}

// AppointmentTimeLTE applies the LTE predicate on the "appointment_time" field.
func AppointmentTimeLTE(v int64) predicate.Appointment {
	return predicate.Appointment(sql.FieldLTE(FieldAppointmentTime, v))
}

// AppointmentTimeIsNil applies the IsNil predicate on the "appointment_time" field.
func AppointmentTimeIsNil() predicate.Appointment {
	return predicate.Appointment(sql.FieldIsNull(FieldAppointmentTime))
}

// AppointmentTimeNotNil applies the NotNil predicate on the "appointment_time" field.
func AppointmentTimeNotNil() predicate.Appointment {
	return predicate.Appointment(sql.FieldNotNull(FieldAppointmentTime))
}

// SymptomsEQ applies the EQ predicate on the "symptoms" field.
func SymptomsEQ(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldSymptoms, v))
}

// SymptomsNEQ applies the NEQ predicate on the "symptoms" field.
func SymptomsNEQ(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldNEQ(FieldSymptoms, v))
}

// SymptomsIn applies the In predicate on the "symptoms" field.
func SymptomsIn(vs ...string) predicate.Appointment {
	return predicate.Appointment(sql.FieldIn(FieldSymptoms, vs...))
}

// SymptomsNotIn applies the NotIn predicate on the "symptoms" field.
func SymptomsNotIn(vs ...string) predicate.Appointment {
	return predicate.Appointment(sql.FieldNotIn(FieldSymptoms, vs...))
}

// SymptomsGT applies the GT predicate on the "symptoms" field.
func SymptomsGT(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldGT(FieldSymptoms, v))
}

// SymptomsGTE applies the GTE predicate on the "symptoms" field.
func SymptomsGTE(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldGTE(FieldSymptoms, v))
}

// SymptomsLT applies the LT predicate on the "symptoms" field.
func SymptomsLT(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldLT(FieldSymptoms, v))
}

// SymptomsLTE applies the LTE predicate on the "symptoms" field.
func SymptomsLTE(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldLTE(FieldSymptoms, v))
}

// SymptomsContains applies the Contains predicate on the "symptoms" field.
func SymptomsContains(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldContains(FieldSymptoms, v))
}

// SymptomsHasPrefix applies the HasPrefix predicate on the "symptoms" field.
func SymptomsHasPrefix(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldHasPrefix(FieldSymptoms, v))
}

// SymptomsHasSuffix applies the HasSuffix predicate on the "symptoms" field.
func SymptomsHasSuffix(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldHasSuffix(FieldSymptoms, v))
}

// SymptomsIsNil applies the IsNil predicate on the "symptoms" field.
func SymptomsIsNil() predicate.Appointment {
	return predicate.Appointment(sql.FieldIsNull(FieldSymptoms))
}

// SymptomsNotNil applies the NotNil predicate on the "symptoms" field.
func SymptomsNotNil() predicate.Appointment {
	return predicate.Appointment(sql.FieldNotNull(FieldSymptoms))
}

// SymptomsEqualFold applies the EqualFold predicate on the "symptoms" field.
func SymptomsEqualFold(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldEqualFold(FieldSymptoms, v))
}

// SymptomsContainsFold applies the ContainsFold predicate on the "symptoms" field.
func SymptomsContainsFold(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldContainsFold(FieldSymptoms, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int32) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int32) predicate.Appointment {
	return predicate.Appointment(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int32) predicate.Appointment {
	return predicate.Appointment(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int32) predicate.Appointment {
	return predicate.Appointment(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int32) predicate.Appointment {
	return predicate.Appointment(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int32) predicate.Appointment {
	return predicate.Appointment(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int32) predicate.Appointment {
	return predicate.Appointment(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int32) predicate.Appointment {
	return predicate.Appointment(sql.FieldLTE(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Appointment {
	return predicate.Appointment(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Appointment {
	return predicate.Appointment(sql.FieldNotNull(FieldStatus))
}

// RemarksEQ applies the EQ predicate on the "remarks" field.
func RemarksEQ(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldRemarks, v))
}

// RemarksNEQ applies the NEQ predicate on the "remarks" field.
func RemarksNEQ(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldNEQ(FieldRemarks, v))
}

// RemarksIn applies the In predicate on the "remarks" field.
func RemarksIn(vs ...string) predicate.Appointment {
	return predicate.Appointment(sql.FieldIn(FieldRemarks, vs...))
}

// RemarksNotIn applies the NotIn predicate on the "remarks" field.
func RemarksNotIn(vs ...string) predicate.Appointment {
	return predicate.Appointment(sql.FieldNotIn(FieldRemarks, vs...))
}

// RemarksGT applies the GT predicate on the "remarks" field.
func RemarksGT(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldGT(FieldRemarks, v))
}

// RemarksGTE applies the GTE predicate on the "remarks" field.
func RemarksGTE(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldGTE(FieldRemarks, v))
}

// RemarksLT applies the LT predicate on the "remarks" field.
func RemarksLT(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldLT(FieldRemarks, v))
}

// RemarksLTE applies the LTE predicate on the "remarks" field.
func RemarksLTE(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldLTE(FieldRemarks, v))
}

// RemarksContains applies the Contains predicate on the "remarks" field.
func RemarksContains(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldContains(FieldRemarks, v))
}

// RemarksHasPrefix applies the HasPrefix predicate on the "remarks" field.
func RemarksHasPrefix(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldHasPrefix(FieldRemarks, v))
}

// RemarksHasSuffix applies the HasSuffix predicate on the "remarks" field.
func RemarksHasSuffix(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldHasSuffix(FieldRemarks, v))
}

// RemarksIsNil applies the IsNil predicate on the "remarks" field.
func RemarksIsNil() predicate.Appointment {
	return predicate.Appointment(sql.FieldIsNull(FieldRemarks))
}

// RemarksNotNil applies the NotNil predicate on the "remarks" field.
func RemarksNotNil() predicate.Appointment {
	return predicate.Appointment(sql.FieldNotNull(FieldRemarks))
}

// RemarksEqualFold applies the EqualFold predicate on the "remarks" field.
func RemarksEqualFold(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldEqualFold(FieldRemarks, v))
}

// RemarksContainsFold applies the ContainsFold predicate on the "remarks" field.
func RemarksContainsFold(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldContainsFold(FieldRemarks, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.Appointment {
	return predicate.Appointment(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.Appointment {
	return predicate.Appointment(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.Appointment {
	return predicate.Appointment(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.Appointment {
	return predicate.Appointment(sql.FieldNotNull(FieldUserID))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldContainsFold(FieldUserID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Appointment) predicate.Appointment {
	return predicate.Appointment(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Appointment) predicate.Appointment {
	return predicate.Appointment(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Appointment) predicate.Appointment {
	return predicate.Appointment(sql.NotPredicates(p))
}
