// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/suyuan32/simple-admin-member-rpc/ent/medicine"
)

// MedicineCreate is the builder for creating a Medicine entity.
type MedicineCreate struct {
	config
	mutation *MedicineMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (mc *MedicineCreate) SetCreatedAt(t time.Time) *MedicineCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mc *MedicineCreate) SetNillableCreatedAt(t *time.Time) *MedicineCreate {
	if t != nil {
		mc.SetCreatedAt(*t)
	}
	return mc
}

// SetUpdatedAt sets the "updated_at" field.
func (mc *MedicineCreate) SetUpdatedAt(t time.Time) *MedicineCreate {
	mc.mutation.SetUpdatedAt(t)
	return mc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mc *MedicineCreate) SetNillableUpdatedAt(t *time.Time) *MedicineCreate {
	if t != nil {
		mc.SetUpdatedAt(*t)
	}
	return mc
}

// SetStatus sets the "status" field.
func (mc *MedicineCreate) SetStatus(u uint8) *MedicineCreate {
	mc.mutation.SetStatus(u)
	return mc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mc *MedicineCreate) SetNillableStatus(u *uint8) *MedicineCreate {
	if u != nil {
		mc.SetStatus(*u)
	}
	return mc
}

// SetSort sets the "sort" field.
func (mc *MedicineCreate) SetSort(u uint32) *MedicineCreate {
	mc.mutation.SetSort(u)
	return mc
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (mc *MedicineCreate) SetNillableSort(u *uint32) *MedicineCreate {
	if u != nil {
		mc.SetSort(*u)
	}
	return mc
}

// SetName sets the "name" field.
func (mc *MedicineCreate) SetName(s string) *MedicineCreate {
	mc.mutation.SetName(s)
	return mc
}

// SetQuantity sets the "quantity" field.
func (mc *MedicineCreate) SetQuantity(u uint32) *MedicineCreate {
	mc.mutation.SetQuantity(u)
	return mc
}

// SetDescription sets the "description" field.
func (mc *MedicineCreate) SetDescription(s string) *MedicineCreate {
	mc.mutation.SetDescription(s)
	return mc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (mc *MedicineCreate) SetNillableDescription(s *string) *MedicineCreate {
	if s != nil {
		mc.SetDescription(*s)
	}
	return mc
}

// SetRemarks sets the "remarks" field.
func (mc *MedicineCreate) SetRemarks(s string) *MedicineCreate {
	mc.mutation.SetRemarks(s)
	return mc
}

// SetNillableRemarks sets the "remarks" field if the given value is not nil.
func (mc *MedicineCreate) SetNillableRemarks(s *string) *MedicineCreate {
	if s != nil {
		mc.SetRemarks(*s)
	}
	return mc
}

// SetImages sets the "images" field.
func (mc *MedicineCreate) SetImages(s string) *MedicineCreate {
	mc.mutation.SetImages(s)
	return mc
}

// SetNillableImages sets the "images" field if the given value is not nil.
func (mc *MedicineCreate) SetNillableImages(s *string) *MedicineCreate {
	if s != nil {
		mc.SetImages(*s)
	}
	return mc
}

// SetID sets the "id" field.
func (mc *MedicineCreate) SetID(u uint64) *MedicineCreate {
	mc.mutation.SetID(u)
	return mc
}

// Mutation returns the MedicineMutation object of the builder.
func (mc *MedicineCreate) Mutation() *MedicineMutation {
	return mc.mutation
}

// Save creates the Medicine in the database.
func (mc *MedicineCreate) Save(ctx context.Context) (*Medicine, error) {
	mc.defaults()
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MedicineCreate) SaveX(ctx context.Context) *Medicine {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MedicineCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MedicineCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MedicineCreate) defaults() {
	if _, ok := mc.mutation.CreatedAt(); !ok {
		v := medicine.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		v := medicine.DefaultUpdatedAt()
		mc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mc.mutation.Status(); !ok {
		v := medicine.DefaultStatus
		mc.mutation.SetStatus(v)
	}
	if _, ok := mc.mutation.Sort(); !ok {
		v := medicine.DefaultSort
		mc.mutation.SetSort(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MedicineCreate) check() error {
	if _, ok := mc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Medicine.created_at"`)}
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Medicine.updated_at"`)}
	}
	if _, ok := mc.mutation.Sort(); !ok {
		return &ValidationError{Name: "sort", err: errors.New(`ent: missing required field "Medicine.sort"`)}
	}
	if _, ok := mc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Medicine.name"`)}
	}
	if _, ok := mc.mutation.Quantity(); !ok {
		return &ValidationError{Name: "quantity", err: errors.New(`ent: missing required field "Medicine.quantity"`)}
	}
	return nil
}

func (mc *MedicineCreate) sqlSave(ctx context.Context) (*Medicine, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MedicineCreate) createSpec() (*Medicine, *sqlgraph.CreateSpec) {
	var (
		_node = &Medicine{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(medicine.Table, sqlgraph.NewFieldSpec(medicine.FieldID, field.TypeUint64))
	)
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.SetField(medicine.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mc.mutation.UpdatedAt(); ok {
		_spec.SetField(medicine.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mc.mutation.Status(); ok {
		_spec.SetField(medicine.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	if value, ok := mc.mutation.Sort(); ok {
		_spec.SetField(medicine.FieldSort, field.TypeUint32, value)
		_node.Sort = value
	}
	if value, ok := mc.mutation.Name(); ok {
		_spec.SetField(medicine.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := mc.mutation.Quantity(); ok {
		_spec.SetField(medicine.FieldQuantity, field.TypeUint32, value)
		_node.Quantity = value
	}
	if value, ok := mc.mutation.Description(); ok {
		_spec.SetField(medicine.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := mc.mutation.Remarks(); ok {
		_spec.SetField(medicine.FieldRemarks, field.TypeString, value)
		_node.Remarks = value
	}
	if value, ok := mc.mutation.Images(); ok {
		_spec.SetField(medicine.FieldImages, field.TypeString, value)
		_node.Images = value
	}
	return _node, _spec
}

// MedicineCreateBulk is the builder for creating many Medicine entities in bulk.
type MedicineCreateBulk struct {
	config
	err      error
	builders []*MedicineCreate
}

// Save creates the Medicine entities in the database.
func (mcb *MedicineCreateBulk) Save(ctx context.Context) ([]*Medicine, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Medicine, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MedicineMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MedicineCreateBulk) SaveX(ctx context.Context) []*Medicine {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MedicineCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MedicineCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
