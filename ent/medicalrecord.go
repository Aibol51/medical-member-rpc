// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/suyuan32/simple-admin-member-rpc/ent/medicalrecord"
)

// MedicalRecord is the model entity for the MedicalRecord schema.
type MedicalRecord struct {
	config `json:"-"`
	// ID of the ent.
	// UUID
	ID uuid.UUID `json:"id,omitempty"`
	// Create Time | 创建日期
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Update Time | 修改日期
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Patient name | 姓名
	PatientName string `json:"patient_name,omitempty"`
	// Gender 1:male 2:female | 性别 1:男 2:女
	Gender int32 `json:"gender,omitempty"`
	// Age | 年龄
	Age int32 `json:"age,omitempty"`
	// ID card number | 身份证号
	IDCardNumber string `json:"id_card_number,omitempty"`
	// Phone number | 电话
	PhoneNumber string `json:"phone_number,omitempty"`
	// Chief complaint | 主诉
	ChiefComplaint string `json:"chief_complaint,omitempty"`
	// Present illness history | 现病史
	PresentIllness string `json:"present_illness,omitempty"`
	// Past history | 既往史
	PastHistory string `json:"past_history,omitempty"`
	// Smoking history | 吸烟史: 1-无, 2-有, 3-一般, 4-多, 5-已戒
	SmokingHistory int32 `json:"smoking_history,omitempty"`
	// Drinking history | 饮酒史: 1-无, 2-有, 3-一般, 4-多, 5-已戒
	DrinkingHistory int32 `json:"drinking_history,omitempty"`
	// Allergy history | 过敏史: 1-无, 2-有
	AllergyHistory int32 `json:"allergy_history,omitempty"`
	// Heart rate (beats/min) | 心率(次/分)
	HeartRate int32 `json:"heart_rate,omitempty"`
	// Blood pressure (mmHg) | 血压(mmHg)
	BloodPressure string `json:"blood_pressure,omitempty"`
	// Oxygen saturation (%) | 指脉氧(%)
	OxygenSaturation float64 `json:"oxygen_saturation,omitempty"`
	// Blood glucose (mmol/L) | 血糖(mmol/L)
	BloodGlucose float64 `json:"blood_glucose,omitempty"`
	// Weight (kg) | 体重(kg)
	Weight float64 `json:"weight,omitempty"`
	// Waist circumference (cm) | 腰围(cm)
	WaistCircumference float64 `json:"waist_circumference,omitempty"`
	// Body fat percentage (%) | 体脂数(%)
	BodyFat float64 `json:"body_fat,omitempty"`
	// Diagnosis | 诊断
	Diagnosis string `json:"diagnosis,omitempty"`
	// Diet therapy | 饮食治疗
	DietTherapy int32 `json:"diet_therapy,omitempty"`
	// Exercise therapy | 运动治疗
	ExerciseTherapy int32 `json:"exercise_therapy,omitempty"`
	// Medication therapy | 药物治疗
	MedicationTherapy int32 `json:"medication_therapy,omitempty"`
	// Overall treatment plan | 综合治疗方案
	TreatmentPlan string `json:"treatment_plan,omitempty"`
	// Doctor ID | 医生ID
	DoctorID string `json:"doctor_id,omitempty"`
	// Related appointment ID | 关联预约ID
	AppointmentID string `json:"appointment_id,omitempty"`
	// Remarks | 备注信息
	Remarks string `json:"remarks,omitempty"`
	// User ID | 用户ID
	UserID       string `json:"user_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MedicalRecord) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case medicalrecord.FieldOxygenSaturation, medicalrecord.FieldBloodGlucose, medicalrecord.FieldWeight, medicalrecord.FieldWaistCircumference, medicalrecord.FieldBodyFat:
			values[i] = new(sql.NullFloat64)
		case medicalrecord.FieldGender, medicalrecord.FieldAge, medicalrecord.FieldSmokingHistory, medicalrecord.FieldDrinkingHistory, medicalrecord.FieldAllergyHistory, medicalrecord.FieldHeartRate, medicalrecord.FieldDietTherapy, medicalrecord.FieldExerciseTherapy, medicalrecord.FieldMedicationTherapy:
			values[i] = new(sql.NullInt64)
		case medicalrecord.FieldPatientName, medicalrecord.FieldIDCardNumber, medicalrecord.FieldPhoneNumber, medicalrecord.FieldChiefComplaint, medicalrecord.FieldPresentIllness, medicalrecord.FieldPastHistory, medicalrecord.FieldBloodPressure, medicalrecord.FieldDiagnosis, medicalrecord.FieldTreatmentPlan, medicalrecord.FieldDoctorID, medicalrecord.FieldAppointmentID, medicalrecord.FieldRemarks, medicalrecord.FieldUserID:
			values[i] = new(sql.NullString)
		case medicalrecord.FieldCreatedAt, medicalrecord.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case medicalrecord.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MedicalRecord fields.
func (mr *MedicalRecord) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case medicalrecord.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				mr.ID = *value
			}
		case medicalrecord.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mr.CreatedAt = value.Time
			}
		case medicalrecord.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				mr.UpdatedAt = value.Time
			}
		case medicalrecord.FieldPatientName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field patient_name", values[i])
			} else if value.Valid {
				mr.PatientName = value.String
			}
		case medicalrecord.FieldGender:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				mr.Gender = int32(value.Int64)
			}
		case medicalrecord.FieldAge:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field age", values[i])
			} else if value.Valid {
				mr.Age = int32(value.Int64)
			}
		case medicalrecord.FieldIDCardNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id_card_number", values[i])
			} else if value.Valid {
				mr.IDCardNumber = value.String
			}
		case medicalrecord.FieldPhoneNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone_number", values[i])
			} else if value.Valid {
				mr.PhoneNumber = value.String
			}
		case medicalrecord.FieldChiefComplaint:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field chief_complaint", values[i])
			} else if value.Valid {
				mr.ChiefComplaint = value.String
			}
		case medicalrecord.FieldPresentIllness:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field present_illness", values[i])
			} else if value.Valid {
				mr.PresentIllness = value.String
			}
		case medicalrecord.FieldPastHistory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field past_history", values[i])
			} else if value.Valid {
				mr.PastHistory = value.String
			}
		case medicalrecord.FieldSmokingHistory:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field smoking_history", values[i])
			} else if value.Valid {
				mr.SmokingHistory = int32(value.Int64)
			}
		case medicalrecord.FieldDrinkingHistory:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field drinking_history", values[i])
			} else if value.Valid {
				mr.DrinkingHistory = int32(value.Int64)
			}
		case medicalrecord.FieldAllergyHistory:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field allergy_history", values[i])
			} else if value.Valid {
				mr.AllergyHistory = int32(value.Int64)
			}
		case medicalrecord.FieldHeartRate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field heart_rate", values[i])
			} else if value.Valid {
				mr.HeartRate = int32(value.Int64)
			}
		case medicalrecord.FieldBloodPressure:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field blood_pressure", values[i])
			} else if value.Valid {
				mr.BloodPressure = value.String
			}
		case medicalrecord.FieldOxygenSaturation:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field oxygen_saturation", values[i])
			} else if value.Valid {
				mr.OxygenSaturation = value.Float64
			}
		case medicalrecord.FieldBloodGlucose:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field blood_glucose", values[i])
			} else if value.Valid {
				mr.BloodGlucose = value.Float64
			}
		case medicalrecord.FieldWeight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field weight", values[i])
			} else if value.Valid {
				mr.Weight = value.Float64
			}
		case medicalrecord.FieldWaistCircumference:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field waist_circumference", values[i])
			} else if value.Valid {
				mr.WaistCircumference = value.Float64
			}
		case medicalrecord.FieldBodyFat:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field body_fat", values[i])
			} else if value.Valid {
				mr.BodyFat = value.Float64
			}
		case medicalrecord.FieldDiagnosis:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field diagnosis", values[i])
			} else if value.Valid {
				mr.Diagnosis = value.String
			}
		case medicalrecord.FieldDietTherapy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field diet_therapy", values[i])
			} else if value.Valid {
				mr.DietTherapy = int32(value.Int64)
			}
		case medicalrecord.FieldExerciseTherapy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field exercise_therapy", values[i])
			} else if value.Valid {
				mr.ExerciseTherapy = int32(value.Int64)
			}
		case medicalrecord.FieldMedicationTherapy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field medication_therapy", values[i])
			} else if value.Valid {
				mr.MedicationTherapy = int32(value.Int64)
			}
		case medicalrecord.FieldTreatmentPlan:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field treatment_plan", values[i])
			} else if value.Valid {
				mr.TreatmentPlan = value.String
			}
		case medicalrecord.FieldDoctorID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field doctor_id", values[i])
			} else if value.Valid {
				mr.DoctorID = value.String
			}
		case medicalrecord.FieldAppointmentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field appointment_id", values[i])
			} else if value.Valid {
				mr.AppointmentID = value.String
			}
		case medicalrecord.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[i])
			} else if value.Valid {
				mr.Remarks = value.String
			}
		case medicalrecord.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				mr.UserID = value.String
			}
		default:
			mr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MedicalRecord.
// This includes values selected through modifiers, order, etc.
func (mr *MedicalRecord) Value(name string) (ent.Value, error) {
	return mr.selectValues.Get(name)
}

// Update returns a builder for updating this MedicalRecord.
// Note that you need to call MedicalRecord.Unwrap() before calling this method if this MedicalRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (mr *MedicalRecord) Update() *MedicalRecordUpdateOne {
	return NewMedicalRecordClient(mr.config).UpdateOne(mr)
}

// Unwrap unwraps the MedicalRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mr *MedicalRecord) Unwrap() *MedicalRecord {
	_tx, ok := mr.config.driver.(*txDriver)
	if !ok {
		panic("ent: MedicalRecord is not a transactional entity")
	}
	mr.config.driver = _tx.drv
	return mr
}

// String implements the fmt.Stringer.
func (mr *MedicalRecord) String() string {
	var builder strings.Builder
	builder.WriteString("MedicalRecord(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(mr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(mr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("patient_name=")
	builder.WriteString(mr.PatientName)
	builder.WriteString(", ")
	builder.WriteString("gender=")
	builder.WriteString(fmt.Sprintf("%v", mr.Gender))
	builder.WriteString(", ")
	builder.WriteString("age=")
	builder.WriteString(fmt.Sprintf("%v", mr.Age))
	builder.WriteString(", ")
	builder.WriteString("id_card_number=")
	builder.WriteString(mr.IDCardNumber)
	builder.WriteString(", ")
	builder.WriteString("phone_number=")
	builder.WriteString(mr.PhoneNumber)
	builder.WriteString(", ")
	builder.WriteString("chief_complaint=")
	builder.WriteString(mr.ChiefComplaint)
	builder.WriteString(", ")
	builder.WriteString("present_illness=")
	builder.WriteString(mr.PresentIllness)
	builder.WriteString(", ")
	builder.WriteString("past_history=")
	builder.WriteString(mr.PastHistory)
	builder.WriteString(", ")
	builder.WriteString("smoking_history=")
	builder.WriteString(fmt.Sprintf("%v", mr.SmokingHistory))
	builder.WriteString(", ")
	builder.WriteString("drinking_history=")
	builder.WriteString(fmt.Sprintf("%v", mr.DrinkingHistory))
	builder.WriteString(", ")
	builder.WriteString("allergy_history=")
	builder.WriteString(fmt.Sprintf("%v", mr.AllergyHistory))
	builder.WriteString(", ")
	builder.WriteString("heart_rate=")
	builder.WriteString(fmt.Sprintf("%v", mr.HeartRate))
	builder.WriteString(", ")
	builder.WriteString("blood_pressure=")
	builder.WriteString(mr.BloodPressure)
	builder.WriteString(", ")
	builder.WriteString("oxygen_saturation=")
	builder.WriteString(fmt.Sprintf("%v", mr.OxygenSaturation))
	builder.WriteString(", ")
	builder.WriteString("blood_glucose=")
	builder.WriteString(fmt.Sprintf("%v", mr.BloodGlucose))
	builder.WriteString(", ")
	builder.WriteString("weight=")
	builder.WriteString(fmt.Sprintf("%v", mr.Weight))
	builder.WriteString(", ")
	builder.WriteString("waist_circumference=")
	builder.WriteString(fmt.Sprintf("%v", mr.WaistCircumference))
	builder.WriteString(", ")
	builder.WriteString("body_fat=")
	builder.WriteString(fmt.Sprintf("%v", mr.BodyFat))
	builder.WriteString(", ")
	builder.WriteString("diagnosis=")
	builder.WriteString(mr.Diagnosis)
	builder.WriteString(", ")
	builder.WriteString("diet_therapy=")
	builder.WriteString(fmt.Sprintf("%v", mr.DietTherapy))
	builder.WriteString(", ")
	builder.WriteString("exercise_therapy=")
	builder.WriteString(fmt.Sprintf("%v", mr.ExerciseTherapy))
	builder.WriteString(", ")
	builder.WriteString("medication_therapy=")
	builder.WriteString(fmt.Sprintf("%v", mr.MedicationTherapy))
	builder.WriteString(", ")
	builder.WriteString("treatment_plan=")
	builder.WriteString(mr.TreatmentPlan)
	builder.WriteString(", ")
	builder.WriteString("doctor_id=")
	builder.WriteString(mr.DoctorID)
	builder.WriteString(", ")
	builder.WriteString("appointment_id=")
	builder.WriteString(mr.AppointmentID)
	builder.WriteString(", ")
	builder.WriteString("remarks=")
	builder.WriteString(mr.Remarks)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(mr.UserID)
	builder.WriteByte(')')
	return builder.String()
}

// MedicalRecords is a parsable slice of MedicalRecord.
type MedicalRecords []*MedicalRecord
