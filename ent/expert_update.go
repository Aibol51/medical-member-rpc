// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/suyuan32/simple-admin-member-rpc/ent/expert"
	"github.com/suyuan32/simple-admin-member-rpc/ent/predicate"
)

// ExpertUpdate is the builder for updating Expert entities.
type ExpertUpdate struct {
	config
	hooks    []Hook
	mutation *ExpertMutation
}

// Where appends a list predicates to the ExpertUpdate builder.
func (eu *ExpertUpdate) Where(ps ...predicate.Expert) *ExpertUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *ExpertUpdate) SetUpdatedAt(t time.Time) *ExpertUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetStatus sets the "status" field.
func (eu *ExpertUpdate) SetStatus(u uint8) *ExpertUpdate {
	eu.mutation.ResetStatus()
	eu.mutation.SetStatus(u)
	return eu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (eu *ExpertUpdate) SetNillableStatus(u *uint8) *ExpertUpdate {
	if u != nil {
		eu.SetStatus(*u)
	}
	return eu
}

// AddStatus adds u to the "status" field.
func (eu *ExpertUpdate) AddStatus(u int8) *ExpertUpdate {
	eu.mutation.AddStatus(u)
	return eu
}

// ClearStatus clears the value of the "status" field.
func (eu *ExpertUpdate) ClearStatus() *ExpertUpdate {
	eu.mutation.ClearStatus()
	return eu
}

// SetSort sets the "sort" field.
func (eu *ExpertUpdate) SetSort(u uint32) *ExpertUpdate {
	eu.mutation.ResetSort()
	eu.mutation.SetSort(u)
	return eu
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (eu *ExpertUpdate) SetNillableSort(u *uint32) *ExpertUpdate {
	if u != nil {
		eu.SetSort(*u)
	}
	return eu
}

// AddSort adds u to the "sort" field.
func (eu *ExpertUpdate) AddSort(u int32) *ExpertUpdate {
	eu.mutation.AddSort(u)
	return eu
}

// SetNameZh sets the "name_zh" field.
func (eu *ExpertUpdate) SetNameZh(s string) *ExpertUpdate {
	eu.mutation.SetNameZh(s)
	return eu
}

// SetNillableNameZh sets the "name_zh" field if the given value is not nil.
func (eu *ExpertUpdate) SetNillableNameZh(s *string) *ExpertUpdate {
	if s != nil {
		eu.SetNameZh(*s)
	}
	return eu
}

// ClearNameZh clears the value of the "name_zh" field.
func (eu *ExpertUpdate) ClearNameZh() *ExpertUpdate {
	eu.mutation.ClearNameZh()
	return eu
}

// SetNameEn sets the "name_en" field.
func (eu *ExpertUpdate) SetNameEn(s string) *ExpertUpdate {
	eu.mutation.SetNameEn(s)
	return eu
}

// SetNillableNameEn sets the "name_en" field if the given value is not nil.
func (eu *ExpertUpdate) SetNillableNameEn(s *string) *ExpertUpdate {
	if s != nil {
		eu.SetNameEn(*s)
	}
	return eu
}

// ClearNameEn clears the value of the "name_en" field.
func (eu *ExpertUpdate) ClearNameEn() *ExpertUpdate {
	eu.mutation.ClearNameEn()
	return eu
}

// SetNameRu sets the "name_ru" field.
func (eu *ExpertUpdate) SetNameRu(s string) *ExpertUpdate {
	eu.mutation.SetNameRu(s)
	return eu
}

// SetNillableNameRu sets the "name_ru" field if the given value is not nil.
func (eu *ExpertUpdate) SetNillableNameRu(s *string) *ExpertUpdate {
	if s != nil {
		eu.SetNameRu(*s)
	}
	return eu
}

// ClearNameRu clears the value of the "name_ru" field.
func (eu *ExpertUpdate) ClearNameRu() *ExpertUpdate {
	eu.mutation.ClearNameRu()
	return eu
}

// SetNameKk sets the "name_kk" field.
func (eu *ExpertUpdate) SetNameKk(s string) *ExpertUpdate {
	eu.mutation.SetNameKk(s)
	return eu
}

// SetNillableNameKk sets the "name_kk" field if the given value is not nil.
func (eu *ExpertUpdate) SetNillableNameKk(s *string) *ExpertUpdate {
	if s != nil {
		eu.SetNameKk(*s)
	}
	return eu
}

// ClearNameKk clears the value of the "name_kk" field.
func (eu *ExpertUpdate) ClearNameKk() *ExpertUpdate {
	eu.mutation.ClearNameKk()
	return eu
}

// SetContentZh sets the "content_zh" field.
func (eu *ExpertUpdate) SetContentZh(s string) *ExpertUpdate {
	eu.mutation.SetContentZh(s)
	return eu
}

// SetNillableContentZh sets the "content_zh" field if the given value is not nil.
func (eu *ExpertUpdate) SetNillableContentZh(s *string) *ExpertUpdate {
	if s != nil {
		eu.SetContentZh(*s)
	}
	return eu
}

// ClearContentZh clears the value of the "content_zh" field.
func (eu *ExpertUpdate) ClearContentZh() *ExpertUpdate {
	eu.mutation.ClearContentZh()
	return eu
}

// SetContentEn sets the "content_en" field.
func (eu *ExpertUpdate) SetContentEn(s string) *ExpertUpdate {
	eu.mutation.SetContentEn(s)
	return eu
}

// SetNillableContentEn sets the "content_en" field if the given value is not nil.
func (eu *ExpertUpdate) SetNillableContentEn(s *string) *ExpertUpdate {
	if s != nil {
		eu.SetContentEn(*s)
	}
	return eu
}

// ClearContentEn clears the value of the "content_en" field.
func (eu *ExpertUpdate) ClearContentEn() *ExpertUpdate {
	eu.mutation.ClearContentEn()
	return eu
}

// SetContentRu sets the "content_ru" field.
func (eu *ExpertUpdate) SetContentRu(s string) *ExpertUpdate {
	eu.mutation.SetContentRu(s)
	return eu
}

// SetNillableContentRu sets the "content_ru" field if the given value is not nil.
func (eu *ExpertUpdate) SetNillableContentRu(s *string) *ExpertUpdate {
	if s != nil {
		eu.SetContentRu(*s)
	}
	return eu
}

// ClearContentRu clears the value of the "content_ru" field.
func (eu *ExpertUpdate) ClearContentRu() *ExpertUpdate {
	eu.mutation.ClearContentRu()
	return eu
}

// SetContentKk sets the "content_kk" field.
func (eu *ExpertUpdate) SetContentKk(s string) *ExpertUpdate {
	eu.mutation.SetContentKk(s)
	return eu
}

// SetNillableContentKk sets the "content_kk" field if the given value is not nil.
func (eu *ExpertUpdate) SetNillableContentKk(s *string) *ExpertUpdate {
	if s != nil {
		eu.SetContentKk(*s)
	}
	return eu
}

// ClearContentKk clears the value of the "content_kk" field.
func (eu *ExpertUpdate) ClearContentKk() *ExpertUpdate {
	eu.mutation.ClearContentKk()
	return eu
}

// SetCoverURL sets the "cover_url" field.
func (eu *ExpertUpdate) SetCoverURL(s string) *ExpertUpdate {
	eu.mutation.SetCoverURL(s)
	return eu
}

// SetNillableCoverURL sets the "cover_url" field if the given value is not nil.
func (eu *ExpertUpdate) SetNillableCoverURL(s *string) *ExpertUpdate {
	if s != nil {
		eu.SetCoverURL(*s)
	}
	return eu
}

// ClearCoverURL clears the value of the "cover_url" field.
func (eu *ExpertUpdate) ClearCoverURL() *ExpertUpdate {
	eu.mutation.ClearCoverURL()
	return eu
}

// Mutation returns the ExpertMutation object of the builder.
func (eu *ExpertUpdate) Mutation() *ExpertMutation {
	return eu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *ExpertUpdate) Save(ctx context.Context) (int, error) {
	eu.defaults()
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *ExpertUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *ExpertUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *ExpertUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *ExpertUpdate) defaults() {
	if _, ok := eu.mutation.UpdatedAt(); !ok {
		v := expert.UpdateDefaultUpdatedAt()
		eu.mutation.SetUpdatedAt(v)
	}
}

func (eu *ExpertUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(expert.Table, expert.Columns, sqlgraph.NewFieldSpec(expert.FieldID, field.TypeUint64))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.SetField(expert.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := eu.mutation.Status(); ok {
		_spec.SetField(expert.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := eu.mutation.AddedStatus(); ok {
		_spec.AddField(expert.FieldStatus, field.TypeUint8, value)
	}
	if eu.mutation.StatusCleared() {
		_spec.ClearField(expert.FieldStatus, field.TypeUint8)
	}
	if value, ok := eu.mutation.Sort(); ok {
		_spec.SetField(expert.FieldSort, field.TypeUint32, value)
	}
	if value, ok := eu.mutation.AddedSort(); ok {
		_spec.AddField(expert.FieldSort, field.TypeUint32, value)
	}
	if value, ok := eu.mutation.NameZh(); ok {
		_spec.SetField(expert.FieldNameZh, field.TypeString, value)
	}
	if eu.mutation.NameZhCleared() {
		_spec.ClearField(expert.FieldNameZh, field.TypeString)
	}
	if value, ok := eu.mutation.NameEn(); ok {
		_spec.SetField(expert.FieldNameEn, field.TypeString, value)
	}
	if eu.mutation.NameEnCleared() {
		_spec.ClearField(expert.FieldNameEn, field.TypeString)
	}
	if value, ok := eu.mutation.NameRu(); ok {
		_spec.SetField(expert.FieldNameRu, field.TypeString, value)
	}
	if eu.mutation.NameRuCleared() {
		_spec.ClearField(expert.FieldNameRu, field.TypeString)
	}
	if value, ok := eu.mutation.NameKk(); ok {
		_spec.SetField(expert.FieldNameKk, field.TypeString, value)
	}
	if eu.mutation.NameKkCleared() {
		_spec.ClearField(expert.FieldNameKk, field.TypeString)
	}
	if value, ok := eu.mutation.ContentZh(); ok {
		_spec.SetField(expert.FieldContentZh, field.TypeString, value)
	}
	if eu.mutation.ContentZhCleared() {
		_spec.ClearField(expert.FieldContentZh, field.TypeString)
	}
	if value, ok := eu.mutation.ContentEn(); ok {
		_spec.SetField(expert.FieldContentEn, field.TypeString, value)
	}
	if eu.mutation.ContentEnCleared() {
		_spec.ClearField(expert.FieldContentEn, field.TypeString)
	}
	if value, ok := eu.mutation.ContentRu(); ok {
		_spec.SetField(expert.FieldContentRu, field.TypeString, value)
	}
	if eu.mutation.ContentRuCleared() {
		_spec.ClearField(expert.FieldContentRu, field.TypeString)
	}
	if value, ok := eu.mutation.ContentKk(); ok {
		_spec.SetField(expert.FieldContentKk, field.TypeString, value)
	}
	if eu.mutation.ContentKkCleared() {
		_spec.ClearField(expert.FieldContentKk, field.TypeString)
	}
	if value, ok := eu.mutation.CoverURL(); ok {
		_spec.SetField(expert.FieldCoverURL, field.TypeString, value)
	}
	if eu.mutation.CoverURLCleared() {
		_spec.ClearField(expert.FieldCoverURL, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{expert.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// ExpertUpdateOne is the builder for updating a single Expert entity.
type ExpertUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExpertMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *ExpertUpdateOne) SetUpdatedAt(t time.Time) *ExpertUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetStatus sets the "status" field.
func (euo *ExpertUpdateOne) SetStatus(u uint8) *ExpertUpdateOne {
	euo.mutation.ResetStatus()
	euo.mutation.SetStatus(u)
	return euo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (euo *ExpertUpdateOne) SetNillableStatus(u *uint8) *ExpertUpdateOne {
	if u != nil {
		euo.SetStatus(*u)
	}
	return euo
}

// AddStatus adds u to the "status" field.
func (euo *ExpertUpdateOne) AddStatus(u int8) *ExpertUpdateOne {
	euo.mutation.AddStatus(u)
	return euo
}

// ClearStatus clears the value of the "status" field.
func (euo *ExpertUpdateOne) ClearStatus() *ExpertUpdateOne {
	euo.mutation.ClearStatus()
	return euo
}

// SetSort sets the "sort" field.
func (euo *ExpertUpdateOne) SetSort(u uint32) *ExpertUpdateOne {
	euo.mutation.ResetSort()
	euo.mutation.SetSort(u)
	return euo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (euo *ExpertUpdateOne) SetNillableSort(u *uint32) *ExpertUpdateOne {
	if u != nil {
		euo.SetSort(*u)
	}
	return euo
}

// AddSort adds u to the "sort" field.
func (euo *ExpertUpdateOne) AddSort(u int32) *ExpertUpdateOne {
	euo.mutation.AddSort(u)
	return euo
}

// SetNameZh sets the "name_zh" field.
func (euo *ExpertUpdateOne) SetNameZh(s string) *ExpertUpdateOne {
	euo.mutation.SetNameZh(s)
	return euo
}

// SetNillableNameZh sets the "name_zh" field if the given value is not nil.
func (euo *ExpertUpdateOne) SetNillableNameZh(s *string) *ExpertUpdateOne {
	if s != nil {
		euo.SetNameZh(*s)
	}
	return euo
}

// ClearNameZh clears the value of the "name_zh" field.
func (euo *ExpertUpdateOne) ClearNameZh() *ExpertUpdateOne {
	euo.mutation.ClearNameZh()
	return euo
}

// SetNameEn sets the "name_en" field.
func (euo *ExpertUpdateOne) SetNameEn(s string) *ExpertUpdateOne {
	euo.mutation.SetNameEn(s)
	return euo
}

// SetNillableNameEn sets the "name_en" field if the given value is not nil.
func (euo *ExpertUpdateOne) SetNillableNameEn(s *string) *ExpertUpdateOne {
	if s != nil {
		euo.SetNameEn(*s)
	}
	return euo
}

// ClearNameEn clears the value of the "name_en" field.
func (euo *ExpertUpdateOne) ClearNameEn() *ExpertUpdateOne {
	euo.mutation.ClearNameEn()
	return euo
}

// SetNameRu sets the "name_ru" field.
func (euo *ExpertUpdateOne) SetNameRu(s string) *ExpertUpdateOne {
	euo.mutation.SetNameRu(s)
	return euo
}

// SetNillableNameRu sets the "name_ru" field if the given value is not nil.
func (euo *ExpertUpdateOne) SetNillableNameRu(s *string) *ExpertUpdateOne {
	if s != nil {
		euo.SetNameRu(*s)
	}
	return euo
}

// ClearNameRu clears the value of the "name_ru" field.
func (euo *ExpertUpdateOne) ClearNameRu() *ExpertUpdateOne {
	euo.mutation.ClearNameRu()
	return euo
}

// SetNameKk sets the "name_kk" field.
func (euo *ExpertUpdateOne) SetNameKk(s string) *ExpertUpdateOne {
	euo.mutation.SetNameKk(s)
	return euo
}

// SetNillableNameKk sets the "name_kk" field if the given value is not nil.
func (euo *ExpertUpdateOne) SetNillableNameKk(s *string) *ExpertUpdateOne {
	if s != nil {
		euo.SetNameKk(*s)
	}
	return euo
}

// ClearNameKk clears the value of the "name_kk" field.
func (euo *ExpertUpdateOne) ClearNameKk() *ExpertUpdateOne {
	euo.mutation.ClearNameKk()
	return euo
}

// SetContentZh sets the "content_zh" field.
func (euo *ExpertUpdateOne) SetContentZh(s string) *ExpertUpdateOne {
	euo.mutation.SetContentZh(s)
	return euo
}

// SetNillableContentZh sets the "content_zh" field if the given value is not nil.
func (euo *ExpertUpdateOne) SetNillableContentZh(s *string) *ExpertUpdateOne {
	if s != nil {
		euo.SetContentZh(*s)
	}
	return euo
}

// ClearContentZh clears the value of the "content_zh" field.
func (euo *ExpertUpdateOne) ClearContentZh() *ExpertUpdateOne {
	euo.mutation.ClearContentZh()
	return euo
}

// SetContentEn sets the "content_en" field.
func (euo *ExpertUpdateOne) SetContentEn(s string) *ExpertUpdateOne {
	euo.mutation.SetContentEn(s)
	return euo
}

// SetNillableContentEn sets the "content_en" field if the given value is not nil.
func (euo *ExpertUpdateOne) SetNillableContentEn(s *string) *ExpertUpdateOne {
	if s != nil {
		euo.SetContentEn(*s)
	}
	return euo
}

// ClearContentEn clears the value of the "content_en" field.
func (euo *ExpertUpdateOne) ClearContentEn() *ExpertUpdateOne {
	euo.mutation.ClearContentEn()
	return euo
}

// SetContentRu sets the "content_ru" field.
func (euo *ExpertUpdateOne) SetContentRu(s string) *ExpertUpdateOne {
	euo.mutation.SetContentRu(s)
	return euo
}

// SetNillableContentRu sets the "content_ru" field if the given value is not nil.
func (euo *ExpertUpdateOne) SetNillableContentRu(s *string) *ExpertUpdateOne {
	if s != nil {
		euo.SetContentRu(*s)
	}
	return euo
}

// ClearContentRu clears the value of the "content_ru" field.
func (euo *ExpertUpdateOne) ClearContentRu() *ExpertUpdateOne {
	euo.mutation.ClearContentRu()
	return euo
}

// SetContentKk sets the "content_kk" field.
func (euo *ExpertUpdateOne) SetContentKk(s string) *ExpertUpdateOne {
	euo.mutation.SetContentKk(s)
	return euo
}

// SetNillableContentKk sets the "content_kk" field if the given value is not nil.
func (euo *ExpertUpdateOne) SetNillableContentKk(s *string) *ExpertUpdateOne {
	if s != nil {
		euo.SetContentKk(*s)
	}
	return euo
}

// ClearContentKk clears the value of the "content_kk" field.
func (euo *ExpertUpdateOne) ClearContentKk() *ExpertUpdateOne {
	euo.mutation.ClearContentKk()
	return euo
}

// SetCoverURL sets the "cover_url" field.
func (euo *ExpertUpdateOne) SetCoverURL(s string) *ExpertUpdateOne {
	euo.mutation.SetCoverURL(s)
	return euo
}

// SetNillableCoverURL sets the "cover_url" field if the given value is not nil.
func (euo *ExpertUpdateOne) SetNillableCoverURL(s *string) *ExpertUpdateOne {
	if s != nil {
		euo.SetCoverURL(*s)
	}
	return euo
}

// ClearCoverURL clears the value of the "cover_url" field.
func (euo *ExpertUpdateOne) ClearCoverURL() *ExpertUpdateOne {
	euo.mutation.ClearCoverURL()
	return euo
}

// Mutation returns the ExpertMutation object of the builder.
func (euo *ExpertUpdateOne) Mutation() *ExpertMutation {
	return euo.mutation
}

// Where appends a list predicates to the ExpertUpdate builder.
func (euo *ExpertUpdateOne) Where(ps ...predicate.Expert) *ExpertUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *ExpertUpdateOne) Select(field string, fields ...string) *ExpertUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Expert entity.
func (euo *ExpertUpdateOne) Save(ctx context.Context) (*Expert, error) {
	euo.defaults()
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *ExpertUpdateOne) SaveX(ctx context.Context) *Expert {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *ExpertUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *ExpertUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *ExpertUpdateOne) defaults() {
	if _, ok := euo.mutation.UpdatedAt(); !ok {
		v := expert.UpdateDefaultUpdatedAt()
		euo.mutation.SetUpdatedAt(v)
	}
}

func (euo *ExpertUpdateOne) sqlSave(ctx context.Context) (_node *Expert, err error) {
	_spec := sqlgraph.NewUpdateSpec(expert.Table, expert.Columns, sqlgraph.NewFieldSpec(expert.FieldID, field.TypeUint64))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Expert.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, expert.FieldID)
		for _, f := range fields {
			if !expert.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != expert.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.SetField(expert.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := euo.mutation.Status(); ok {
		_spec.SetField(expert.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := euo.mutation.AddedStatus(); ok {
		_spec.AddField(expert.FieldStatus, field.TypeUint8, value)
	}
	if euo.mutation.StatusCleared() {
		_spec.ClearField(expert.FieldStatus, field.TypeUint8)
	}
	if value, ok := euo.mutation.Sort(); ok {
		_spec.SetField(expert.FieldSort, field.TypeUint32, value)
	}
	if value, ok := euo.mutation.AddedSort(); ok {
		_spec.AddField(expert.FieldSort, field.TypeUint32, value)
	}
	if value, ok := euo.mutation.NameZh(); ok {
		_spec.SetField(expert.FieldNameZh, field.TypeString, value)
	}
	if euo.mutation.NameZhCleared() {
		_spec.ClearField(expert.FieldNameZh, field.TypeString)
	}
	if value, ok := euo.mutation.NameEn(); ok {
		_spec.SetField(expert.FieldNameEn, field.TypeString, value)
	}
	if euo.mutation.NameEnCleared() {
		_spec.ClearField(expert.FieldNameEn, field.TypeString)
	}
	if value, ok := euo.mutation.NameRu(); ok {
		_spec.SetField(expert.FieldNameRu, field.TypeString, value)
	}
	if euo.mutation.NameRuCleared() {
		_spec.ClearField(expert.FieldNameRu, field.TypeString)
	}
	if value, ok := euo.mutation.NameKk(); ok {
		_spec.SetField(expert.FieldNameKk, field.TypeString, value)
	}
	if euo.mutation.NameKkCleared() {
		_spec.ClearField(expert.FieldNameKk, field.TypeString)
	}
	if value, ok := euo.mutation.ContentZh(); ok {
		_spec.SetField(expert.FieldContentZh, field.TypeString, value)
	}
	if euo.mutation.ContentZhCleared() {
		_spec.ClearField(expert.FieldContentZh, field.TypeString)
	}
	if value, ok := euo.mutation.ContentEn(); ok {
		_spec.SetField(expert.FieldContentEn, field.TypeString, value)
	}
	if euo.mutation.ContentEnCleared() {
		_spec.ClearField(expert.FieldContentEn, field.TypeString)
	}
	if value, ok := euo.mutation.ContentRu(); ok {
		_spec.SetField(expert.FieldContentRu, field.TypeString, value)
	}
	if euo.mutation.ContentRuCleared() {
		_spec.ClearField(expert.FieldContentRu, field.TypeString)
	}
	if value, ok := euo.mutation.ContentKk(); ok {
		_spec.SetField(expert.FieldContentKk, field.TypeString, value)
	}
	if euo.mutation.ContentKkCleared() {
		_spec.ClearField(expert.FieldContentKk, field.TypeString)
	}
	if value, ok := euo.mutation.CoverURL(); ok {
		_spec.SetField(expert.FieldCoverURL, field.TypeString, value)
	}
	if euo.mutation.CoverURLCleared() {
		_spec.ClearField(expert.FieldCoverURL, field.TypeString)
	}
	_node = &Expert{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{expert.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
