// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/suyuan32/simple-admin-member-rpc/ent/appointment"
	"github.com/suyuan32/simple-admin-member-rpc/ent/expert"
	"github.com/suyuan32/simple-admin-member-rpc/ent/medicalrecord"
	"github.com/suyuan32/simple-admin-member-rpc/ent/medicine"
	"github.com/suyuan32/simple-admin-member-rpc/ent/member"
	"github.com/suyuan32/simple-admin-member-rpc/ent/memberrank"
	"github.com/suyuan32/simple-admin-member-rpc/ent/news"
	"github.com/suyuan32/simple-admin-member-rpc/ent/oauthprovider"
	"github.com/suyuan32/simple-admin-member-rpc/ent/predicate"
	"github.com/suyuan32/simple-admin-member-rpc/ent/service"
	"github.com/suyuan32/simple-admin-member-rpc/ent/swiper"
	"github.com/suyuan32/simple-admin-member-rpc/ent/token"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAppointment   = "Appointment"
	TypeExpert        = "Expert"
	TypeMedicalRecord = "MedicalRecord"
	TypeMedicine      = "Medicine"
	TypeMember        = "Member"
	TypeMemberRank    = "MemberRank"
	TypeNews          = "News"
	TypeOauthProvider = "OauthProvider"
	TypeService       = "Service"
	TypeSwiper        = "Swiper"
	TypeToken         = "Token"
)

// AppointmentMutation represents an operation that mutates the Appointment nodes in the graph.
type AppointmentMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uuid.UUID
	created_at          *time.Time
	updated_at          *time.Time
	patient_name        *string
	phone_number        *string
	id_card             *string
	gender              *int32
	addgender           *int32
	age                 *int32
	addage              *int32
	appointment_time    *int64
	addappointment_time *int64
	symptoms            *string
	status              *int32
	addstatus           *int32
	remarks             *string
	user_id             *string
	clearedFields       map[string]struct{}
	done                bool
	oldValue            func(context.Context) (*Appointment, error)
	predicates          []predicate.Appointment
}

var _ ent.Mutation = (*AppointmentMutation)(nil)

// appointmentOption allows management of the mutation configuration using functional options.
type appointmentOption func(*AppointmentMutation)

// newAppointmentMutation creates new mutation for the Appointment entity.
func newAppointmentMutation(c config, op Op, opts ...appointmentOption) *AppointmentMutation {
	m := &AppointmentMutation{
		config:        c,
		op:            op,
		typ:           TypeAppointment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAppointmentID sets the ID field of the mutation.
func withAppointmentID(id uuid.UUID) appointmentOption {
	return func(m *AppointmentMutation) {
		var (
			err   error
			once  sync.Once
			value *Appointment
		)
		m.oldValue = func(ctx context.Context) (*Appointment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Appointment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAppointment sets the old Appointment of the mutation.
func withAppointment(node *Appointment) appointmentOption {
	return func(m *AppointmentMutation) {
		m.oldValue = func(context.Context) (*Appointment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AppointmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AppointmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Appointment entities.
func (m *AppointmentMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AppointmentMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AppointmentMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Appointment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *AppointmentMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AppointmentMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Appointment entity.
// If the Appointment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppointmentMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AppointmentMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AppointmentMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AppointmentMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Appointment entity.
// If the Appointment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppointmentMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AppointmentMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetPatientName sets the "patient_name" field.
func (m *AppointmentMutation) SetPatientName(s string) {
	m.patient_name = &s
}

// PatientName returns the value of the "patient_name" field in the mutation.
func (m *AppointmentMutation) PatientName() (r string, exists bool) {
	v := m.patient_name
	if v == nil {
		return
	}
	return *v, true
}

// OldPatientName returns the old "patient_name" field's value of the Appointment entity.
// If the Appointment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppointmentMutation) OldPatientName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPatientName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPatientName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPatientName: %w", err)
	}
	return oldValue.PatientName, nil
}

// ClearPatientName clears the value of the "patient_name" field.
func (m *AppointmentMutation) ClearPatientName() {
	m.patient_name = nil
	m.clearedFields[appointment.FieldPatientName] = struct{}{}
}

// PatientNameCleared returns if the "patient_name" field was cleared in this mutation.
func (m *AppointmentMutation) PatientNameCleared() bool {
	_, ok := m.clearedFields[appointment.FieldPatientName]
	return ok
}

// ResetPatientName resets all changes to the "patient_name" field.
func (m *AppointmentMutation) ResetPatientName() {
	m.patient_name = nil
	delete(m.clearedFields, appointment.FieldPatientName)
}

// SetPhoneNumber sets the "phone_number" field.
func (m *AppointmentMutation) SetPhoneNumber(s string) {
	m.phone_number = &s
}

// PhoneNumber returns the value of the "phone_number" field in the mutation.
func (m *AppointmentMutation) PhoneNumber() (r string, exists bool) {
	v := m.phone_number
	if v == nil {
		return
	}
	return *v, true
}

// OldPhoneNumber returns the old "phone_number" field's value of the Appointment entity.
// If the Appointment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppointmentMutation) OldPhoneNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhoneNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhoneNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhoneNumber: %w", err)
	}
	return oldValue.PhoneNumber, nil
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (m *AppointmentMutation) ClearPhoneNumber() {
	m.phone_number = nil
	m.clearedFields[appointment.FieldPhoneNumber] = struct{}{}
}

// PhoneNumberCleared returns if the "phone_number" field was cleared in this mutation.
func (m *AppointmentMutation) PhoneNumberCleared() bool {
	_, ok := m.clearedFields[appointment.FieldPhoneNumber]
	return ok
}

// ResetPhoneNumber resets all changes to the "phone_number" field.
func (m *AppointmentMutation) ResetPhoneNumber() {
	m.phone_number = nil
	delete(m.clearedFields, appointment.FieldPhoneNumber)
}

// SetIDCard sets the "id_card" field.
func (m *AppointmentMutation) SetIDCard(s string) {
	m.id_card = &s
}

// IDCard returns the value of the "id_card" field in the mutation.
func (m *AppointmentMutation) IDCard() (r string, exists bool) {
	v := m.id_card
	if v == nil {
		return
	}
	return *v, true
}

// OldIDCard returns the old "id_card" field's value of the Appointment entity.
// If the Appointment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppointmentMutation) OldIDCard(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIDCard is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIDCard requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIDCard: %w", err)
	}
	return oldValue.IDCard, nil
}

// ClearIDCard clears the value of the "id_card" field.
func (m *AppointmentMutation) ClearIDCard() {
	m.id_card = nil
	m.clearedFields[appointment.FieldIDCard] = struct{}{}
}

// IDCardCleared returns if the "id_card" field was cleared in this mutation.
func (m *AppointmentMutation) IDCardCleared() bool {
	_, ok := m.clearedFields[appointment.FieldIDCard]
	return ok
}

// ResetIDCard resets all changes to the "id_card" field.
func (m *AppointmentMutation) ResetIDCard() {
	m.id_card = nil
	delete(m.clearedFields, appointment.FieldIDCard)
}

// SetGender sets the "gender" field.
func (m *AppointmentMutation) SetGender(i int32) {
	m.gender = &i
	m.addgender = nil
}

// Gender returns the value of the "gender" field in the mutation.
func (m *AppointmentMutation) Gender() (r int32, exists bool) {
	v := m.gender
	if v == nil {
		return
	}
	return *v, true
}

// OldGender returns the old "gender" field's value of the Appointment entity.
// If the Appointment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppointmentMutation) OldGender(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGender: %w", err)
	}
	return oldValue.Gender, nil
}

// AddGender adds i to the "gender" field.
func (m *AppointmentMutation) AddGender(i int32) {
	if m.addgender != nil {
		*m.addgender += i
	} else {
		m.addgender = &i
	}
}

// AddedGender returns the value that was added to the "gender" field in this mutation.
func (m *AppointmentMutation) AddedGender() (r int32, exists bool) {
	v := m.addgender
	if v == nil {
		return
	}
	return *v, true
}

// ClearGender clears the value of the "gender" field.
func (m *AppointmentMutation) ClearGender() {
	m.gender = nil
	m.addgender = nil
	m.clearedFields[appointment.FieldGender] = struct{}{}
}

// GenderCleared returns if the "gender" field was cleared in this mutation.
func (m *AppointmentMutation) GenderCleared() bool {
	_, ok := m.clearedFields[appointment.FieldGender]
	return ok
}

// ResetGender resets all changes to the "gender" field.
func (m *AppointmentMutation) ResetGender() {
	m.gender = nil
	m.addgender = nil
	delete(m.clearedFields, appointment.FieldGender)
}

// SetAge sets the "age" field.
func (m *AppointmentMutation) SetAge(i int32) {
	m.age = &i
	m.addage = nil
}

// Age returns the value of the "age" field in the mutation.
func (m *AppointmentMutation) Age() (r int32, exists bool) {
	v := m.age
	if v == nil {
		return
	}
	return *v, true
}

// OldAge returns the old "age" field's value of the Appointment entity.
// If the Appointment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppointmentMutation) OldAge(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAge is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAge: %w", err)
	}
	return oldValue.Age, nil
}

// AddAge adds i to the "age" field.
func (m *AppointmentMutation) AddAge(i int32) {
	if m.addage != nil {
		*m.addage += i
	} else {
		m.addage = &i
	}
}

// AddedAge returns the value that was added to the "age" field in this mutation.
func (m *AppointmentMutation) AddedAge() (r int32, exists bool) {
	v := m.addage
	if v == nil {
		return
	}
	return *v, true
}

// ClearAge clears the value of the "age" field.
func (m *AppointmentMutation) ClearAge() {
	m.age = nil
	m.addage = nil
	m.clearedFields[appointment.FieldAge] = struct{}{}
}

// AgeCleared returns if the "age" field was cleared in this mutation.
func (m *AppointmentMutation) AgeCleared() bool {
	_, ok := m.clearedFields[appointment.FieldAge]
	return ok
}

// ResetAge resets all changes to the "age" field.
func (m *AppointmentMutation) ResetAge() {
	m.age = nil
	m.addage = nil
	delete(m.clearedFields, appointment.FieldAge)
}

// SetAppointmentTime sets the "appointment_time" field.
func (m *AppointmentMutation) SetAppointmentTime(i int64) {
	m.appointment_time = &i
	m.addappointment_time = nil
}

// AppointmentTime returns the value of the "appointment_time" field in the mutation.
func (m *AppointmentMutation) AppointmentTime() (r int64, exists bool) {
	v := m.appointment_time
	if v == nil {
		return
	}
	return *v, true
}

// OldAppointmentTime returns the old "appointment_time" field's value of the Appointment entity.
// If the Appointment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppointmentMutation) OldAppointmentTime(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppointmentTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppointmentTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppointmentTime: %w", err)
	}
	return oldValue.AppointmentTime, nil
}

// AddAppointmentTime adds i to the "appointment_time" field.
func (m *AppointmentMutation) AddAppointmentTime(i int64) {
	if m.addappointment_time != nil {
		*m.addappointment_time += i
	} else {
		m.addappointment_time = &i
	}
}

// AddedAppointmentTime returns the value that was added to the "appointment_time" field in this mutation.
func (m *AppointmentMutation) AddedAppointmentTime() (r int64, exists bool) {
	v := m.addappointment_time
	if v == nil {
		return
	}
	return *v, true
}

// ClearAppointmentTime clears the value of the "appointment_time" field.
func (m *AppointmentMutation) ClearAppointmentTime() {
	m.appointment_time = nil
	m.addappointment_time = nil
	m.clearedFields[appointment.FieldAppointmentTime] = struct{}{}
}

// AppointmentTimeCleared returns if the "appointment_time" field was cleared in this mutation.
func (m *AppointmentMutation) AppointmentTimeCleared() bool {
	_, ok := m.clearedFields[appointment.FieldAppointmentTime]
	return ok
}

// ResetAppointmentTime resets all changes to the "appointment_time" field.
func (m *AppointmentMutation) ResetAppointmentTime() {
	m.appointment_time = nil
	m.addappointment_time = nil
	delete(m.clearedFields, appointment.FieldAppointmentTime)
}

// SetSymptoms sets the "symptoms" field.
func (m *AppointmentMutation) SetSymptoms(s string) {
	m.symptoms = &s
}

// Symptoms returns the value of the "symptoms" field in the mutation.
func (m *AppointmentMutation) Symptoms() (r string, exists bool) {
	v := m.symptoms
	if v == nil {
		return
	}
	return *v, true
}

// OldSymptoms returns the old "symptoms" field's value of the Appointment entity.
// If the Appointment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppointmentMutation) OldSymptoms(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSymptoms is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSymptoms requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSymptoms: %w", err)
	}
	return oldValue.Symptoms, nil
}

// ClearSymptoms clears the value of the "symptoms" field.
func (m *AppointmentMutation) ClearSymptoms() {
	m.symptoms = nil
	m.clearedFields[appointment.FieldSymptoms] = struct{}{}
}

// SymptomsCleared returns if the "symptoms" field was cleared in this mutation.
func (m *AppointmentMutation) SymptomsCleared() bool {
	_, ok := m.clearedFields[appointment.FieldSymptoms]
	return ok
}

// ResetSymptoms resets all changes to the "symptoms" field.
func (m *AppointmentMutation) ResetSymptoms() {
	m.symptoms = nil
	delete(m.clearedFields, appointment.FieldSymptoms)
}

// SetStatus sets the "status" field.
func (m *AppointmentMutation) SetStatus(i int32) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *AppointmentMutation) Status() (r int32, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Appointment entity.
// If the Appointment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppointmentMutation) OldStatus(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *AppointmentMutation) AddStatus(i int32) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *AppointmentMutation) AddedStatus() (r int32, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ClearStatus clears the value of the "status" field.
func (m *AppointmentMutation) ClearStatus() {
	m.status = nil
	m.addstatus = nil
	m.clearedFields[appointment.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *AppointmentMutation) StatusCleared() bool {
	_, ok := m.clearedFields[appointment.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *AppointmentMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
	delete(m.clearedFields, appointment.FieldStatus)
}

// SetRemarks sets the "remarks" field.
func (m *AppointmentMutation) SetRemarks(s string) {
	m.remarks = &s
}

// Remarks returns the value of the "remarks" field in the mutation.
func (m *AppointmentMutation) Remarks() (r string, exists bool) {
	v := m.remarks
	if v == nil {
		return
	}
	return *v, true
}

// OldRemarks returns the old "remarks" field's value of the Appointment entity.
// If the Appointment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppointmentMutation) OldRemarks(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemarks is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemarks requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemarks: %w", err)
	}
	return oldValue.Remarks, nil
}

// ClearRemarks clears the value of the "remarks" field.
func (m *AppointmentMutation) ClearRemarks() {
	m.remarks = nil
	m.clearedFields[appointment.FieldRemarks] = struct{}{}
}

// RemarksCleared returns if the "remarks" field was cleared in this mutation.
func (m *AppointmentMutation) RemarksCleared() bool {
	_, ok := m.clearedFields[appointment.FieldRemarks]
	return ok
}

// ResetRemarks resets all changes to the "remarks" field.
func (m *AppointmentMutation) ResetRemarks() {
	m.remarks = nil
	delete(m.clearedFields, appointment.FieldRemarks)
}

// SetUserID sets the "user_id" field.
func (m *AppointmentMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *AppointmentMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Appointment entity.
// If the Appointment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppointmentMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *AppointmentMutation) ClearUserID() {
	m.user_id = nil
	m.clearedFields[appointment.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *AppointmentMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[appointment.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *AppointmentMutation) ResetUserID() {
	m.user_id = nil
	delete(m.clearedFields, appointment.FieldUserID)
}

// Where appends a list predicates to the AppointmentMutation builder.
func (m *AppointmentMutation) Where(ps ...predicate.Appointment) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AppointmentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AppointmentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Appointment, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AppointmentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AppointmentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Appointment).
func (m *AppointmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AppointmentMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.created_at != nil {
		fields = append(fields, appointment.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, appointment.FieldUpdatedAt)
	}
	if m.patient_name != nil {
		fields = append(fields, appointment.FieldPatientName)
	}
	if m.phone_number != nil {
		fields = append(fields, appointment.FieldPhoneNumber)
	}
	if m.id_card != nil {
		fields = append(fields, appointment.FieldIDCard)
	}
	if m.gender != nil {
		fields = append(fields, appointment.FieldGender)
	}
	if m.age != nil {
		fields = append(fields, appointment.FieldAge)
	}
	if m.appointment_time != nil {
		fields = append(fields, appointment.FieldAppointmentTime)
	}
	if m.symptoms != nil {
		fields = append(fields, appointment.FieldSymptoms)
	}
	if m.status != nil {
		fields = append(fields, appointment.FieldStatus)
	}
	if m.remarks != nil {
		fields = append(fields, appointment.FieldRemarks)
	}
	if m.user_id != nil {
		fields = append(fields, appointment.FieldUserID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AppointmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case appointment.FieldCreatedAt:
		return m.CreatedAt()
	case appointment.FieldUpdatedAt:
		return m.UpdatedAt()
	case appointment.FieldPatientName:
		return m.PatientName()
	case appointment.FieldPhoneNumber:
		return m.PhoneNumber()
	case appointment.FieldIDCard:
		return m.IDCard()
	case appointment.FieldGender:
		return m.Gender()
	case appointment.FieldAge:
		return m.Age()
	case appointment.FieldAppointmentTime:
		return m.AppointmentTime()
	case appointment.FieldSymptoms:
		return m.Symptoms()
	case appointment.FieldStatus:
		return m.Status()
	case appointment.FieldRemarks:
		return m.Remarks()
	case appointment.FieldUserID:
		return m.UserID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AppointmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case appointment.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case appointment.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case appointment.FieldPatientName:
		return m.OldPatientName(ctx)
	case appointment.FieldPhoneNumber:
		return m.OldPhoneNumber(ctx)
	case appointment.FieldIDCard:
		return m.OldIDCard(ctx)
	case appointment.FieldGender:
		return m.OldGender(ctx)
	case appointment.FieldAge:
		return m.OldAge(ctx)
	case appointment.FieldAppointmentTime:
		return m.OldAppointmentTime(ctx)
	case appointment.FieldSymptoms:
		return m.OldSymptoms(ctx)
	case appointment.FieldStatus:
		return m.OldStatus(ctx)
	case appointment.FieldRemarks:
		return m.OldRemarks(ctx)
	case appointment.FieldUserID:
		return m.OldUserID(ctx)
	}
	return nil, fmt.Errorf("unknown Appointment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppointmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case appointment.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case appointment.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case appointment.FieldPatientName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPatientName(v)
		return nil
	case appointment.FieldPhoneNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhoneNumber(v)
		return nil
	case appointment.FieldIDCard:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIDCard(v)
		return nil
	case appointment.FieldGender:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGender(v)
		return nil
	case appointment.FieldAge:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAge(v)
		return nil
	case appointment.FieldAppointmentTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppointmentTime(v)
		return nil
	case appointment.FieldSymptoms:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSymptoms(v)
		return nil
	case appointment.FieldStatus:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case appointment.FieldRemarks:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemarks(v)
		return nil
	case appointment.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	}
	return fmt.Errorf("unknown Appointment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AppointmentMutation) AddedFields() []string {
	var fields []string
	if m.addgender != nil {
		fields = append(fields, appointment.FieldGender)
	}
	if m.addage != nil {
		fields = append(fields, appointment.FieldAge)
	}
	if m.addappointment_time != nil {
		fields = append(fields, appointment.FieldAppointmentTime)
	}
	if m.addstatus != nil {
		fields = append(fields, appointment.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AppointmentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case appointment.FieldGender:
		return m.AddedGender()
	case appointment.FieldAge:
		return m.AddedAge()
	case appointment.FieldAppointmentTime:
		return m.AddedAppointmentTime()
	case appointment.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppointmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case appointment.FieldGender:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGender(v)
		return nil
	case appointment.FieldAge:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAge(v)
		return nil
	case appointment.FieldAppointmentTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAppointmentTime(v)
		return nil
	case appointment.FieldStatus:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Appointment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AppointmentMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(appointment.FieldPatientName) {
		fields = append(fields, appointment.FieldPatientName)
	}
	if m.FieldCleared(appointment.FieldPhoneNumber) {
		fields = append(fields, appointment.FieldPhoneNumber)
	}
	if m.FieldCleared(appointment.FieldIDCard) {
		fields = append(fields, appointment.FieldIDCard)
	}
	if m.FieldCleared(appointment.FieldGender) {
		fields = append(fields, appointment.FieldGender)
	}
	if m.FieldCleared(appointment.FieldAge) {
		fields = append(fields, appointment.FieldAge)
	}
	if m.FieldCleared(appointment.FieldAppointmentTime) {
		fields = append(fields, appointment.FieldAppointmentTime)
	}
	if m.FieldCleared(appointment.FieldSymptoms) {
		fields = append(fields, appointment.FieldSymptoms)
	}
	if m.FieldCleared(appointment.FieldStatus) {
		fields = append(fields, appointment.FieldStatus)
	}
	if m.FieldCleared(appointment.FieldRemarks) {
		fields = append(fields, appointment.FieldRemarks)
	}
	if m.FieldCleared(appointment.FieldUserID) {
		fields = append(fields, appointment.FieldUserID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AppointmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AppointmentMutation) ClearField(name string) error {
	switch name {
	case appointment.FieldPatientName:
		m.ClearPatientName()
		return nil
	case appointment.FieldPhoneNumber:
		m.ClearPhoneNumber()
		return nil
	case appointment.FieldIDCard:
		m.ClearIDCard()
		return nil
	case appointment.FieldGender:
		m.ClearGender()
		return nil
	case appointment.FieldAge:
		m.ClearAge()
		return nil
	case appointment.FieldAppointmentTime:
		m.ClearAppointmentTime()
		return nil
	case appointment.FieldSymptoms:
		m.ClearSymptoms()
		return nil
	case appointment.FieldStatus:
		m.ClearStatus()
		return nil
	case appointment.FieldRemarks:
		m.ClearRemarks()
		return nil
	case appointment.FieldUserID:
		m.ClearUserID()
		return nil
	}
	return fmt.Errorf("unknown Appointment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AppointmentMutation) ResetField(name string) error {
	switch name {
	case appointment.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case appointment.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case appointment.FieldPatientName:
		m.ResetPatientName()
		return nil
	case appointment.FieldPhoneNumber:
		m.ResetPhoneNumber()
		return nil
	case appointment.FieldIDCard:
		m.ResetIDCard()
		return nil
	case appointment.FieldGender:
		m.ResetGender()
		return nil
	case appointment.FieldAge:
		m.ResetAge()
		return nil
	case appointment.FieldAppointmentTime:
		m.ResetAppointmentTime()
		return nil
	case appointment.FieldSymptoms:
		m.ResetSymptoms()
		return nil
	case appointment.FieldStatus:
		m.ResetStatus()
		return nil
	case appointment.FieldRemarks:
		m.ResetRemarks()
		return nil
	case appointment.FieldUserID:
		m.ResetUserID()
		return nil
	}
	return fmt.Errorf("unknown Appointment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AppointmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AppointmentMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AppointmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AppointmentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AppointmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AppointmentMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AppointmentMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Appointment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AppointmentMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Appointment edge %s", name)
}

// ExpertMutation represents an operation that mutates the Expert nodes in the graph.
type ExpertMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	created_at    *time.Time
	updated_at    *time.Time
	status        *uint8
	addstatus     *int8
	sort          *uint32
	addsort       *int32
	name_zh       *string
	name_en       *string
	name_ru       *string
	name_kk       *string
	content_zh    *string
	content_en    *string
	content_ru    *string
	content_kk    *string
	cover_url     *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Expert, error)
	predicates    []predicate.Expert
}

var _ ent.Mutation = (*ExpertMutation)(nil)

// expertOption allows management of the mutation configuration using functional options.
type expertOption func(*ExpertMutation)

// newExpertMutation creates new mutation for the Expert entity.
func newExpertMutation(c config, op Op, opts ...expertOption) *ExpertMutation {
	m := &ExpertMutation{
		config:        c,
		op:            op,
		typ:           TypeExpert,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withExpertID sets the ID field of the mutation.
func withExpertID(id uint64) expertOption {
	return func(m *ExpertMutation) {
		var (
			err   error
			once  sync.Once
			value *Expert
		)
		m.oldValue = func(ctx context.Context) (*Expert, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Expert.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withExpert sets the old Expert of the mutation.
func withExpert(node *Expert) expertOption {
	return func(m *ExpertMutation) {
		m.oldValue = func(context.Context) (*Expert, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ExpertMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ExpertMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Expert entities.
func (m *ExpertMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ExpertMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ExpertMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Expert.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ExpertMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ExpertMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Expert entity.
// If the Expert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExpertMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ExpertMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ExpertMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ExpertMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Expert entity.
// If the Expert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExpertMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ExpertMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetStatus sets the "status" field.
func (m *ExpertMutation) SetStatus(u uint8) {
	m.status = &u
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *ExpertMutation) Status() (r uint8, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Expert entity.
// If the Expert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExpertMutation) OldStatus(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds u to the "status" field.
func (m *ExpertMutation) AddStatus(u int8) {
	if m.addstatus != nil {
		*m.addstatus += u
	} else {
		m.addstatus = &u
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *ExpertMutation) AddedStatus() (r int8, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ClearStatus clears the value of the "status" field.
func (m *ExpertMutation) ClearStatus() {
	m.status = nil
	m.addstatus = nil
	m.clearedFields[expert.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *ExpertMutation) StatusCleared() bool {
	_, ok := m.clearedFields[expert.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *ExpertMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
	delete(m.clearedFields, expert.FieldStatus)
}

// SetSort sets the "sort" field.
func (m *ExpertMutation) SetSort(u uint32) {
	m.sort = &u
	m.addsort = nil
}

// Sort returns the value of the "sort" field in the mutation.
func (m *ExpertMutation) Sort() (r uint32, exists bool) {
	v := m.sort
	if v == nil {
		return
	}
	return *v, true
}

// OldSort returns the old "sort" field's value of the Expert entity.
// If the Expert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExpertMutation) OldSort(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSort: %w", err)
	}
	return oldValue.Sort, nil
}

// AddSort adds u to the "sort" field.
func (m *ExpertMutation) AddSort(u int32) {
	if m.addsort != nil {
		*m.addsort += u
	} else {
		m.addsort = &u
	}
}

// AddedSort returns the value that was added to the "sort" field in this mutation.
func (m *ExpertMutation) AddedSort() (r int32, exists bool) {
	v := m.addsort
	if v == nil {
		return
	}
	return *v, true
}

// ResetSort resets all changes to the "sort" field.
func (m *ExpertMutation) ResetSort() {
	m.sort = nil
	m.addsort = nil
}

// SetNameZh sets the "name_zh" field.
func (m *ExpertMutation) SetNameZh(s string) {
	m.name_zh = &s
}

// NameZh returns the value of the "name_zh" field in the mutation.
func (m *ExpertMutation) NameZh() (r string, exists bool) {
	v := m.name_zh
	if v == nil {
		return
	}
	return *v, true
}

// OldNameZh returns the old "name_zh" field's value of the Expert entity.
// If the Expert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExpertMutation) OldNameZh(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNameZh is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNameZh requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameZh: %w", err)
	}
	return oldValue.NameZh, nil
}

// ClearNameZh clears the value of the "name_zh" field.
func (m *ExpertMutation) ClearNameZh() {
	m.name_zh = nil
	m.clearedFields[expert.FieldNameZh] = struct{}{}
}

// NameZhCleared returns if the "name_zh" field was cleared in this mutation.
func (m *ExpertMutation) NameZhCleared() bool {
	_, ok := m.clearedFields[expert.FieldNameZh]
	return ok
}

// ResetNameZh resets all changes to the "name_zh" field.
func (m *ExpertMutation) ResetNameZh() {
	m.name_zh = nil
	delete(m.clearedFields, expert.FieldNameZh)
}

// SetNameEn sets the "name_en" field.
func (m *ExpertMutation) SetNameEn(s string) {
	m.name_en = &s
}

// NameEn returns the value of the "name_en" field in the mutation.
func (m *ExpertMutation) NameEn() (r string, exists bool) {
	v := m.name_en
	if v == nil {
		return
	}
	return *v, true
}

// OldNameEn returns the old "name_en" field's value of the Expert entity.
// If the Expert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExpertMutation) OldNameEn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNameEn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNameEn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameEn: %w", err)
	}
	return oldValue.NameEn, nil
}

// ClearNameEn clears the value of the "name_en" field.
func (m *ExpertMutation) ClearNameEn() {
	m.name_en = nil
	m.clearedFields[expert.FieldNameEn] = struct{}{}
}

// NameEnCleared returns if the "name_en" field was cleared in this mutation.
func (m *ExpertMutation) NameEnCleared() bool {
	_, ok := m.clearedFields[expert.FieldNameEn]
	return ok
}

// ResetNameEn resets all changes to the "name_en" field.
func (m *ExpertMutation) ResetNameEn() {
	m.name_en = nil
	delete(m.clearedFields, expert.FieldNameEn)
}

// SetNameRu sets the "name_ru" field.
func (m *ExpertMutation) SetNameRu(s string) {
	m.name_ru = &s
}

// NameRu returns the value of the "name_ru" field in the mutation.
func (m *ExpertMutation) NameRu() (r string, exists bool) {
	v := m.name_ru
	if v == nil {
		return
	}
	return *v, true
}

// OldNameRu returns the old "name_ru" field's value of the Expert entity.
// If the Expert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExpertMutation) OldNameRu(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNameRu is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNameRu requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameRu: %w", err)
	}
	return oldValue.NameRu, nil
}

// ClearNameRu clears the value of the "name_ru" field.
func (m *ExpertMutation) ClearNameRu() {
	m.name_ru = nil
	m.clearedFields[expert.FieldNameRu] = struct{}{}
}

// NameRuCleared returns if the "name_ru" field was cleared in this mutation.
func (m *ExpertMutation) NameRuCleared() bool {
	_, ok := m.clearedFields[expert.FieldNameRu]
	return ok
}

// ResetNameRu resets all changes to the "name_ru" field.
func (m *ExpertMutation) ResetNameRu() {
	m.name_ru = nil
	delete(m.clearedFields, expert.FieldNameRu)
}

// SetNameKk sets the "name_kk" field.
func (m *ExpertMutation) SetNameKk(s string) {
	m.name_kk = &s
}

// NameKk returns the value of the "name_kk" field in the mutation.
func (m *ExpertMutation) NameKk() (r string, exists bool) {
	v := m.name_kk
	if v == nil {
		return
	}
	return *v, true
}

// OldNameKk returns the old "name_kk" field's value of the Expert entity.
// If the Expert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExpertMutation) OldNameKk(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNameKk is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNameKk requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameKk: %w", err)
	}
	return oldValue.NameKk, nil
}

// ClearNameKk clears the value of the "name_kk" field.
func (m *ExpertMutation) ClearNameKk() {
	m.name_kk = nil
	m.clearedFields[expert.FieldNameKk] = struct{}{}
}

// NameKkCleared returns if the "name_kk" field was cleared in this mutation.
func (m *ExpertMutation) NameKkCleared() bool {
	_, ok := m.clearedFields[expert.FieldNameKk]
	return ok
}

// ResetNameKk resets all changes to the "name_kk" field.
func (m *ExpertMutation) ResetNameKk() {
	m.name_kk = nil
	delete(m.clearedFields, expert.FieldNameKk)
}

// SetContentZh sets the "content_zh" field.
func (m *ExpertMutation) SetContentZh(s string) {
	m.content_zh = &s
}

// ContentZh returns the value of the "content_zh" field in the mutation.
func (m *ExpertMutation) ContentZh() (r string, exists bool) {
	v := m.content_zh
	if v == nil {
		return
	}
	return *v, true
}

// OldContentZh returns the old "content_zh" field's value of the Expert entity.
// If the Expert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExpertMutation) OldContentZh(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContentZh is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContentZh requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContentZh: %w", err)
	}
	return oldValue.ContentZh, nil
}

// ClearContentZh clears the value of the "content_zh" field.
func (m *ExpertMutation) ClearContentZh() {
	m.content_zh = nil
	m.clearedFields[expert.FieldContentZh] = struct{}{}
}

// ContentZhCleared returns if the "content_zh" field was cleared in this mutation.
func (m *ExpertMutation) ContentZhCleared() bool {
	_, ok := m.clearedFields[expert.FieldContentZh]
	return ok
}

// ResetContentZh resets all changes to the "content_zh" field.
func (m *ExpertMutation) ResetContentZh() {
	m.content_zh = nil
	delete(m.clearedFields, expert.FieldContentZh)
}

// SetContentEn sets the "content_en" field.
func (m *ExpertMutation) SetContentEn(s string) {
	m.content_en = &s
}

// ContentEn returns the value of the "content_en" field in the mutation.
func (m *ExpertMutation) ContentEn() (r string, exists bool) {
	v := m.content_en
	if v == nil {
		return
	}
	return *v, true
}

// OldContentEn returns the old "content_en" field's value of the Expert entity.
// If the Expert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExpertMutation) OldContentEn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContentEn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContentEn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContentEn: %w", err)
	}
	return oldValue.ContentEn, nil
}

// ClearContentEn clears the value of the "content_en" field.
func (m *ExpertMutation) ClearContentEn() {
	m.content_en = nil
	m.clearedFields[expert.FieldContentEn] = struct{}{}
}

// ContentEnCleared returns if the "content_en" field was cleared in this mutation.
func (m *ExpertMutation) ContentEnCleared() bool {
	_, ok := m.clearedFields[expert.FieldContentEn]
	return ok
}

// ResetContentEn resets all changes to the "content_en" field.
func (m *ExpertMutation) ResetContentEn() {
	m.content_en = nil
	delete(m.clearedFields, expert.FieldContentEn)
}

// SetContentRu sets the "content_ru" field.
func (m *ExpertMutation) SetContentRu(s string) {
	m.content_ru = &s
}

// ContentRu returns the value of the "content_ru" field in the mutation.
func (m *ExpertMutation) ContentRu() (r string, exists bool) {
	v := m.content_ru
	if v == nil {
		return
	}
	return *v, true
}

// OldContentRu returns the old "content_ru" field's value of the Expert entity.
// If the Expert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExpertMutation) OldContentRu(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContentRu is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContentRu requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContentRu: %w", err)
	}
	return oldValue.ContentRu, nil
}

// ClearContentRu clears the value of the "content_ru" field.
func (m *ExpertMutation) ClearContentRu() {
	m.content_ru = nil
	m.clearedFields[expert.FieldContentRu] = struct{}{}
}

// ContentRuCleared returns if the "content_ru" field was cleared in this mutation.
func (m *ExpertMutation) ContentRuCleared() bool {
	_, ok := m.clearedFields[expert.FieldContentRu]
	return ok
}

// ResetContentRu resets all changes to the "content_ru" field.
func (m *ExpertMutation) ResetContentRu() {
	m.content_ru = nil
	delete(m.clearedFields, expert.FieldContentRu)
}

// SetContentKk sets the "content_kk" field.
func (m *ExpertMutation) SetContentKk(s string) {
	m.content_kk = &s
}

// ContentKk returns the value of the "content_kk" field in the mutation.
func (m *ExpertMutation) ContentKk() (r string, exists bool) {
	v := m.content_kk
	if v == nil {
		return
	}
	return *v, true
}

// OldContentKk returns the old "content_kk" field's value of the Expert entity.
// If the Expert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExpertMutation) OldContentKk(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContentKk is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContentKk requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContentKk: %w", err)
	}
	return oldValue.ContentKk, nil
}

// ClearContentKk clears the value of the "content_kk" field.
func (m *ExpertMutation) ClearContentKk() {
	m.content_kk = nil
	m.clearedFields[expert.FieldContentKk] = struct{}{}
}

// ContentKkCleared returns if the "content_kk" field was cleared in this mutation.
func (m *ExpertMutation) ContentKkCleared() bool {
	_, ok := m.clearedFields[expert.FieldContentKk]
	return ok
}

// ResetContentKk resets all changes to the "content_kk" field.
func (m *ExpertMutation) ResetContentKk() {
	m.content_kk = nil
	delete(m.clearedFields, expert.FieldContentKk)
}

// SetCoverURL sets the "cover_url" field.
func (m *ExpertMutation) SetCoverURL(s string) {
	m.cover_url = &s
}

// CoverURL returns the value of the "cover_url" field in the mutation.
func (m *ExpertMutation) CoverURL() (r string, exists bool) {
	v := m.cover_url
	if v == nil {
		return
	}
	return *v, true
}

// OldCoverURL returns the old "cover_url" field's value of the Expert entity.
// If the Expert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExpertMutation) OldCoverURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoverURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoverURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoverURL: %w", err)
	}
	return oldValue.CoverURL, nil
}

// ClearCoverURL clears the value of the "cover_url" field.
func (m *ExpertMutation) ClearCoverURL() {
	m.cover_url = nil
	m.clearedFields[expert.FieldCoverURL] = struct{}{}
}

// CoverURLCleared returns if the "cover_url" field was cleared in this mutation.
func (m *ExpertMutation) CoverURLCleared() bool {
	_, ok := m.clearedFields[expert.FieldCoverURL]
	return ok
}

// ResetCoverURL resets all changes to the "cover_url" field.
func (m *ExpertMutation) ResetCoverURL() {
	m.cover_url = nil
	delete(m.clearedFields, expert.FieldCoverURL)
}

// Where appends a list predicates to the ExpertMutation builder.
func (m *ExpertMutation) Where(ps ...predicate.Expert) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ExpertMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ExpertMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Expert, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ExpertMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ExpertMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Expert).
func (m *ExpertMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ExpertMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.created_at != nil {
		fields = append(fields, expert.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, expert.FieldUpdatedAt)
	}
	if m.status != nil {
		fields = append(fields, expert.FieldStatus)
	}
	if m.sort != nil {
		fields = append(fields, expert.FieldSort)
	}
	if m.name_zh != nil {
		fields = append(fields, expert.FieldNameZh)
	}
	if m.name_en != nil {
		fields = append(fields, expert.FieldNameEn)
	}
	if m.name_ru != nil {
		fields = append(fields, expert.FieldNameRu)
	}
	if m.name_kk != nil {
		fields = append(fields, expert.FieldNameKk)
	}
	if m.content_zh != nil {
		fields = append(fields, expert.FieldContentZh)
	}
	if m.content_en != nil {
		fields = append(fields, expert.FieldContentEn)
	}
	if m.content_ru != nil {
		fields = append(fields, expert.FieldContentRu)
	}
	if m.content_kk != nil {
		fields = append(fields, expert.FieldContentKk)
	}
	if m.cover_url != nil {
		fields = append(fields, expert.FieldCoverURL)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ExpertMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case expert.FieldCreatedAt:
		return m.CreatedAt()
	case expert.FieldUpdatedAt:
		return m.UpdatedAt()
	case expert.FieldStatus:
		return m.Status()
	case expert.FieldSort:
		return m.Sort()
	case expert.FieldNameZh:
		return m.NameZh()
	case expert.FieldNameEn:
		return m.NameEn()
	case expert.FieldNameRu:
		return m.NameRu()
	case expert.FieldNameKk:
		return m.NameKk()
	case expert.FieldContentZh:
		return m.ContentZh()
	case expert.FieldContentEn:
		return m.ContentEn()
	case expert.FieldContentRu:
		return m.ContentRu()
	case expert.FieldContentKk:
		return m.ContentKk()
	case expert.FieldCoverURL:
		return m.CoverURL()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ExpertMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case expert.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case expert.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case expert.FieldStatus:
		return m.OldStatus(ctx)
	case expert.FieldSort:
		return m.OldSort(ctx)
	case expert.FieldNameZh:
		return m.OldNameZh(ctx)
	case expert.FieldNameEn:
		return m.OldNameEn(ctx)
	case expert.FieldNameRu:
		return m.OldNameRu(ctx)
	case expert.FieldNameKk:
		return m.OldNameKk(ctx)
	case expert.FieldContentZh:
		return m.OldContentZh(ctx)
	case expert.FieldContentEn:
		return m.OldContentEn(ctx)
	case expert.FieldContentRu:
		return m.OldContentRu(ctx)
	case expert.FieldContentKk:
		return m.OldContentKk(ctx)
	case expert.FieldCoverURL:
		return m.OldCoverURL(ctx)
	}
	return nil, fmt.Errorf("unknown Expert field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExpertMutation) SetField(name string, value ent.Value) error {
	switch name {
	case expert.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case expert.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case expert.FieldStatus:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case expert.FieldSort:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSort(v)
		return nil
	case expert.FieldNameZh:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameZh(v)
		return nil
	case expert.FieldNameEn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameEn(v)
		return nil
	case expert.FieldNameRu:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameRu(v)
		return nil
	case expert.FieldNameKk:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameKk(v)
		return nil
	case expert.FieldContentZh:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContentZh(v)
		return nil
	case expert.FieldContentEn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContentEn(v)
		return nil
	case expert.FieldContentRu:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContentRu(v)
		return nil
	case expert.FieldContentKk:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContentKk(v)
		return nil
	case expert.FieldCoverURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoverURL(v)
		return nil
	}
	return fmt.Errorf("unknown Expert field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ExpertMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, expert.FieldStatus)
	}
	if m.addsort != nil {
		fields = append(fields, expert.FieldSort)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ExpertMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case expert.FieldStatus:
		return m.AddedStatus()
	case expert.FieldSort:
		return m.AddedSort()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExpertMutation) AddField(name string, value ent.Value) error {
	switch name {
	case expert.FieldStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	case expert.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSort(v)
		return nil
	}
	return fmt.Errorf("unknown Expert numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ExpertMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(expert.FieldStatus) {
		fields = append(fields, expert.FieldStatus)
	}
	if m.FieldCleared(expert.FieldNameZh) {
		fields = append(fields, expert.FieldNameZh)
	}
	if m.FieldCleared(expert.FieldNameEn) {
		fields = append(fields, expert.FieldNameEn)
	}
	if m.FieldCleared(expert.FieldNameRu) {
		fields = append(fields, expert.FieldNameRu)
	}
	if m.FieldCleared(expert.FieldNameKk) {
		fields = append(fields, expert.FieldNameKk)
	}
	if m.FieldCleared(expert.FieldContentZh) {
		fields = append(fields, expert.FieldContentZh)
	}
	if m.FieldCleared(expert.FieldContentEn) {
		fields = append(fields, expert.FieldContentEn)
	}
	if m.FieldCleared(expert.FieldContentRu) {
		fields = append(fields, expert.FieldContentRu)
	}
	if m.FieldCleared(expert.FieldContentKk) {
		fields = append(fields, expert.FieldContentKk)
	}
	if m.FieldCleared(expert.FieldCoverURL) {
		fields = append(fields, expert.FieldCoverURL)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ExpertMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ExpertMutation) ClearField(name string) error {
	switch name {
	case expert.FieldStatus:
		m.ClearStatus()
		return nil
	case expert.FieldNameZh:
		m.ClearNameZh()
		return nil
	case expert.FieldNameEn:
		m.ClearNameEn()
		return nil
	case expert.FieldNameRu:
		m.ClearNameRu()
		return nil
	case expert.FieldNameKk:
		m.ClearNameKk()
		return nil
	case expert.FieldContentZh:
		m.ClearContentZh()
		return nil
	case expert.FieldContentEn:
		m.ClearContentEn()
		return nil
	case expert.FieldContentRu:
		m.ClearContentRu()
		return nil
	case expert.FieldContentKk:
		m.ClearContentKk()
		return nil
	case expert.FieldCoverURL:
		m.ClearCoverURL()
		return nil
	}
	return fmt.Errorf("unknown Expert nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ExpertMutation) ResetField(name string) error {
	switch name {
	case expert.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case expert.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case expert.FieldStatus:
		m.ResetStatus()
		return nil
	case expert.FieldSort:
		m.ResetSort()
		return nil
	case expert.FieldNameZh:
		m.ResetNameZh()
		return nil
	case expert.FieldNameEn:
		m.ResetNameEn()
		return nil
	case expert.FieldNameRu:
		m.ResetNameRu()
		return nil
	case expert.FieldNameKk:
		m.ResetNameKk()
		return nil
	case expert.FieldContentZh:
		m.ResetContentZh()
		return nil
	case expert.FieldContentEn:
		m.ResetContentEn()
		return nil
	case expert.FieldContentRu:
		m.ResetContentRu()
		return nil
	case expert.FieldContentKk:
		m.ResetContentKk()
		return nil
	case expert.FieldCoverURL:
		m.ResetCoverURL()
		return nil
	}
	return fmt.Errorf("unknown Expert field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ExpertMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ExpertMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ExpertMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ExpertMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ExpertMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ExpertMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ExpertMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Expert unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ExpertMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Expert edge %s", name)
}

// MedicalRecordMutation represents an operation that mutates the MedicalRecord nodes in the graph.
type MedicalRecordMutation struct {
	config
	op                     Op
	typ                    string
	id                     *uuid.UUID
	created_at             *time.Time
	updated_at             *time.Time
	patient_name           *string
	gender                 *int32
	addgender              *int32
	age                    *int32
	addage                 *int32
	id_card_number         *string
	phone_number           *string
	chief_complaint        *string
	present_illness        *string
	past_history           *string
	smoking_history        *int32
	addsmoking_history     *int32
	drinking_history       *int32
	adddrinking_history    *int32
	allergy_history        *int32
	addallergy_history     *int32
	heart_rate             *int32
	addheart_rate          *int32
	blood_pressure         *string
	oxygen_saturation      *float64
	addoxygen_saturation   *float64
	blood_glucose          *float64
	addblood_glucose       *float64
	weight                 *float64
	addweight              *float64
	waist_circumference    *float64
	addwaist_circumference *float64
	body_fat               *float64
	addbody_fat            *float64
	diagnosis              *string
	diet_therapy           *int32
	adddiet_therapy        *int32
	exercise_therapy       *int32
	addexercise_therapy    *int32
	medication_therapy     *int32
	addmedication_therapy  *int32
	treatment_plan         *string
	doctor_id              *string
	appointment_id         *string
	remarks                *string
	user_id                *string
	clearedFields          map[string]struct{}
	done                   bool
	oldValue               func(context.Context) (*MedicalRecord, error)
	predicates             []predicate.MedicalRecord
}

var _ ent.Mutation = (*MedicalRecordMutation)(nil)

// medicalrecordOption allows management of the mutation configuration using functional options.
type medicalrecordOption func(*MedicalRecordMutation)

// newMedicalRecordMutation creates new mutation for the MedicalRecord entity.
func newMedicalRecordMutation(c config, op Op, opts ...medicalrecordOption) *MedicalRecordMutation {
	m := &MedicalRecordMutation{
		config:        c,
		op:            op,
		typ:           TypeMedicalRecord,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMedicalRecordID sets the ID field of the mutation.
func withMedicalRecordID(id uuid.UUID) medicalrecordOption {
	return func(m *MedicalRecordMutation) {
		var (
			err   error
			once  sync.Once
			value *MedicalRecord
		)
		m.oldValue = func(ctx context.Context) (*MedicalRecord, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MedicalRecord.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMedicalRecord sets the old MedicalRecord of the mutation.
func withMedicalRecord(node *MedicalRecord) medicalrecordOption {
	return func(m *MedicalRecordMutation) {
		m.oldValue = func(context.Context) (*MedicalRecord, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MedicalRecordMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MedicalRecordMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of MedicalRecord entities.
func (m *MedicalRecordMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MedicalRecordMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MedicalRecordMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MedicalRecord.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *MedicalRecordMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MedicalRecordMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the MedicalRecord entity.
// If the MedicalRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedicalRecordMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MedicalRecordMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *MedicalRecordMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *MedicalRecordMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the MedicalRecord entity.
// If the MedicalRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedicalRecordMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *MedicalRecordMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetPatientName sets the "patient_name" field.
func (m *MedicalRecordMutation) SetPatientName(s string) {
	m.patient_name = &s
}

// PatientName returns the value of the "patient_name" field in the mutation.
func (m *MedicalRecordMutation) PatientName() (r string, exists bool) {
	v := m.patient_name
	if v == nil {
		return
	}
	return *v, true
}

// OldPatientName returns the old "patient_name" field's value of the MedicalRecord entity.
// If the MedicalRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedicalRecordMutation) OldPatientName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPatientName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPatientName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPatientName: %w", err)
	}
	return oldValue.PatientName, nil
}

// ResetPatientName resets all changes to the "patient_name" field.
func (m *MedicalRecordMutation) ResetPatientName() {
	m.patient_name = nil
}

// SetGender sets the "gender" field.
func (m *MedicalRecordMutation) SetGender(i int32) {
	m.gender = &i
	m.addgender = nil
}

// Gender returns the value of the "gender" field in the mutation.
func (m *MedicalRecordMutation) Gender() (r int32, exists bool) {
	v := m.gender
	if v == nil {
		return
	}
	return *v, true
}

// OldGender returns the old "gender" field's value of the MedicalRecord entity.
// If the MedicalRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedicalRecordMutation) OldGender(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGender: %w", err)
	}
	return oldValue.Gender, nil
}

// AddGender adds i to the "gender" field.
func (m *MedicalRecordMutation) AddGender(i int32) {
	if m.addgender != nil {
		*m.addgender += i
	} else {
		m.addgender = &i
	}
}

// AddedGender returns the value that was added to the "gender" field in this mutation.
func (m *MedicalRecordMutation) AddedGender() (r int32, exists bool) {
	v := m.addgender
	if v == nil {
		return
	}
	return *v, true
}

// ResetGender resets all changes to the "gender" field.
func (m *MedicalRecordMutation) ResetGender() {
	m.gender = nil
	m.addgender = nil
}

// SetAge sets the "age" field.
func (m *MedicalRecordMutation) SetAge(i int32) {
	m.age = &i
	m.addage = nil
}

// Age returns the value of the "age" field in the mutation.
func (m *MedicalRecordMutation) Age() (r int32, exists bool) {
	v := m.age
	if v == nil {
		return
	}
	return *v, true
}

// OldAge returns the old "age" field's value of the MedicalRecord entity.
// If the MedicalRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedicalRecordMutation) OldAge(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAge is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAge: %w", err)
	}
	return oldValue.Age, nil
}

// AddAge adds i to the "age" field.
func (m *MedicalRecordMutation) AddAge(i int32) {
	if m.addage != nil {
		*m.addage += i
	} else {
		m.addage = &i
	}
}

// AddedAge returns the value that was added to the "age" field in this mutation.
func (m *MedicalRecordMutation) AddedAge() (r int32, exists bool) {
	v := m.addage
	if v == nil {
		return
	}
	return *v, true
}

// ResetAge resets all changes to the "age" field.
func (m *MedicalRecordMutation) ResetAge() {
	m.age = nil
	m.addage = nil
}

// SetIDCardNumber sets the "id_card_number" field.
func (m *MedicalRecordMutation) SetIDCardNumber(s string) {
	m.id_card_number = &s
}

// IDCardNumber returns the value of the "id_card_number" field in the mutation.
func (m *MedicalRecordMutation) IDCardNumber() (r string, exists bool) {
	v := m.id_card_number
	if v == nil {
		return
	}
	return *v, true
}

// OldIDCardNumber returns the old "id_card_number" field's value of the MedicalRecord entity.
// If the MedicalRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedicalRecordMutation) OldIDCardNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIDCardNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIDCardNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIDCardNumber: %w", err)
	}
	return oldValue.IDCardNumber, nil
}

// ClearIDCardNumber clears the value of the "id_card_number" field.
func (m *MedicalRecordMutation) ClearIDCardNumber() {
	m.id_card_number = nil
	m.clearedFields[medicalrecord.FieldIDCardNumber] = struct{}{}
}

// IDCardNumberCleared returns if the "id_card_number" field was cleared in this mutation.
func (m *MedicalRecordMutation) IDCardNumberCleared() bool {
	_, ok := m.clearedFields[medicalrecord.FieldIDCardNumber]
	return ok
}

// ResetIDCardNumber resets all changes to the "id_card_number" field.
func (m *MedicalRecordMutation) ResetIDCardNumber() {
	m.id_card_number = nil
	delete(m.clearedFields, medicalrecord.FieldIDCardNumber)
}

// SetPhoneNumber sets the "phone_number" field.
func (m *MedicalRecordMutation) SetPhoneNumber(s string) {
	m.phone_number = &s
}

// PhoneNumber returns the value of the "phone_number" field in the mutation.
func (m *MedicalRecordMutation) PhoneNumber() (r string, exists bool) {
	v := m.phone_number
	if v == nil {
		return
	}
	return *v, true
}

// OldPhoneNumber returns the old "phone_number" field's value of the MedicalRecord entity.
// If the MedicalRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedicalRecordMutation) OldPhoneNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhoneNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhoneNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhoneNumber: %w", err)
	}
	return oldValue.PhoneNumber, nil
}

// ResetPhoneNumber resets all changes to the "phone_number" field.
func (m *MedicalRecordMutation) ResetPhoneNumber() {
	m.phone_number = nil
}

// SetChiefComplaint sets the "chief_complaint" field.
func (m *MedicalRecordMutation) SetChiefComplaint(s string) {
	m.chief_complaint = &s
}

// ChiefComplaint returns the value of the "chief_complaint" field in the mutation.
func (m *MedicalRecordMutation) ChiefComplaint() (r string, exists bool) {
	v := m.chief_complaint
	if v == nil {
		return
	}
	return *v, true
}

// OldChiefComplaint returns the old "chief_complaint" field's value of the MedicalRecord entity.
// If the MedicalRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedicalRecordMutation) OldChiefComplaint(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChiefComplaint is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChiefComplaint requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChiefComplaint: %w", err)
	}
	return oldValue.ChiefComplaint, nil
}

// ClearChiefComplaint clears the value of the "chief_complaint" field.
func (m *MedicalRecordMutation) ClearChiefComplaint() {
	m.chief_complaint = nil
	m.clearedFields[medicalrecord.FieldChiefComplaint] = struct{}{}
}

// ChiefComplaintCleared returns if the "chief_complaint" field was cleared in this mutation.
func (m *MedicalRecordMutation) ChiefComplaintCleared() bool {
	_, ok := m.clearedFields[medicalrecord.FieldChiefComplaint]
	return ok
}

// ResetChiefComplaint resets all changes to the "chief_complaint" field.
func (m *MedicalRecordMutation) ResetChiefComplaint() {
	m.chief_complaint = nil
	delete(m.clearedFields, medicalrecord.FieldChiefComplaint)
}

// SetPresentIllness sets the "present_illness" field.
func (m *MedicalRecordMutation) SetPresentIllness(s string) {
	m.present_illness = &s
}

// PresentIllness returns the value of the "present_illness" field in the mutation.
func (m *MedicalRecordMutation) PresentIllness() (r string, exists bool) {
	v := m.present_illness
	if v == nil {
		return
	}
	return *v, true
}

// OldPresentIllness returns the old "present_illness" field's value of the MedicalRecord entity.
// If the MedicalRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedicalRecordMutation) OldPresentIllness(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPresentIllness is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPresentIllness requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPresentIllness: %w", err)
	}
	return oldValue.PresentIllness, nil
}

// ClearPresentIllness clears the value of the "present_illness" field.
func (m *MedicalRecordMutation) ClearPresentIllness() {
	m.present_illness = nil
	m.clearedFields[medicalrecord.FieldPresentIllness] = struct{}{}
}

// PresentIllnessCleared returns if the "present_illness" field was cleared in this mutation.
func (m *MedicalRecordMutation) PresentIllnessCleared() bool {
	_, ok := m.clearedFields[medicalrecord.FieldPresentIllness]
	return ok
}

// ResetPresentIllness resets all changes to the "present_illness" field.
func (m *MedicalRecordMutation) ResetPresentIllness() {
	m.present_illness = nil
	delete(m.clearedFields, medicalrecord.FieldPresentIllness)
}

// SetPastHistory sets the "past_history" field.
func (m *MedicalRecordMutation) SetPastHistory(s string) {
	m.past_history = &s
}

// PastHistory returns the value of the "past_history" field in the mutation.
func (m *MedicalRecordMutation) PastHistory() (r string, exists bool) {
	v := m.past_history
	if v == nil {
		return
	}
	return *v, true
}

// OldPastHistory returns the old "past_history" field's value of the MedicalRecord entity.
// If the MedicalRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedicalRecordMutation) OldPastHistory(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPastHistory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPastHistory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPastHistory: %w", err)
	}
	return oldValue.PastHistory, nil
}

// ClearPastHistory clears the value of the "past_history" field.
func (m *MedicalRecordMutation) ClearPastHistory() {
	m.past_history = nil
	m.clearedFields[medicalrecord.FieldPastHistory] = struct{}{}
}

// PastHistoryCleared returns if the "past_history" field was cleared in this mutation.
func (m *MedicalRecordMutation) PastHistoryCleared() bool {
	_, ok := m.clearedFields[medicalrecord.FieldPastHistory]
	return ok
}

// ResetPastHistory resets all changes to the "past_history" field.
func (m *MedicalRecordMutation) ResetPastHistory() {
	m.past_history = nil
	delete(m.clearedFields, medicalrecord.FieldPastHistory)
}

// SetSmokingHistory sets the "smoking_history" field.
func (m *MedicalRecordMutation) SetSmokingHistory(i int32) {
	m.smoking_history = &i
	m.addsmoking_history = nil
}

// SmokingHistory returns the value of the "smoking_history" field in the mutation.
func (m *MedicalRecordMutation) SmokingHistory() (r int32, exists bool) {
	v := m.smoking_history
	if v == nil {
		return
	}
	return *v, true
}

// OldSmokingHistory returns the old "smoking_history" field's value of the MedicalRecord entity.
// If the MedicalRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedicalRecordMutation) OldSmokingHistory(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSmokingHistory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSmokingHistory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSmokingHistory: %w", err)
	}
	return oldValue.SmokingHistory, nil
}

// AddSmokingHistory adds i to the "smoking_history" field.
func (m *MedicalRecordMutation) AddSmokingHistory(i int32) {
	if m.addsmoking_history != nil {
		*m.addsmoking_history += i
	} else {
		m.addsmoking_history = &i
	}
}

// AddedSmokingHistory returns the value that was added to the "smoking_history" field in this mutation.
func (m *MedicalRecordMutation) AddedSmokingHistory() (r int32, exists bool) {
	v := m.addsmoking_history
	if v == nil {
		return
	}
	return *v, true
}

// ClearSmokingHistory clears the value of the "smoking_history" field.
func (m *MedicalRecordMutation) ClearSmokingHistory() {
	m.smoking_history = nil
	m.addsmoking_history = nil
	m.clearedFields[medicalrecord.FieldSmokingHistory] = struct{}{}
}

// SmokingHistoryCleared returns if the "smoking_history" field was cleared in this mutation.
func (m *MedicalRecordMutation) SmokingHistoryCleared() bool {
	_, ok := m.clearedFields[medicalrecord.FieldSmokingHistory]
	return ok
}

// ResetSmokingHistory resets all changes to the "smoking_history" field.
func (m *MedicalRecordMutation) ResetSmokingHistory() {
	m.smoking_history = nil
	m.addsmoking_history = nil
	delete(m.clearedFields, medicalrecord.FieldSmokingHistory)
}

// SetDrinkingHistory sets the "drinking_history" field.
func (m *MedicalRecordMutation) SetDrinkingHistory(i int32) {
	m.drinking_history = &i
	m.adddrinking_history = nil
}

// DrinkingHistory returns the value of the "drinking_history" field in the mutation.
func (m *MedicalRecordMutation) DrinkingHistory() (r int32, exists bool) {
	v := m.drinking_history
	if v == nil {
		return
	}
	return *v, true
}

// OldDrinkingHistory returns the old "drinking_history" field's value of the MedicalRecord entity.
// If the MedicalRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedicalRecordMutation) OldDrinkingHistory(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDrinkingHistory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDrinkingHistory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDrinkingHistory: %w", err)
	}
	return oldValue.DrinkingHistory, nil
}

// AddDrinkingHistory adds i to the "drinking_history" field.
func (m *MedicalRecordMutation) AddDrinkingHistory(i int32) {
	if m.adddrinking_history != nil {
		*m.adddrinking_history += i
	} else {
		m.adddrinking_history = &i
	}
}

// AddedDrinkingHistory returns the value that was added to the "drinking_history" field in this mutation.
func (m *MedicalRecordMutation) AddedDrinkingHistory() (r int32, exists bool) {
	v := m.adddrinking_history
	if v == nil {
		return
	}
	return *v, true
}

// ClearDrinkingHistory clears the value of the "drinking_history" field.
func (m *MedicalRecordMutation) ClearDrinkingHistory() {
	m.drinking_history = nil
	m.adddrinking_history = nil
	m.clearedFields[medicalrecord.FieldDrinkingHistory] = struct{}{}
}

// DrinkingHistoryCleared returns if the "drinking_history" field was cleared in this mutation.
func (m *MedicalRecordMutation) DrinkingHistoryCleared() bool {
	_, ok := m.clearedFields[medicalrecord.FieldDrinkingHistory]
	return ok
}

// ResetDrinkingHistory resets all changes to the "drinking_history" field.
func (m *MedicalRecordMutation) ResetDrinkingHistory() {
	m.drinking_history = nil
	m.adddrinking_history = nil
	delete(m.clearedFields, medicalrecord.FieldDrinkingHistory)
}

// SetAllergyHistory sets the "allergy_history" field.
func (m *MedicalRecordMutation) SetAllergyHistory(i int32) {
	m.allergy_history = &i
	m.addallergy_history = nil
}

// AllergyHistory returns the value of the "allergy_history" field in the mutation.
func (m *MedicalRecordMutation) AllergyHistory() (r int32, exists bool) {
	v := m.allergy_history
	if v == nil {
		return
	}
	return *v, true
}

// OldAllergyHistory returns the old "allergy_history" field's value of the MedicalRecord entity.
// If the MedicalRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedicalRecordMutation) OldAllergyHistory(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAllergyHistory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAllergyHistory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAllergyHistory: %w", err)
	}
	return oldValue.AllergyHistory, nil
}

// AddAllergyHistory adds i to the "allergy_history" field.
func (m *MedicalRecordMutation) AddAllergyHistory(i int32) {
	if m.addallergy_history != nil {
		*m.addallergy_history += i
	} else {
		m.addallergy_history = &i
	}
}

// AddedAllergyHistory returns the value that was added to the "allergy_history" field in this mutation.
func (m *MedicalRecordMutation) AddedAllergyHistory() (r int32, exists bool) {
	v := m.addallergy_history
	if v == nil {
		return
	}
	return *v, true
}

// ClearAllergyHistory clears the value of the "allergy_history" field.
func (m *MedicalRecordMutation) ClearAllergyHistory() {
	m.allergy_history = nil
	m.addallergy_history = nil
	m.clearedFields[medicalrecord.FieldAllergyHistory] = struct{}{}
}

// AllergyHistoryCleared returns if the "allergy_history" field was cleared in this mutation.
func (m *MedicalRecordMutation) AllergyHistoryCleared() bool {
	_, ok := m.clearedFields[medicalrecord.FieldAllergyHistory]
	return ok
}

// ResetAllergyHistory resets all changes to the "allergy_history" field.
func (m *MedicalRecordMutation) ResetAllergyHistory() {
	m.allergy_history = nil
	m.addallergy_history = nil
	delete(m.clearedFields, medicalrecord.FieldAllergyHistory)
}

// SetHeartRate sets the "heart_rate" field.
func (m *MedicalRecordMutation) SetHeartRate(i int32) {
	m.heart_rate = &i
	m.addheart_rate = nil
}

// HeartRate returns the value of the "heart_rate" field in the mutation.
func (m *MedicalRecordMutation) HeartRate() (r int32, exists bool) {
	v := m.heart_rate
	if v == nil {
		return
	}
	return *v, true
}

// OldHeartRate returns the old "heart_rate" field's value of the MedicalRecord entity.
// If the MedicalRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedicalRecordMutation) OldHeartRate(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHeartRate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHeartRate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHeartRate: %w", err)
	}
	return oldValue.HeartRate, nil
}

// AddHeartRate adds i to the "heart_rate" field.
func (m *MedicalRecordMutation) AddHeartRate(i int32) {
	if m.addheart_rate != nil {
		*m.addheart_rate += i
	} else {
		m.addheart_rate = &i
	}
}

// AddedHeartRate returns the value that was added to the "heart_rate" field in this mutation.
func (m *MedicalRecordMutation) AddedHeartRate() (r int32, exists bool) {
	v := m.addheart_rate
	if v == nil {
		return
	}
	return *v, true
}

// ClearHeartRate clears the value of the "heart_rate" field.
func (m *MedicalRecordMutation) ClearHeartRate() {
	m.heart_rate = nil
	m.addheart_rate = nil
	m.clearedFields[medicalrecord.FieldHeartRate] = struct{}{}
}

// HeartRateCleared returns if the "heart_rate" field was cleared in this mutation.
func (m *MedicalRecordMutation) HeartRateCleared() bool {
	_, ok := m.clearedFields[medicalrecord.FieldHeartRate]
	return ok
}

// ResetHeartRate resets all changes to the "heart_rate" field.
func (m *MedicalRecordMutation) ResetHeartRate() {
	m.heart_rate = nil
	m.addheart_rate = nil
	delete(m.clearedFields, medicalrecord.FieldHeartRate)
}

// SetBloodPressure sets the "blood_pressure" field.
func (m *MedicalRecordMutation) SetBloodPressure(s string) {
	m.blood_pressure = &s
}

// BloodPressure returns the value of the "blood_pressure" field in the mutation.
func (m *MedicalRecordMutation) BloodPressure() (r string, exists bool) {
	v := m.blood_pressure
	if v == nil {
		return
	}
	return *v, true
}

// OldBloodPressure returns the old "blood_pressure" field's value of the MedicalRecord entity.
// If the MedicalRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedicalRecordMutation) OldBloodPressure(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBloodPressure is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBloodPressure requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBloodPressure: %w", err)
	}
	return oldValue.BloodPressure, nil
}

// ClearBloodPressure clears the value of the "blood_pressure" field.
func (m *MedicalRecordMutation) ClearBloodPressure() {
	m.blood_pressure = nil
	m.clearedFields[medicalrecord.FieldBloodPressure] = struct{}{}
}

// BloodPressureCleared returns if the "blood_pressure" field was cleared in this mutation.
func (m *MedicalRecordMutation) BloodPressureCleared() bool {
	_, ok := m.clearedFields[medicalrecord.FieldBloodPressure]
	return ok
}

// ResetBloodPressure resets all changes to the "blood_pressure" field.
func (m *MedicalRecordMutation) ResetBloodPressure() {
	m.blood_pressure = nil
	delete(m.clearedFields, medicalrecord.FieldBloodPressure)
}

// SetOxygenSaturation sets the "oxygen_saturation" field.
func (m *MedicalRecordMutation) SetOxygenSaturation(f float64) {
	m.oxygen_saturation = &f
	m.addoxygen_saturation = nil
}

// OxygenSaturation returns the value of the "oxygen_saturation" field in the mutation.
func (m *MedicalRecordMutation) OxygenSaturation() (r float64, exists bool) {
	v := m.oxygen_saturation
	if v == nil {
		return
	}
	return *v, true
}

// OldOxygenSaturation returns the old "oxygen_saturation" field's value of the MedicalRecord entity.
// If the MedicalRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedicalRecordMutation) OldOxygenSaturation(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOxygenSaturation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOxygenSaturation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOxygenSaturation: %w", err)
	}
	return oldValue.OxygenSaturation, nil
}

// AddOxygenSaturation adds f to the "oxygen_saturation" field.
func (m *MedicalRecordMutation) AddOxygenSaturation(f float64) {
	if m.addoxygen_saturation != nil {
		*m.addoxygen_saturation += f
	} else {
		m.addoxygen_saturation = &f
	}
}

// AddedOxygenSaturation returns the value that was added to the "oxygen_saturation" field in this mutation.
func (m *MedicalRecordMutation) AddedOxygenSaturation() (r float64, exists bool) {
	v := m.addoxygen_saturation
	if v == nil {
		return
	}
	return *v, true
}

// ClearOxygenSaturation clears the value of the "oxygen_saturation" field.
func (m *MedicalRecordMutation) ClearOxygenSaturation() {
	m.oxygen_saturation = nil
	m.addoxygen_saturation = nil
	m.clearedFields[medicalrecord.FieldOxygenSaturation] = struct{}{}
}

// OxygenSaturationCleared returns if the "oxygen_saturation" field was cleared in this mutation.
func (m *MedicalRecordMutation) OxygenSaturationCleared() bool {
	_, ok := m.clearedFields[medicalrecord.FieldOxygenSaturation]
	return ok
}

// ResetOxygenSaturation resets all changes to the "oxygen_saturation" field.
func (m *MedicalRecordMutation) ResetOxygenSaturation() {
	m.oxygen_saturation = nil
	m.addoxygen_saturation = nil
	delete(m.clearedFields, medicalrecord.FieldOxygenSaturation)
}

// SetBloodGlucose sets the "blood_glucose" field.
func (m *MedicalRecordMutation) SetBloodGlucose(f float64) {
	m.blood_glucose = &f
	m.addblood_glucose = nil
}

// BloodGlucose returns the value of the "blood_glucose" field in the mutation.
func (m *MedicalRecordMutation) BloodGlucose() (r float64, exists bool) {
	v := m.blood_glucose
	if v == nil {
		return
	}
	return *v, true
}

// OldBloodGlucose returns the old "blood_glucose" field's value of the MedicalRecord entity.
// If the MedicalRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedicalRecordMutation) OldBloodGlucose(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBloodGlucose is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBloodGlucose requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBloodGlucose: %w", err)
	}
	return oldValue.BloodGlucose, nil
}

// AddBloodGlucose adds f to the "blood_glucose" field.
func (m *MedicalRecordMutation) AddBloodGlucose(f float64) {
	if m.addblood_glucose != nil {
		*m.addblood_glucose += f
	} else {
		m.addblood_glucose = &f
	}
}

// AddedBloodGlucose returns the value that was added to the "blood_glucose" field in this mutation.
func (m *MedicalRecordMutation) AddedBloodGlucose() (r float64, exists bool) {
	v := m.addblood_glucose
	if v == nil {
		return
	}
	return *v, true
}

// ClearBloodGlucose clears the value of the "blood_glucose" field.
func (m *MedicalRecordMutation) ClearBloodGlucose() {
	m.blood_glucose = nil
	m.addblood_glucose = nil
	m.clearedFields[medicalrecord.FieldBloodGlucose] = struct{}{}
}

// BloodGlucoseCleared returns if the "blood_glucose" field was cleared in this mutation.
func (m *MedicalRecordMutation) BloodGlucoseCleared() bool {
	_, ok := m.clearedFields[medicalrecord.FieldBloodGlucose]
	return ok
}

// ResetBloodGlucose resets all changes to the "blood_glucose" field.
func (m *MedicalRecordMutation) ResetBloodGlucose() {
	m.blood_glucose = nil
	m.addblood_glucose = nil
	delete(m.clearedFields, medicalrecord.FieldBloodGlucose)
}

// SetWeight sets the "weight" field.
func (m *MedicalRecordMutation) SetWeight(f float64) {
	m.weight = &f
	m.addweight = nil
}

// Weight returns the value of the "weight" field in the mutation.
func (m *MedicalRecordMutation) Weight() (r float64, exists bool) {
	v := m.weight
	if v == nil {
		return
	}
	return *v, true
}

// OldWeight returns the old "weight" field's value of the MedicalRecord entity.
// If the MedicalRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedicalRecordMutation) OldWeight(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWeight: %w", err)
	}
	return oldValue.Weight, nil
}

// AddWeight adds f to the "weight" field.
func (m *MedicalRecordMutation) AddWeight(f float64) {
	if m.addweight != nil {
		*m.addweight += f
	} else {
		m.addweight = &f
	}
}

// AddedWeight returns the value that was added to the "weight" field in this mutation.
func (m *MedicalRecordMutation) AddedWeight() (r float64, exists bool) {
	v := m.addweight
	if v == nil {
		return
	}
	return *v, true
}

// ClearWeight clears the value of the "weight" field.
func (m *MedicalRecordMutation) ClearWeight() {
	m.weight = nil
	m.addweight = nil
	m.clearedFields[medicalrecord.FieldWeight] = struct{}{}
}

// WeightCleared returns if the "weight" field was cleared in this mutation.
func (m *MedicalRecordMutation) WeightCleared() bool {
	_, ok := m.clearedFields[medicalrecord.FieldWeight]
	return ok
}

// ResetWeight resets all changes to the "weight" field.
func (m *MedicalRecordMutation) ResetWeight() {
	m.weight = nil
	m.addweight = nil
	delete(m.clearedFields, medicalrecord.FieldWeight)
}

// SetWaistCircumference sets the "waist_circumference" field.
func (m *MedicalRecordMutation) SetWaistCircumference(f float64) {
	m.waist_circumference = &f
	m.addwaist_circumference = nil
}

// WaistCircumference returns the value of the "waist_circumference" field in the mutation.
func (m *MedicalRecordMutation) WaistCircumference() (r float64, exists bool) {
	v := m.waist_circumference
	if v == nil {
		return
	}
	return *v, true
}

// OldWaistCircumference returns the old "waist_circumference" field's value of the MedicalRecord entity.
// If the MedicalRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedicalRecordMutation) OldWaistCircumference(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWaistCircumference is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWaistCircumference requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWaistCircumference: %w", err)
	}
	return oldValue.WaistCircumference, nil
}

// AddWaistCircumference adds f to the "waist_circumference" field.
func (m *MedicalRecordMutation) AddWaistCircumference(f float64) {
	if m.addwaist_circumference != nil {
		*m.addwaist_circumference += f
	} else {
		m.addwaist_circumference = &f
	}
}

// AddedWaistCircumference returns the value that was added to the "waist_circumference" field in this mutation.
func (m *MedicalRecordMutation) AddedWaistCircumference() (r float64, exists bool) {
	v := m.addwaist_circumference
	if v == nil {
		return
	}
	return *v, true
}

// ClearWaistCircumference clears the value of the "waist_circumference" field.
func (m *MedicalRecordMutation) ClearWaistCircumference() {
	m.waist_circumference = nil
	m.addwaist_circumference = nil
	m.clearedFields[medicalrecord.FieldWaistCircumference] = struct{}{}
}

// WaistCircumferenceCleared returns if the "waist_circumference" field was cleared in this mutation.
func (m *MedicalRecordMutation) WaistCircumferenceCleared() bool {
	_, ok := m.clearedFields[medicalrecord.FieldWaistCircumference]
	return ok
}

// ResetWaistCircumference resets all changes to the "waist_circumference" field.
func (m *MedicalRecordMutation) ResetWaistCircumference() {
	m.waist_circumference = nil
	m.addwaist_circumference = nil
	delete(m.clearedFields, medicalrecord.FieldWaistCircumference)
}

// SetBodyFat sets the "body_fat" field.
func (m *MedicalRecordMutation) SetBodyFat(f float64) {
	m.body_fat = &f
	m.addbody_fat = nil
}

// BodyFat returns the value of the "body_fat" field in the mutation.
func (m *MedicalRecordMutation) BodyFat() (r float64, exists bool) {
	v := m.body_fat
	if v == nil {
		return
	}
	return *v, true
}

// OldBodyFat returns the old "body_fat" field's value of the MedicalRecord entity.
// If the MedicalRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedicalRecordMutation) OldBodyFat(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBodyFat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBodyFat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBodyFat: %w", err)
	}
	return oldValue.BodyFat, nil
}

// AddBodyFat adds f to the "body_fat" field.
func (m *MedicalRecordMutation) AddBodyFat(f float64) {
	if m.addbody_fat != nil {
		*m.addbody_fat += f
	} else {
		m.addbody_fat = &f
	}
}

// AddedBodyFat returns the value that was added to the "body_fat" field in this mutation.
func (m *MedicalRecordMutation) AddedBodyFat() (r float64, exists bool) {
	v := m.addbody_fat
	if v == nil {
		return
	}
	return *v, true
}

// ClearBodyFat clears the value of the "body_fat" field.
func (m *MedicalRecordMutation) ClearBodyFat() {
	m.body_fat = nil
	m.addbody_fat = nil
	m.clearedFields[medicalrecord.FieldBodyFat] = struct{}{}
}

// BodyFatCleared returns if the "body_fat" field was cleared in this mutation.
func (m *MedicalRecordMutation) BodyFatCleared() bool {
	_, ok := m.clearedFields[medicalrecord.FieldBodyFat]
	return ok
}

// ResetBodyFat resets all changes to the "body_fat" field.
func (m *MedicalRecordMutation) ResetBodyFat() {
	m.body_fat = nil
	m.addbody_fat = nil
	delete(m.clearedFields, medicalrecord.FieldBodyFat)
}

// SetDiagnosis sets the "diagnosis" field.
func (m *MedicalRecordMutation) SetDiagnosis(s string) {
	m.diagnosis = &s
}

// Diagnosis returns the value of the "diagnosis" field in the mutation.
func (m *MedicalRecordMutation) Diagnosis() (r string, exists bool) {
	v := m.diagnosis
	if v == nil {
		return
	}
	return *v, true
}

// OldDiagnosis returns the old "diagnosis" field's value of the MedicalRecord entity.
// If the MedicalRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedicalRecordMutation) OldDiagnosis(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDiagnosis is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDiagnosis requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDiagnosis: %w", err)
	}
	return oldValue.Diagnosis, nil
}

// ClearDiagnosis clears the value of the "diagnosis" field.
func (m *MedicalRecordMutation) ClearDiagnosis() {
	m.diagnosis = nil
	m.clearedFields[medicalrecord.FieldDiagnosis] = struct{}{}
}

// DiagnosisCleared returns if the "diagnosis" field was cleared in this mutation.
func (m *MedicalRecordMutation) DiagnosisCleared() bool {
	_, ok := m.clearedFields[medicalrecord.FieldDiagnosis]
	return ok
}

// ResetDiagnosis resets all changes to the "diagnosis" field.
func (m *MedicalRecordMutation) ResetDiagnosis() {
	m.diagnosis = nil
	delete(m.clearedFields, medicalrecord.FieldDiagnosis)
}

// SetDietTherapy sets the "diet_therapy" field.
func (m *MedicalRecordMutation) SetDietTherapy(i int32) {
	m.diet_therapy = &i
	m.adddiet_therapy = nil
}

// DietTherapy returns the value of the "diet_therapy" field in the mutation.
func (m *MedicalRecordMutation) DietTherapy() (r int32, exists bool) {
	v := m.diet_therapy
	if v == nil {
		return
	}
	return *v, true
}

// OldDietTherapy returns the old "diet_therapy" field's value of the MedicalRecord entity.
// If the MedicalRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedicalRecordMutation) OldDietTherapy(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDietTherapy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDietTherapy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDietTherapy: %w", err)
	}
	return oldValue.DietTherapy, nil
}

// AddDietTherapy adds i to the "diet_therapy" field.
func (m *MedicalRecordMutation) AddDietTherapy(i int32) {
	if m.adddiet_therapy != nil {
		*m.adddiet_therapy += i
	} else {
		m.adddiet_therapy = &i
	}
}

// AddedDietTherapy returns the value that was added to the "diet_therapy" field in this mutation.
func (m *MedicalRecordMutation) AddedDietTherapy() (r int32, exists bool) {
	v := m.adddiet_therapy
	if v == nil {
		return
	}
	return *v, true
}

// ClearDietTherapy clears the value of the "diet_therapy" field.
func (m *MedicalRecordMutation) ClearDietTherapy() {
	m.diet_therapy = nil
	m.adddiet_therapy = nil
	m.clearedFields[medicalrecord.FieldDietTherapy] = struct{}{}
}

// DietTherapyCleared returns if the "diet_therapy" field was cleared in this mutation.
func (m *MedicalRecordMutation) DietTherapyCleared() bool {
	_, ok := m.clearedFields[medicalrecord.FieldDietTherapy]
	return ok
}

// ResetDietTherapy resets all changes to the "diet_therapy" field.
func (m *MedicalRecordMutation) ResetDietTherapy() {
	m.diet_therapy = nil
	m.adddiet_therapy = nil
	delete(m.clearedFields, medicalrecord.FieldDietTherapy)
}

// SetExerciseTherapy sets the "exercise_therapy" field.
func (m *MedicalRecordMutation) SetExerciseTherapy(i int32) {
	m.exercise_therapy = &i
	m.addexercise_therapy = nil
}

// ExerciseTherapy returns the value of the "exercise_therapy" field in the mutation.
func (m *MedicalRecordMutation) ExerciseTherapy() (r int32, exists bool) {
	v := m.exercise_therapy
	if v == nil {
		return
	}
	return *v, true
}

// OldExerciseTherapy returns the old "exercise_therapy" field's value of the MedicalRecord entity.
// If the MedicalRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedicalRecordMutation) OldExerciseTherapy(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExerciseTherapy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExerciseTherapy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExerciseTherapy: %w", err)
	}
	return oldValue.ExerciseTherapy, nil
}

// AddExerciseTherapy adds i to the "exercise_therapy" field.
func (m *MedicalRecordMutation) AddExerciseTherapy(i int32) {
	if m.addexercise_therapy != nil {
		*m.addexercise_therapy += i
	} else {
		m.addexercise_therapy = &i
	}
}

// AddedExerciseTherapy returns the value that was added to the "exercise_therapy" field in this mutation.
func (m *MedicalRecordMutation) AddedExerciseTherapy() (r int32, exists bool) {
	v := m.addexercise_therapy
	if v == nil {
		return
	}
	return *v, true
}

// ClearExerciseTherapy clears the value of the "exercise_therapy" field.
func (m *MedicalRecordMutation) ClearExerciseTherapy() {
	m.exercise_therapy = nil
	m.addexercise_therapy = nil
	m.clearedFields[medicalrecord.FieldExerciseTherapy] = struct{}{}
}

// ExerciseTherapyCleared returns if the "exercise_therapy" field was cleared in this mutation.
func (m *MedicalRecordMutation) ExerciseTherapyCleared() bool {
	_, ok := m.clearedFields[medicalrecord.FieldExerciseTherapy]
	return ok
}

// ResetExerciseTherapy resets all changes to the "exercise_therapy" field.
func (m *MedicalRecordMutation) ResetExerciseTherapy() {
	m.exercise_therapy = nil
	m.addexercise_therapy = nil
	delete(m.clearedFields, medicalrecord.FieldExerciseTherapy)
}

// SetMedicationTherapy sets the "medication_therapy" field.
func (m *MedicalRecordMutation) SetMedicationTherapy(i int32) {
	m.medication_therapy = &i
	m.addmedication_therapy = nil
}

// MedicationTherapy returns the value of the "medication_therapy" field in the mutation.
func (m *MedicalRecordMutation) MedicationTherapy() (r int32, exists bool) {
	v := m.medication_therapy
	if v == nil {
		return
	}
	return *v, true
}

// OldMedicationTherapy returns the old "medication_therapy" field's value of the MedicalRecord entity.
// If the MedicalRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedicalRecordMutation) OldMedicationTherapy(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMedicationTherapy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMedicationTherapy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMedicationTherapy: %w", err)
	}
	return oldValue.MedicationTherapy, nil
}

// AddMedicationTherapy adds i to the "medication_therapy" field.
func (m *MedicalRecordMutation) AddMedicationTherapy(i int32) {
	if m.addmedication_therapy != nil {
		*m.addmedication_therapy += i
	} else {
		m.addmedication_therapy = &i
	}
}

// AddedMedicationTherapy returns the value that was added to the "medication_therapy" field in this mutation.
func (m *MedicalRecordMutation) AddedMedicationTherapy() (r int32, exists bool) {
	v := m.addmedication_therapy
	if v == nil {
		return
	}
	return *v, true
}

// ClearMedicationTherapy clears the value of the "medication_therapy" field.
func (m *MedicalRecordMutation) ClearMedicationTherapy() {
	m.medication_therapy = nil
	m.addmedication_therapy = nil
	m.clearedFields[medicalrecord.FieldMedicationTherapy] = struct{}{}
}

// MedicationTherapyCleared returns if the "medication_therapy" field was cleared in this mutation.
func (m *MedicalRecordMutation) MedicationTherapyCleared() bool {
	_, ok := m.clearedFields[medicalrecord.FieldMedicationTherapy]
	return ok
}

// ResetMedicationTherapy resets all changes to the "medication_therapy" field.
func (m *MedicalRecordMutation) ResetMedicationTherapy() {
	m.medication_therapy = nil
	m.addmedication_therapy = nil
	delete(m.clearedFields, medicalrecord.FieldMedicationTherapy)
}

// SetTreatmentPlan sets the "treatment_plan" field.
func (m *MedicalRecordMutation) SetTreatmentPlan(s string) {
	m.treatment_plan = &s
}

// TreatmentPlan returns the value of the "treatment_plan" field in the mutation.
func (m *MedicalRecordMutation) TreatmentPlan() (r string, exists bool) {
	v := m.treatment_plan
	if v == nil {
		return
	}
	return *v, true
}

// OldTreatmentPlan returns the old "treatment_plan" field's value of the MedicalRecord entity.
// If the MedicalRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedicalRecordMutation) OldTreatmentPlan(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTreatmentPlan is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTreatmentPlan requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTreatmentPlan: %w", err)
	}
	return oldValue.TreatmentPlan, nil
}

// ClearTreatmentPlan clears the value of the "treatment_plan" field.
func (m *MedicalRecordMutation) ClearTreatmentPlan() {
	m.treatment_plan = nil
	m.clearedFields[medicalrecord.FieldTreatmentPlan] = struct{}{}
}

// TreatmentPlanCleared returns if the "treatment_plan" field was cleared in this mutation.
func (m *MedicalRecordMutation) TreatmentPlanCleared() bool {
	_, ok := m.clearedFields[medicalrecord.FieldTreatmentPlan]
	return ok
}

// ResetTreatmentPlan resets all changes to the "treatment_plan" field.
func (m *MedicalRecordMutation) ResetTreatmentPlan() {
	m.treatment_plan = nil
	delete(m.clearedFields, medicalrecord.FieldTreatmentPlan)
}

// SetDoctorID sets the "doctor_id" field.
func (m *MedicalRecordMutation) SetDoctorID(s string) {
	m.doctor_id = &s
}

// DoctorID returns the value of the "doctor_id" field in the mutation.
func (m *MedicalRecordMutation) DoctorID() (r string, exists bool) {
	v := m.doctor_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDoctorID returns the old "doctor_id" field's value of the MedicalRecord entity.
// If the MedicalRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedicalRecordMutation) OldDoctorID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDoctorID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDoctorID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDoctorID: %w", err)
	}
	return oldValue.DoctorID, nil
}

// ClearDoctorID clears the value of the "doctor_id" field.
func (m *MedicalRecordMutation) ClearDoctorID() {
	m.doctor_id = nil
	m.clearedFields[medicalrecord.FieldDoctorID] = struct{}{}
}

// DoctorIDCleared returns if the "doctor_id" field was cleared in this mutation.
func (m *MedicalRecordMutation) DoctorIDCleared() bool {
	_, ok := m.clearedFields[medicalrecord.FieldDoctorID]
	return ok
}

// ResetDoctorID resets all changes to the "doctor_id" field.
func (m *MedicalRecordMutation) ResetDoctorID() {
	m.doctor_id = nil
	delete(m.clearedFields, medicalrecord.FieldDoctorID)
}

// SetAppointmentID sets the "appointment_id" field.
func (m *MedicalRecordMutation) SetAppointmentID(s string) {
	m.appointment_id = &s
}

// AppointmentID returns the value of the "appointment_id" field in the mutation.
func (m *MedicalRecordMutation) AppointmentID() (r string, exists bool) {
	v := m.appointment_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppointmentID returns the old "appointment_id" field's value of the MedicalRecord entity.
// If the MedicalRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedicalRecordMutation) OldAppointmentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppointmentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppointmentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppointmentID: %w", err)
	}
	return oldValue.AppointmentID, nil
}

// ClearAppointmentID clears the value of the "appointment_id" field.
func (m *MedicalRecordMutation) ClearAppointmentID() {
	m.appointment_id = nil
	m.clearedFields[medicalrecord.FieldAppointmentID] = struct{}{}
}

// AppointmentIDCleared returns if the "appointment_id" field was cleared in this mutation.
func (m *MedicalRecordMutation) AppointmentIDCleared() bool {
	_, ok := m.clearedFields[medicalrecord.FieldAppointmentID]
	return ok
}

// ResetAppointmentID resets all changes to the "appointment_id" field.
func (m *MedicalRecordMutation) ResetAppointmentID() {
	m.appointment_id = nil
	delete(m.clearedFields, medicalrecord.FieldAppointmentID)
}

// SetRemarks sets the "remarks" field.
func (m *MedicalRecordMutation) SetRemarks(s string) {
	m.remarks = &s
}

// Remarks returns the value of the "remarks" field in the mutation.
func (m *MedicalRecordMutation) Remarks() (r string, exists bool) {
	v := m.remarks
	if v == nil {
		return
	}
	return *v, true
}

// OldRemarks returns the old "remarks" field's value of the MedicalRecord entity.
// If the MedicalRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedicalRecordMutation) OldRemarks(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemarks is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemarks requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemarks: %w", err)
	}
	return oldValue.Remarks, nil
}

// ClearRemarks clears the value of the "remarks" field.
func (m *MedicalRecordMutation) ClearRemarks() {
	m.remarks = nil
	m.clearedFields[medicalrecord.FieldRemarks] = struct{}{}
}

// RemarksCleared returns if the "remarks" field was cleared in this mutation.
func (m *MedicalRecordMutation) RemarksCleared() bool {
	_, ok := m.clearedFields[medicalrecord.FieldRemarks]
	return ok
}

// ResetRemarks resets all changes to the "remarks" field.
func (m *MedicalRecordMutation) ResetRemarks() {
	m.remarks = nil
	delete(m.clearedFields, medicalrecord.FieldRemarks)
}

// SetUserID sets the "user_id" field.
func (m *MedicalRecordMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *MedicalRecordMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the MedicalRecord entity.
// If the MedicalRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedicalRecordMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *MedicalRecordMutation) ClearUserID() {
	m.user_id = nil
	m.clearedFields[medicalrecord.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *MedicalRecordMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[medicalrecord.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *MedicalRecordMutation) ResetUserID() {
	m.user_id = nil
	delete(m.clearedFields, medicalrecord.FieldUserID)
}

// Where appends a list predicates to the MedicalRecordMutation builder.
func (m *MedicalRecordMutation) Where(ps ...predicate.MedicalRecord) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MedicalRecordMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MedicalRecordMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.MedicalRecord, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MedicalRecordMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MedicalRecordMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (MedicalRecord).
func (m *MedicalRecordMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MedicalRecordMutation) Fields() []string {
	fields := make([]string, 0, 29)
	if m.created_at != nil {
		fields = append(fields, medicalrecord.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, medicalrecord.FieldUpdatedAt)
	}
	if m.patient_name != nil {
		fields = append(fields, medicalrecord.FieldPatientName)
	}
	if m.gender != nil {
		fields = append(fields, medicalrecord.FieldGender)
	}
	if m.age != nil {
		fields = append(fields, medicalrecord.FieldAge)
	}
	if m.id_card_number != nil {
		fields = append(fields, medicalrecord.FieldIDCardNumber)
	}
	if m.phone_number != nil {
		fields = append(fields, medicalrecord.FieldPhoneNumber)
	}
	if m.chief_complaint != nil {
		fields = append(fields, medicalrecord.FieldChiefComplaint)
	}
	if m.present_illness != nil {
		fields = append(fields, medicalrecord.FieldPresentIllness)
	}
	if m.past_history != nil {
		fields = append(fields, medicalrecord.FieldPastHistory)
	}
	if m.smoking_history != nil {
		fields = append(fields, medicalrecord.FieldSmokingHistory)
	}
	if m.drinking_history != nil {
		fields = append(fields, medicalrecord.FieldDrinkingHistory)
	}
	if m.allergy_history != nil {
		fields = append(fields, medicalrecord.FieldAllergyHistory)
	}
	if m.heart_rate != nil {
		fields = append(fields, medicalrecord.FieldHeartRate)
	}
	if m.blood_pressure != nil {
		fields = append(fields, medicalrecord.FieldBloodPressure)
	}
	if m.oxygen_saturation != nil {
		fields = append(fields, medicalrecord.FieldOxygenSaturation)
	}
	if m.blood_glucose != nil {
		fields = append(fields, medicalrecord.FieldBloodGlucose)
	}
	if m.weight != nil {
		fields = append(fields, medicalrecord.FieldWeight)
	}
	if m.waist_circumference != nil {
		fields = append(fields, medicalrecord.FieldWaistCircumference)
	}
	if m.body_fat != nil {
		fields = append(fields, medicalrecord.FieldBodyFat)
	}
	if m.diagnosis != nil {
		fields = append(fields, medicalrecord.FieldDiagnosis)
	}
	if m.diet_therapy != nil {
		fields = append(fields, medicalrecord.FieldDietTherapy)
	}
	if m.exercise_therapy != nil {
		fields = append(fields, medicalrecord.FieldExerciseTherapy)
	}
	if m.medication_therapy != nil {
		fields = append(fields, medicalrecord.FieldMedicationTherapy)
	}
	if m.treatment_plan != nil {
		fields = append(fields, medicalrecord.FieldTreatmentPlan)
	}
	if m.doctor_id != nil {
		fields = append(fields, medicalrecord.FieldDoctorID)
	}
	if m.appointment_id != nil {
		fields = append(fields, medicalrecord.FieldAppointmentID)
	}
	if m.remarks != nil {
		fields = append(fields, medicalrecord.FieldRemarks)
	}
	if m.user_id != nil {
		fields = append(fields, medicalrecord.FieldUserID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MedicalRecordMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case medicalrecord.FieldCreatedAt:
		return m.CreatedAt()
	case medicalrecord.FieldUpdatedAt:
		return m.UpdatedAt()
	case medicalrecord.FieldPatientName:
		return m.PatientName()
	case medicalrecord.FieldGender:
		return m.Gender()
	case medicalrecord.FieldAge:
		return m.Age()
	case medicalrecord.FieldIDCardNumber:
		return m.IDCardNumber()
	case medicalrecord.FieldPhoneNumber:
		return m.PhoneNumber()
	case medicalrecord.FieldChiefComplaint:
		return m.ChiefComplaint()
	case medicalrecord.FieldPresentIllness:
		return m.PresentIllness()
	case medicalrecord.FieldPastHistory:
		return m.PastHistory()
	case medicalrecord.FieldSmokingHistory:
		return m.SmokingHistory()
	case medicalrecord.FieldDrinkingHistory:
		return m.DrinkingHistory()
	case medicalrecord.FieldAllergyHistory:
		return m.AllergyHistory()
	case medicalrecord.FieldHeartRate:
		return m.HeartRate()
	case medicalrecord.FieldBloodPressure:
		return m.BloodPressure()
	case medicalrecord.FieldOxygenSaturation:
		return m.OxygenSaturation()
	case medicalrecord.FieldBloodGlucose:
		return m.BloodGlucose()
	case medicalrecord.FieldWeight:
		return m.Weight()
	case medicalrecord.FieldWaistCircumference:
		return m.WaistCircumference()
	case medicalrecord.FieldBodyFat:
		return m.BodyFat()
	case medicalrecord.FieldDiagnosis:
		return m.Diagnosis()
	case medicalrecord.FieldDietTherapy:
		return m.DietTherapy()
	case medicalrecord.FieldExerciseTherapy:
		return m.ExerciseTherapy()
	case medicalrecord.FieldMedicationTherapy:
		return m.MedicationTherapy()
	case medicalrecord.FieldTreatmentPlan:
		return m.TreatmentPlan()
	case medicalrecord.FieldDoctorID:
		return m.DoctorID()
	case medicalrecord.FieldAppointmentID:
		return m.AppointmentID()
	case medicalrecord.FieldRemarks:
		return m.Remarks()
	case medicalrecord.FieldUserID:
		return m.UserID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MedicalRecordMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case medicalrecord.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case medicalrecord.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case medicalrecord.FieldPatientName:
		return m.OldPatientName(ctx)
	case medicalrecord.FieldGender:
		return m.OldGender(ctx)
	case medicalrecord.FieldAge:
		return m.OldAge(ctx)
	case medicalrecord.FieldIDCardNumber:
		return m.OldIDCardNumber(ctx)
	case medicalrecord.FieldPhoneNumber:
		return m.OldPhoneNumber(ctx)
	case medicalrecord.FieldChiefComplaint:
		return m.OldChiefComplaint(ctx)
	case medicalrecord.FieldPresentIllness:
		return m.OldPresentIllness(ctx)
	case medicalrecord.FieldPastHistory:
		return m.OldPastHistory(ctx)
	case medicalrecord.FieldSmokingHistory:
		return m.OldSmokingHistory(ctx)
	case medicalrecord.FieldDrinkingHistory:
		return m.OldDrinkingHistory(ctx)
	case medicalrecord.FieldAllergyHistory:
		return m.OldAllergyHistory(ctx)
	case medicalrecord.FieldHeartRate:
		return m.OldHeartRate(ctx)
	case medicalrecord.FieldBloodPressure:
		return m.OldBloodPressure(ctx)
	case medicalrecord.FieldOxygenSaturation:
		return m.OldOxygenSaturation(ctx)
	case medicalrecord.FieldBloodGlucose:
		return m.OldBloodGlucose(ctx)
	case medicalrecord.FieldWeight:
		return m.OldWeight(ctx)
	case medicalrecord.FieldWaistCircumference:
		return m.OldWaistCircumference(ctx)
	case medicalrecord.FieldBodyFat:
		return m.OldBodyFat(ctx)
	case medicalrecord.FieldDiagnosis:
		return m.OldDiagnosis(ctx)
	case medicalrecord.FieldDietTherapy:
		return m.OldDietTherapy(ctx)
	case medicalrecord.FieldExerciseTherapy:
		return m.OldExerciseTherapy(ctx)
	case medicalrecord.FieldMedicationTherapy:
		return m.OldMedicationTherapy(ctx)
	case medicalrecord.FieldTreatmentPlan:
		return m.OldTreatmentPlan(ctx)
	case medicalrecord.FieldDoctorID:
		return m.OldDoctorID(ctx)
	case medicalrecord.FieldAppointmentID:
		return m.OldAppointmentID(ctx)
	case medicalrecord.FieldRemarks:
		return m.OldRemarks(ctx)
	case medicalrecord.FieldUserID:
		return m.OldUserID(ctx)
	}
	return nil, fmt.Errorf("unknown MedicalRecord field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MedicalRecordMutation) SetField(name string, value ent.Value) error {
	switch name {
	case medicalrecord.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case medicalrecord.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case medicalrecord.FieldPatientName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPatientName(v)
		return nil
	case medicalrecord.FieldGender:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGender(v)
		return nil
	case medicalrecord.FieldAge:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAge(v)
		return nil
	case medicalrecord.FieldIDCardNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIDCardNumber(v)
		return nil
	case medicalrecord.FieldPhoneNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhoneNumber(v)
		return nil
	case medicalrecord.FieldChiefComplaint:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChiefComplaint(v)
		return nil
	case medicalrecord.FieldPresentIllness:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPresentIllness(v)
		return nil
	case medicalrecord.FieldPastHistory:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPastHistory(v)
		return nil
	case medicalrecord.FieldSmokingHistory:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSmokingHistory(v)
		return nil
	case medicalrecord.FieldDrinkingHistory:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDrinkingHistory(v)
		return nil
	case medicalrecord.FieldAllergyHistory:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAllergyHistory(v)
		return nil
	case medicalrecord.FieldHeartRate:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHeartRate(v)
		return nil
	case medicalrecord.FieldBloodPressure:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBloodPressure(v)
		return nil
	case medicalrecord.FieldOxygenSaturation:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOxygenSaturation(v)
		return nil
	case medicalrecord.FieldBloodGlucose:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBloodGlucose(v)
		return nil
	case medicalrecord.FieldWeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWeight(v)
		return nil
	case medicalrecord.FieldWaistCircumference:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWaistCircumference(v)
		return nil
	case medicalrecord.FieldBodyFat:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBodyFat(v)
		return nil
	case medicalrecord.FieldDiagnosis:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDiagnosis(v)
		return nil
	case medicalrecord.FieldDietTherapy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDietTherapy(v)
		return nil
	case medicalrecord.FieldExerciseTherapy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExerciseTherapy(v)
		return nil
	case medicalrecord.FieldMedicationTherapy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMedicationTherapy(v)
		return nil
	case medicalrecord.FieldTreatmentPlan:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTreatmentPlan(v)
		return nil
	case medicalrecord.FieldDoctorID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDoctorID(v)
		return nil
	case medicalrecord.FieldAppointmentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppointmentID(v)
		return nil
	case medicalrecord.FieldRemarks:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemarks(v)
		return nil
	case medicalrecord.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	}
	return fmt.Errorf("unknown MedicalRecord field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MedicalRecordMutation) AddedFields() []string {
	var fields []string
	if m.addgender != nil {
		fields = append(fields, medicalrecord.FieldGender)
	}
	if m.addage != nil {
		fields = append(fields, medicalrecord.FieldAge)
	}
	if m.addsmoking_history != nil {
		fields = append(fields, medicalrecord.FieldSmokingHistory)
	}
	if m.adddrinking_history != nil {
		fields = append(fields, medicalrecord.FieldDrinkingHistory)
	}
	if m.addallergy_history != nil {
		fields = append(fields, medicalrecord.FieldAllergyHistory)
	}
	if m.addheart_rate != nil {
		fields = append(fields, medicalrecord.FieldHeartRate)
	}
	if m.addoxygen_saturation != nil {
		fields = append(fields, medicalrecord.FieldOxygenSaturation)
	}
	if m.addblood_glucose != nil {
		fields = append(fields, medicalrecord.FieldBloodGlucose)
	}
	if m.addweight != nil {
		fields = append(fields, medicalrecord.FieldWeight)
	}
	if m.addwaist_circumference != nil {
		fields = append(fields, medicalrecord.FieldWaistCircumference)
	}
	if m.addbody_fat != nil {
		fields = append(fields, medicalrecord.FieldBodyFat)
	}
	if m.adddiet_therapy != nil {
		fields = append(fields, medicalrecord.FieldDietTherapy)
	}
	if m.addexercise_therapy != nil {
		fields = append(fields, medicalrecord.FieldExerciseTherapy)
	}
	if m.addmedication_therapy != nil {
		fields = append(fields, medicalrecord.FieldMedicationTherapy)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MedicalRecordMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case medicalrecord.FieldGender:
		return m.AddedGender()
	case medicalrecord.FieldAge:
		return m.AddedAge()
	case medicalrecord.FieldSmokingHistory:
		return m.AddedSmokingHistory()
	case medicalrecord.FieldDrinkingHistory:
		return m.AddedDrinkingHistory()
	case medicalrecord.FieldAllergyHistory:
		return m.AddedAllergyHistory()
	case medicalrecord.FieldHeartRate:
		return m.AddedHeartRate()
	case medicalrecord.FieldOxygenSaturation:
		return m.AddedOxygenSaturation()
	case medicalrecord.FieldBloodGlucose:
		return m.AddedBloodGlucose()
	case medicalrecord.FieldWeight:
		return m.AddedWeight()
	case medicalrecord.FieldWaistCircumference:
		return m.AddedWaistCircumference()
	case medicalrecord.FieldBodyFat:
		return m.AddedBodyFat()
	case medicalrecord.FieldDietTherapy:
		return m.AddedDietTherapy()
	case medicalrecord.FieldExerciseTherapy:
		return m.AddedExerciseTherapy()
	case medicalrecord.FieldMedicationTherapy:
		return m.AddedMedicationTherapy()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MedicalRecordMutation) AddField(name string, value ent.Value) error {
	switch name {
	case medicalrecord.FieldGender:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGender(v)
		return nil
	case medicalrecord.FieldAge:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAge(v)
		return nil
	case medicalrecord.FieldSmokingHistory:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSmokingHistory(v)
		return nil
	case medicalrecord.FieldDrinkingHistory:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDrinkingHistory(v)
		return nil
	case medicalrecord.FieldAllergyHistory:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAllergyHistory(v)
		return nil
	case medicalrecord.FieldHeartRate:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHeartRate(v)
		return nil
	case medicalrecord.FieldOxygenSaturation:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOxygenSaturation(v)
		return nil
	case medicalrecord.FieldBloodGlucose:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBloodGlucose(v)
		return nil
	case medicalrecord.FieldWeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWeight(v)
		return nil
	case medicalrecord.FieldWaistCircumference:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWaistCircumference(v)
		return nil
	case medicalrecord.FieldBodyFat:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBodyFat(v)
		return nil
	case medicalrecord.FieldDietTherapy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDietTherapy(v)
		return nil
	case medicalrecord.FieldExerciseTherapy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddExerciseTherapy(v)
		return nil
	case medicalrecord.FieldMedicationTherapy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMedicationTherapy(v)
		return nil
	}
	return fmt.Errorf("unknown MedicalRecord numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MedicalRecordMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(medicalrecord.FieldIDCardNumber) {
		fields = append(fields, medicalrecord.FieldIDCardNumber)
	}
	if m.FieldCleared(medicalrecord.FieldChiefComplaint) {
		fields = append(fields, medicalrecord.FieldChiefComplaint)
	}
	if m.FieldCleared(medicalrecord.FieldPresentIllness) {
		fields = append(fields, medicalrecord.FieldPresentIllness)
	}
	if m.FieldCleared(medicalrecord.FieldPastHistory) {
		fields = append(fields, medicalrecord.FieldPastHistory)
	}
	if m.FieldCleared(medicalrecord.FieldSmokingHistory) {
		fields = append(fields, medicalrecord.FieldSmokingHistory)
	}
	if m.FieldCleared(medicalrecord.FieldDrinkingHistory) {
		fields = append(fields, medicalrecord.FieldDrinkingHistory)
	}
	if m.FieldCleared(medicalrecord.FieldAllergyHistory) {
		fields = append(fields, medicalrecord.FieldAllergyHistory)
	}
	if m.FieldCleared(medicalrecord.FieldHeartRate) {
		fields = append(fields, medicalrecord.FieldHeartRate)
	}
	if m.FieldCleared(medicalrecord.FieldBloodPressure) {
		fields = append(fields, medicalrecord.FieldBloodPressure)
	}
	if m.FieldCleared(medicalrecord.FieldOxygenSaturation) {
		fields = append(fields, medicalrecord.FieldOxygenSaturation)
	}
	if m.FieldCleared(medicalrecord.FieldBloodGlucose) {
		fields = append(fields, medicalrecord.FieldBloodGlucose)
	}
	if m.FieldCleared(medicalrecord.FieldWeight) {
		fields = append(fields, medicalrecord.FieldWeight)
	}
	if m.FieldCleared(medicalrecord.FieldWaistCircumference) {
		fields = append(fields, medicalrecord.FieldWaistCircumference)
	}
	if m.FieldCleared(medicalrecord.FieldBodyFat) {
		fields = append(fields, medicalrecord.FieldBodyFat)
	}
	if m.FieldCleared(medicalrecord.FieldDiagnosis) {
		fields = append(fields, medicalrecord.FieldDiagnosis)
	}
	if m.FieldCleared(medicalrecord.FieldDietTherapy) {
		fields = append(fields, medicalrecord.FieldDietTherapy)
	}
	if m.FieldCleared(medicalrecord.FieldExerciseTherapy) {
		fields = append(fields, medicalrecord.FieldExerciseTherapy)
	}
	if m.FieldCleared(medicalrecord.FieldMedicationTherapy) {
		fields = append(fields, medicalrecord.FieldMedicationTherapy)
	}
	if m.FieldCleared(medicalrecord.FieldTreatmentPlan) {
		fields = append(fields, medicalrecord.FieldTreatmentPlan)
	}
	if m.FieldCleared(medicalrecord.FieldDoctorID) {
		fields = append(fields, medicalrecord.FieldDoctorID)
	}
	if m.FieldCleared(medicalrecord.FieldAppointmentID) {
		fields = append(fields, medicalrecord.FieldAppointmentID)
	}
	if m.FieldCleared(medicalrecord.FieldRemarks) {
		fields = append(fields, medicalrecord.FieldRemarks)
	}
	if m.FieldCleared(medicalrecord.FieldUserID) {
		fields = append(fields, medicalrecord.FieldUserID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MedicalRecordMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MedicalRecordMutation) ClearField(name string) error {
	switch name {
	case medicalrecord.FieldIDCardNumber:
		m.ClearIDCardNumber()
		return nil
	case medicalrecord.FieldChiefComplaint:
		m.ClearChiefComplaint()
		return nil
	case medicalrecord.FieldPresentIllness:
		m.ClearPresentIllness()
		return nil
	case medicalrecord.FieldPastHistory:
		m.ClearPastHistory()
		return nil
	case medicalrecord.FieldSmokingHistory:
		m.ClearSmokingHistory()
		return nil
	case medicalrecord.FieldDrinkingHistory:
		m.ClearDrinkingHistory()
		return nil
	case medicalrecord.FieldAllergyHistory:
		m.ClearAllergyHistory()
		return nil
	case medicalrecord.FieldHeartRate:
		m.ClearHeartRate()
		return nil
	case medicalrecord.FieldBloodPressure:
		m.ClearBloodPressure()
		return nil
	case medicalrecord.FieldOxygenSaturation:
		m.ClearOxygenSaturation()
		return nil
	case medicalrecord.FieldBloodGlucose:
		m.ClearBloodGlucose()
		return nil
	case medicalrecord.FieldWeight:
		m.ClearWeight()
		return nil
	case medicalrecord.FieldWaistCircumference:
		m.ClearWaistCircumference()
		return nil
	case medicalrecord.FieldBodyFat:
		m.ClearBodyFat()
		return nil
	case medicalrecord.FieldDiagnosis:
		m.ClearDiagnosis()
		return nil
	case medicalrecord.FieldDietTherapy:
		m.ClearDietTherapy()
		return nil
	case medicalrecord.FieldExerciseTherapy:
		m.ClearExerciseTherapy()
		return nil
	case medicalrecord.FieldMedicationTherapy:
		m.ClearMedicationTherapy()
		return nil
	case medicalrecord.FieldTreatmentPlan:
		m.ClearTreatmentPlan()
		return nil
	case medicalrecord.FieldDoctorID:
		m.ClearDoctorID()
		return nil
	case medicalrecord.FieldAppointmentID:
		m.ClearAppointmentID()
		return nil
	case medicalrecord.FieldRemarks:
		m.ClearRemarks()
		return nil
	case medicalrecord.FieldUserID:
		m.ClearUserID()
		return nil
	}
	return fmt.Errorf("unknown MedicalRecord nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MedicalRecordMutation) ResetField(name string) error {
	switch name {
	case medicalrecord.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case medicalrecord.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case medicalrecord.FieldPatientName:
		m.ResetPatientName()
		return nil
	case medicalrecord.FieldGender:
		m.ResetGender()
		return nil
	case medicalrecord.FieldAge:
		m.ResetAge()
		return nil
	case medicalrecord.FieldIDCardNumber:
		m.ResetIDCardNumber()
		return nil
	case medicalrecord.FieldPhoneNumber:
		m.ResetPhoneNumber()
		return nil
	case medicalrecord.FieldChiefComplaint:
		m.ResetChiefComplaint()
		return nil
	case medicalrecord.FieldPresentIllness:
		m.ResetPresentIllness()
		return nil
	case medicalrecord.FieldPastHistory:
		m.ResetPastHistory()
		return nil
	case medicalrecord.FieldSmokingHistory:
		m.ResetSmokingHistory()
		return nil
	case medicalrecord.FieldDrinkingHistory:
		m.ResetDrinkingHistory()
		return nil
	case medicalrecord.FieldAllergyHistory:
		m.ResetAllergyHistory()
		return nil
	case medicalrecord.FieldHeartRate:
		m.ResetHeartRate()
		return nil
	case medicalrecord.FieldBloodPressure:
		m.ResetBloodPressure()
		return nil
	case medicalrecord.FieldOxygenSaturation:
		m.ResetOxygenSaturation()
		return nil
	case medicalrecord.FieldBloodGlucose:
		m.ResetBloodGlucose()
		return nil
	case medicalrecord.FieldWeight:
		m.ResetWeight()
		return nil
	case medicalrecord.FieldWaistCircumference:
		m.ResetWaistCircumference()
		return nil
	case medicalrecord.FieldBodyFat:
		m.ResetBodyFat()
		return nil
	case medicalrecord.FieldDiagnosis:
		m.ResetDiagnosis()
		return nil
	case medicalrecord.FieldDietTherapy:
		m.ResetDietTherapy()
		return nil
	case medicalrecord.FieldExerciseTherapy:
		m.ResetExerciseTherapy()
		return nil
	case medicalrecord.FieldMedicationTherapy:
		m.ResetMedicationTherapy()
		return nil
	case medicalrecord.FieldTreatmentPlan:
		m.ResetTreatmentPlan()
		return nil
	case medicalrecord.FieldDoctorID:
		m.ResetDoctorID()
		return nil
	case medicalrecord.FieldAppointmentID:
		m.ResetAppointmentID()
		return nil
	case medicalrecord.FieldRemarks:
		m.ResetRemarks()
		return nil
	case medicalrecord.FieldUserID:
		m.ResetUserID()
		return nil
	}
	return fmt.Errorf("unknown MedicalRecord field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MedicalRecordMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MedicalRecordMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MedicalRecordMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MedicalRecordMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MedicalRecordMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MedicalRecordMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MedicalRecordMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown MedicalRecord unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MedicalRecordMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown MedicalRecord edge %s", name)
}

// MedicineMutation represents an operation that mutates the Medicine nodes in the graph.
type MedicineMutation struct {
	config
	op             Op
	typ            string
	id             *uint64
	created_at     *time.Time
	updated_at     *time.Time
	status         *uint8
	addstatus      *int8
	sort           *uint32
	addsort        *int32
	name_zh        *string
	name_en        *string
	name_ru        *string
	name_kk        *string
	quantity       *uint32
	addquantity    *int32
	description_zh *string
	description_en *string
	description_ru *string
	description_kk *string
	remarks        *string
	images         *string
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*Medicine, error)
	predicates     []predicate.Medicine
}

var _ ent.Mutation = (*MedicineMutation)(nil)

// medicineOption allows management of the mutation configuration using functional options.
type medicineOption func(*MedicineMutation)

// newMedicineMutation creates new mutation for the Medicine entity.
func newMedicineMutation(c config, op Op, opts ...medicineOption) *MedicineMutation {
	m := &MedicineMutation{
		config:        c,
		op:            op,
		typ:           TypeMedicine,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMedicineID sets the ID field of the mutation.
func withMedicineID(id uint64) medicineOption {
	return func(m *MedicineMutation) {
		var (
			err   error
			once  sync.Once
			value *Medicine
		)
		m.oldValue = func(ctx context.Context) (*Medicine, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Medicine.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMedicine sets the old Medicine of the mutation.
func withMedicine(node *Medicine) medicineOption {
	return func(m *MedicineMutation) {
		m.oldValue = func(context.Context) (*Medicine, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MedicineMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MedicineMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Medicine entities.
func (m *MedicineMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MedicineMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MedicineMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Medicine.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *MedicineMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MedicineMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Medicine entity.
// If the Medicine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedicineMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MedicineMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *MedicineMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *MedicineMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Medicine entity.
// If the Medicine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedicineMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *MedicineMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetStatus sets the "status" field.
func (m *MedicineMutation) SetStatus(u uint8) {
	m.status = &u
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *MedicineMutation) Status() (r uint8, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Medicine entity.
// If the Medicine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedicineMutation) OldStatus(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds u to the "status" field.
func (m *MedicineMutation) AddStatus(u int8) {
	if m.addstatus != nil {
		*m.addstatus += u
	} else {
		m.addstatus = &u
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *MedicineMutation) AddedStatus() (r int8, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ClearStatus clears the value of the "status" field.
func (m *MedicineMutation) ClearStatus() {
	m.status = nil
	m.addstatus = nil
	m.clearedFields[medicine.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *MedicineMutation) StatusCleared() bool {
	_, ok := m.clearedFields[medicine.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *MedicineMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
	delete(m.clearedFields, medicine.FieldStatus)
}

// SetSort sets the "sort" field.
func (m *MedicineMutation) SetSort(u uint32) {
	m.sort = &u
	m.addsort = nil
}

// Sort returns the value of the "sort" field in the mutation.
func (m *MedicineMutation) Sort() (r uint32, exists bool) {
	v := m.sort
	if v == nil {
		return
	}
	return *v, true
}

// OldSort returns the old "sort" field's value of the Medicine entity.
// If the Medicine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedicineMutation) OldSort(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSort: %w", err)
	}
	return oldValue.Sort, nil
}

// AddSort adds u to the "sort" field.
func (m *MedicineMutation) AddSort(u int32) {
	if m.addsort != nil {
		*m.addsort += u
	} else {
		m.addsort = &u
	}
}

// AddedSort returns the value that was added to the "sort" field in this mutation.
func (m *MedicineMutation) AddedSort() (r int32, exists bool) {
	v := m.addsort
	if v == nil {
		return
	}
	return *v, true
}

// ResetSort resets all changes to the "sort" field.
func (m *MedicineMutation) ResetSort() {
	m.sort = nil
	m.addsort = nil
}

// SetNameZh sets the "name_zh" field.
func (m *MedicineMutation) SetNameZh(s string) {
	m.name_zh = &s
}

// NameZh returns the value of the "name_zh" field in the mutation.
func (m *MedicineMutation) NameZh() (r string, exists bool) {
	v := m.name_zh
	if v == nil {
		return
	}
	return *v, true
}

// OldNameZh returns the old "name_zh" field's value of the Medicine entity.
// If the Medicine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedicineMutation) OldNameZh(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNameZh is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNameZh requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameZh: %w", err)
	}
	return oldValue.NameZh, nil
}

// ResetNameZh resets all changes to the "name_zh" field.
func (m *MedicineMutation) ResetNameZh() {
	m.name_zh = nil
}

// SetNameEn sets the "name_en" field.
func (m *MedicineMutation) SetNameEn(s string) {
	m.name_en = &s
}

// NameEn returns the value of the "name_en" field in the mutation.
func (m *MedicineMutation) NameEn() (r string, exists bool) {
	v := m.name_en
	if v == nil {
		return
	}
	return *v, true
}

// OldNameEn returns the old "name_en" field's value of the Medicine entity.
// If the Medicine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedicineMutation) OldNameEn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNameEn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNameEn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameEn: %w", err)
	}
	return oldValue.NameEn, nil
}

// ResetNameEn resets all changes to the "name_en" field.
func (m *MedicineMutation) ResetNameEn() {
	m.name_en = nil
}

// SetNameRu sets the "name_ru" field.
func (m *MedicineMutation) SetNameRu(s string) {
	m.name_ru = &s
}

// NameRu returns the value of the "name_ru" field in the mutation.
func (m *MedicineMutation) NameRu() (r string, exists bool) {
	v := m.name_ru
	if v == nil {
		return
	}
	return *v, true
}

// OldNameRu returns the old "name_ru" field's value of the Medicine entity.
// If the Medicine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedicineMutation) OldNameRu(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNameRu is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNameRu requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameRu: %w", err)
	}
	return oldValue.NameRu, nil
}

// ResetNameRu resets all changes to the "name_ru" field.
func (m *MedicineMutation) ResetNameRu() {
	m.name_ru = nil
}

// SetNameKk sets the "name_kk" field.
func (m *MedicineMutation) SetNameKk(s string) {
	m.name_kk = &s
}

// NameKk returns the value of the "name_kk" field in the mutation.
func (m *MedicineMutation) NameKk() (r string, exists bool) {
	v := m.name_kk
	if v == nil {
		return
	}
	return *v, true
}

// OldNameKk returns the old "name_kk" field's value of the Medicine entity.
// If the Medicine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedicineMutation) OldNameKk(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNameKk is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNameKk requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameKk: %w", err)
	}
	return oldValue.NameKk, nil
}

// ResetNameKk resets all changes to the "name_kk" field.
func (m *MedicineMutation) ResetNameKk() {
	m.name_kk = nil
}

// SetQuantity sets the "quantity" field.
func (m *MedicineMutation) SetQuantity(u uint32) {
	m.quantity = &u
	m.addquantity = nil
}

// Quantity returns the value of the "quantity" field in the mutation.
func (m *MedicineMutation) Quantity() (r uint32, exists bool) {
	v := m.quantity
	if v == nil {
		return
	}
	return *v, true
}

// OldQuantity returns the old "quantity" field's value of the Medicine entity.
// If the Medicine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedicineMutation) OldQuantity(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQuantity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQuantity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuantity: %w", err)
	}
	return oldValue.Quantity, nil
}

// AddQuantity adds u to the "quantity" field.
func (m *MedicineMutation) AddQuantity(u int32) {
	if m.addquantity != nil {
		*m.addquantity += u
	} else {
		m.addquantity = &u
	}
}

// AddedQuantity returns the value that was added to the "quantity" field in this mutation.
func (m *MedicineMutation) AddedQuantity() (r int32, exists bool) {
	v := m.addquantity
	if v == nil {
		return
	}
	return *v, true
}

// ResetQuantity resets all changes to the "quantity" field.
func (m *MedicineMutation) ResetQuantity() {
	m.quantity = nil
	m.addquantity = nil
}

// SetDescriptionZh sets the "description_zh" field.
func (m *MedicineMutation) SetDescriptionZh(s string) {
	m.description_zh = &s
}

// DescriptionZh returns the value of the "description_zh" field in the mutation.
func (m *MedicineMutation) DescriptionZh() (r string, exists bool) {
	v := m.description_zh
	if v == nil {
		return
	}
	return *v, true
}

// OldDescriptionZh returns the old "description_zh" field's value of the Medicine entity.
// If the Medicine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedicineMutation) OldDescriptionZh(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescriptionZh is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescriptionZh requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescriptionZh: %w", err)
	}
	return oldValue.DescriptionZh, nil
}

// ClearDescriptionZh clears the value of the "description_zh" field.
func (m *MedicineMutation) ClearDescriptionZh() {
	m.description_zh = nil
	m.clearedFields[medicine.FieldDescriptionZh] = struct{}{}
}

// DescriptionZhCleared returns if the "description_zh" field was cleared in this mutation.
func (m *MedicineMutation) DescriptionZhCleared() bool {
	_, ok := m.clearedFields[medicine.FieldDescriptionZh]
	return ok
}

// ResetDescriptionZh resets all changes to the "description_zh" field.
func (m *MedicineMutation) ResetDescriptionZh() {
	m.description_zh = nil
	delete(m.clearedFields, medicine.FieldDescriptionZh)
}

// SetDescriptionEn sets the "description_en" field.
func (m *MedicineMutation) SetDescriptionEn(s string) {
	m.description_en = &s
}

// DescriptionEn returns the value of the "description_en" field in the mutation.
func (m *MedicineMutation) DescriptionEn() (r string, exists bool) {
	v := m.description_en
	if v == nil {
		return
	}
	return *v, true
}

// OldDescriptionEn returns the old "description_en" field's value of the Medicine entity.
// If the Medicine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedicineMutation) OldDescriptionEn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescriptionEn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescriptionEn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescriptionEn: %w", err)
	}
	return oldValue.DescriptionEn, nil
}

// ClearDescriptionEn clears the value of the "description_en" field.
func (m *MedicineMutation) ClearDescriptionEn() {
	m.description_en = nil
	m.clearedFields[medicine.FieldDescriptionEn] = struct{}{}
}

// DescriptionEnCleared returns if the "description_en" field was cleared in this mutation.
func (m *MedicineMutation) DescriptionEnCleared() bool {
	_, ok := m.clearedFields[medicine.FieldDescriptionEn]
	return ok
}

// ResetDescriptionEn resets all changes to the "description_en" field.
func (m *MedicineMutation) ResetDescriptionEn() {
	m.description_en = nil
	delete(m.clearedFields, medicine.FieldDescriptionEn)
}

// SetDescriptionRu sets the "description_ru" field.
func (m *MedicineMutation) SetDescriptionRu(s string) {
	m.description_ru = &s
}

// DescriptionRu returns the value of the "description_ru" field in the mutation.
func (m *MedicineMutation) DescriptionRu() (r string, exists bool) {
	v := m.description_ru
	if v == nil {
		return
	}
	return *v, true
}

// OldDescriptionRu returns the old "description_ru" field's value of the Medicine entity.
// If the Medicine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedicineMutation) OldDescriptionRu(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescriptionRu is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescriptionRu requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescriptionRu: %w", err)
	}
	return oldValue.DescriptionRu, nil
}

// ClearDescriptionRu clears the value of the "description_ru" field.
func (m *MedicineMutation) ClearDescriptionRu() {
	m.description_ru = nil
	m.clearedFields[medicine.FieldDescriptionRu] = struct{}{}
}

// DescriptionRuCleared returns if the "description_ru" field was cleared in this mutation.
func (m *MedicineMutation) DescriptionRuCleared() bool {
	_, ok := m.clearedFields[medicine.FieldDescriptionRu]
	return ok
}

// ResetDescriptionRu resets all changes to the "description_ru" field.
func (m *MedicineMutation) ResetDescriptionRu() {
	m.description_ru = nil
	delete(m.clearedFields, medicine.FieldDescriptionRu)
}

// SetDescriptionKk sets the "description_kk" field.
func (m *MedicineMutation) SetDescriptionKk(s string) {
	m.description_kk = &s
}

// DescriptionKk returns the value of the "description_kk" field in the mutation.
func (m *MedicineMutation) DescriptionKk() (r string, exists bool) {
	v := m.description_kk
	if v == nil {
		return
	}
	return *v, true
}

// OldDescriptionKk returns the old "description_kk" field's value of the Medicine entity.
// If the Medicine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedicineMutation) OldDescriptionKk(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescriptionKk is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescriptionKk requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescriptionKk: %w", err)
	}
	return oldValue.DescriptionKk, nil
}

// ClearDescriptionKk clears the value of the "description_kk" field.
func (m *MedicineMutation) ClearDescriptionKk() {
	m.description_kk = nil
	m.clearedFields[medicine.FieldDescriptionKk] = struct{}{}
}

// DescriptionKkCleared returns if the "description_kk" field was cleared in this mutation.
func (m *MedicineMutation) DescriptionKkCleared() bool {
	_, ok := m.clearedFields[medicine.FieldDescriptionKk]
	return ok
}

// ResetDescriptionKk resets all changes to the "description_kk" field.
func (m *MedicineMutation) ResetDescriptionKk() {
	m.description_kk = nil
	delete(m.clearedFields, medicine.FieldDescriptionKk)
}

// SetRemarks sets the "remarks" field.
func (m *MedicineMutation) SetRemarks(s string) {
	m.remarks = &s
}

// Remarks returns the value of the "remarks" field in the mutation.
func (m *MedicineMutation) Remarks() (r string, exists bool) {
	v := m.remarks
	if v == nil {
		return
	}
	return *v, true
}

// OldRemarks returns the old "remarks" field's value of the Medicine entity.
// If the Medicine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedicineMutation) OldRemarks(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemarks is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemarks requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemarks: %w", err)
	}
	return oldValue.Remarks, nil
}

// ClearRemarks clears the value of the "remarks" field.
func (m *MedicineMutation) ClearRemarks() {
	m.remarks = nil
	m.clearedFields[medicine.FieldRemarks] = struct{}{}
}

// RemarksCleared returns if the "remarks" field was cleared in this mutation.
func (m *MedicineMutation) RemarksCleared() bool {
	_, ok := m.clearedFields[medicine.FieldRemarks]
	return ok
}

// ResetRemarks resets all changes to the "remarks" field.
func (m *MedicineMutation) ResetRemarks() {
	m.remarks = nil
	delete(m.clearedFields, medicine.FieldRemarks)
}

// SetImages sets the "images" field.
func (m *MedicineMutation) SetImages(s string) {
	m.images = &s
}

// Images returns the value of the "images" field in the mutation.
func (m *MedicineMutation) Images() (r string, exists bool) {
	v := m.images
	if v == nil {
		return
	}
	return *v, true
}

// OldImages returns the old "images" field's value of the Medicine entity.
// If the Medicine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MedicineMutation) OldImages(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImages is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImages requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImages: %w", err)
	}
	return oldValue.Images, nil
}

// ClearImages clears the value of the "images" field.
func (m *MedicineMutation) ClearImages() {
	m.images = nil
	m.clearedFields[medicine.FieldImages] = struct{}{}
}

// ImagesCleared returns if the "images" field was cleared in this mutation.
func (m *MedicineMutation) ImagesCleared() bool {
	_, ok := m.clearedFields[medicine.FieldImages]
	return ok
}

// ResetImages resets all changes to the "images" field.
func (m *MedicineMutation) ResetImages() {
	m.images = nil
	delete(m.clearedFields, medicine.FieldImages)
}

// Where appends a list predicates to the MedicineMutation builder.
func (m *MedicineMutation) Where(ps ...predicate.Medicine) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MedicineMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MedicineMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Medicine, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MedicineMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MedicineMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Medicine).
func (m *MedicineMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MedicineMutation) Fields() []string {
	fields := make([]string, 0, 15)
	if m.created_at != nil {
		fields = append(fields, medicine.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, medicine.FieldUpdatedAt)
	}
	if m.status != nil {
		fields = append(fields, medicine.FieldStatus)
	}
	if m.sort != nil {
		fields = append(fields, medicine.FieldSort)
	}
	if m.name_zh != nil {
		fields = append(fields, medicine.FieldNameZh)
	}
	if m.name_en != nil {
		fields = append(fields, medicine.FieldNameEn)
	}
	if m.name_ru != nil {
		fields = append(fields, medicine.FieldNameRu)
	}
	if m.name_kk != nil {
		fields = append(fields, medicine.FieldNameKk)
	}
	if m.quantity != nil {
		fields = append(fields, medicine.FieldQuantity)
	}
	if m.description_zh != nil {
		fields = append(fields, medicine.FieldDescriptionZh)
	}
	if m.description_en != nil {
		fields = append(fields, medicine.FieldDescriptionEn)
	}
	if m.description_ru != nil {
		fields = append(fields, medicine.FieldDescriptionRu)
	}
	if m.description_kk != nil {
		fields = append(fields, medicine.FieldDescriptionKk)
	}
	if m.remarks != nil {
		fields = append(fields, medicine.FieldRemarks)
	}
	if m.images != nil {
		fields = append(fields, medicine.FieldImages)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MedicineMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case medicine.FieldCreatedAt:
		return m.CreatedAt()
	case medicine.FieldUpdatedAt:
		return m.UpdatedAt()
	case medicine.FieldStatus:
		return m.Status()
	case medicine.FieldSort:
		return m.Sort()
	case medicine.FieldNameZh:
		return m.NameZh()
	case medicine.FieldNameEn:
		return m.NameEn()
	case medicine.FieldNameRu:
		return m.NameRu()
	case medicine.FieldNameKk:
		return m.NameKk()
	case medicine.FieldQuantity:
		return m.Quantity()
	case medicine.FieldDescriptionZh:
		return m.DescriptionZh()
	case medicine.FieldDescriptionEn:
		return m.DescriptionEn()
	case medicine.FieldDescriptionRu:
		return m.DescriptionRu()
	case medicine.FieldDescriptionKk:
		return m.DescriptionKk()
	case medicine.FieldRemarks:
		return m.Remarks()
	case medicine.FieldImages:
		return m.Images()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MedicineMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case medicine.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case medicine.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case medicine.FieldStatus:
		return m.OldStatus(ctx)
	case medicine.FieldSort:
		return m.OldSort(ctx)
	case medicine.FieldNameZh:
		return m.OldNameZh(ctx)
	case medicine.FieldNameEn:
		return m.OldNameEn(ctx)
	case medicine.FieldNameRu:
		return m.OldNameRu(ctx)
	case medicine.FieldNameKk:
		return m.OldNameKk(ctx)
	case medicine.FieldQuantity:
		return m.OldQuantity(ctx)
	case medicine.FieldDescriptionZh:
		return m.OldDescriptionZh(ctx)
	case medicine.FieldDescriptionEn:
		return m.OldDescriptionEn(ctx)
	case medicine.FieldDescriptionRu:
		return m.OldDescriptionRu(ctx)
	case medicine.FieldDescriptionKk:
		return m.OldDescriptionKk(ctx)
	case medicine.FieldRemarks:
		return m.OldRemarks(ctx)
	case medicine.FieldImages:
		return m.OldImages(ctx)
	}
	return nil, fmt.Errorf("unknown Medicine field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MedicineMutation) SetField(name string, value ent.Value) error {
	switch name {
	case medicine.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case medicine.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case medicine.FieldStatus:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case medicine.FieldSort:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSort(v)
		return nil
	case medicine.FieldNameZh:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameZh(v)
		return nil
	case medicine.FieldNameEn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameEn(v)
		return nil
	case medicine.FieldNameRu:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameRu(v)
		return nil
	case medicine.FieldNameKk:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameKk(v)
		return nil
	case medicine.FieldQuantity:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuantity(v)
		return nil
	case medicine.FieldDescriptionZh:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescriptionZh(v)
		return nil
	case medicine.FieldDescriptionEn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescriptionEn(v)
		return nil
	case medicine.FieldDescriptionRu:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescriptionRu(v)
		return nil
	case medicine.FieldDescriptionKk:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescriptionKk(v)
		return nil
	case medicine.FieldRemarks:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemarks(v)
		return nil
	case medicine.FieldImages:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImages(v)
		return nil
	}
	return fmt.Errorf("unknown Medicine field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MedicineMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, medicine.FieldStatus)
	}
	if m.addsort != nil {
		fields = append(fields, medicine.FieldSort)
	}
	if m.addquantity != nil {
		fields = append(fields, medicine.FieldQuantity)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MedicineMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case medicine.FieldStatus:
		return m.AddedStatus()
	case medicine.FieldSort:
		return m.AddedSort()
	case medicine.FieldQuantity:
		return m.AddedQuantity()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MedicineMutation) AddField(name string, value ent.Value) error {
	switch name {
	case medicine.FieldStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	case medicine.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSort(v)
		return nil
	case medicine.FieldQuantity:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddQuantity(v)
		return nil
	}
	return fmt.Errorf("unknown Medicine numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MedicineMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(medicine.FieldStatus) {
		fields = append(fields, medicine.FieldStatus)
	}
	if m.FieldCleared(medicine.FieldDescriptionZh) {
		fields = append(fields, medicine.FieldDescriptionZh)
	}
	if m.FieldCleared(medicine.FieldDescriptionEn) {
		fields = append(fields, medicine.FieldDescriptionEn)
	}
	if m.FieldCleared(medicine.FieldDescriptionRu) {
		fields = append(fields, medicine.FieldDescriptionRu)
	}
	if m.FieldCleared(medicine.FieldDescriptionKk) {
		fields = append(fields, medicine.FieldDescriptionKk)
	}
	if m.FieldCleared(medicine.FieldRemarks) {
		fields = append(fields, medicine.FieldRemarks)
	}
	if m.FieldCleared(medicine.FieldImages) {
		fields = append(fields, medicine.FieldImages)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MedicineMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MedicineMutation) ClearField(name string) error {
	switch name {
	case medicine.FieldStatus:
		m.ClearStatus()
		return nil
	case medicine.FieldDescriptionZh:
		m.ClearDescriptionZh()
		return nil
	case medicine.FieldDescriptionEn:
		m.ClearDescriptionEn()
		return nil
	case medicine.FieldDescriptionRu:
		m.ClearDescriptionRu()
		return nil
	case medicine.FieldDescriptionKk:
		m.ClearDescriptionKk()
		return nil
	case medicine.FieldRemarks:
		m.ClearRemarks()
		return nil
	case medicine.FieldImages:
		m.ClearImages()
		return nil
	}
	return fmt.Errorf("unknown Medicine nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MedicineMutation) ResetField(name string) error {
	switch name {
	case medicine.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case medicine.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case medicine.FieldStatus:
		m.ResetStatus()
		return nil
	case medicine.FieldSort:
		m.ResetSort()
		return nil
	case medicine.FieldNameZh:
		m.ResetNameZh()
		return nil
	case medicine.FieldNameEn:
		m.ResetNameEn()
		return nil
	case medicine.FieldNameRu:
		m.ResetNameRu()
		return nil
	case medicine.FieldNameKk:
		m.ResetNameKk()
		return nil
	case medicine.FieldQuantity:
		m.ResetQuantity()
		return nil
	case medicine.FieldDescriptionZh:
		m.ResetDescriptionZh()
		return nil
	case medicine.FieldDescriptionEn:
		m.ResetDescriptionEn()
		return nil
	case medicine.FieldDescriptionRu:
		m.ResetDescriptionRu()
		return nil
	case medicine.FieldDescriptionKk:
		m.ResetDescriptionKk()
		return nil
	case medicine.FieldRemarks:
		m.ResetRemarks()
		return nil
	case medicine.FieldImages:
		m.ResetImages()
		return nil
	}
	return fmt.Errorf("unknown Medicine field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MedicineMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MedicineMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MedicineMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MedicineMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MedicineMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MedicineMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MedicineMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Medicine unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MedicineMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Medicine edge %s", name)
}

// MemberMutation represents an operation that mutates the Member nodes in the graph.
type MemberMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	created_at     *time.Time
	updated_at     *time.Time
	status         *uint8
	addstatus      *int8
	username       *string
	password       *string
	nickname       *string
	mobile         *string
	email          *string
	avatar         *string
	wechat_open_id *string
	expired_at     *time.Time
	clearedFields  map[string]struct{}
	ranks          *uint64
	clearedranks   bool
	done           bool
	oldValue       func(context.Context) (*Member, error)
	predicates     []predicate.Member
}

var _ ent.Mutation = (*MemberMutation)(nil)

// memberOption allows management of the mutation configuration using functional options.
type memberOption func(*MemberMutation)

// newMemberMutation creates new mutation for the Member entity.
func newMemberMutation(c config, op Op, opts ...memberOption) *MemberMutation {
	m := &MemberMutation{
		config:        c,
		op:            op,
		typ:           TypeMember,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMemberID sets the ID field of the mutation.
func withMemberID(id uuid.UUID) memberOption {
	return func(m *MemberMutation) {
		var (
			err   error
			once  sync.Once
			value *Member
		)
		m.oldValue = func(ctx context.Context) (*Member, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Member.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMember sets the old Member of the mutation.
func withMember(node *Member) memberOption {
	return func(m *MemberMutation) {
		m.oldValue = func(context.Context) (*Member, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MemberMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MemberMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Member entities.
func (m *MemberMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MemberMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MemberMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Member.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *MemberMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MemberMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MemberMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *MemberMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *MemberMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *MemberMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetStatus sets the "status" field.
func (m *MemberMutation) SetStatus(u uint8) {
	m.status = &u
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *MemberMutation) Status() (r uint8, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldStatus(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds u to the "status" field.
func (m *MemberMutation) AddStatus(u int8) {
	if m.addstatus != nil {
		*m.addstatus += u
	} else {
		m.addstatus = &u
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *MemberMutation) AddedStatus() (r int8, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ClearStatus clears the value of the "status" field.
func (m *MemberMutation) ClearStatus() {
	m.status = nil
	m.addstatus = nil
	m.clearedFields[member.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *MemberMutation) StatusCleared() bool {
	_, ok := m.clearedFields[member.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *MemberMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
	delete(m.clearedFields, member.FieldStatus)
}

// SetUsername sets the "username" field.
func (m *MemberMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *MemberMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *MemberMutation) ResetUsername() {
	m.username = nil
}

// SetPassword sets the "password" field.
func (m *MemberMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *MemberMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *MemberMutation) ResetPassword() {
	m.password = nil
}

// SetNickname sets the "nickname" field.
func (m *MemberMutation) SetNickname(s string) {
	m.nickname = &s
}

// Nickname returns the value of the "nickname" field in the mutation.
func (m *MemberMutation) Nickname() (r string, exists bool) {
	v := m.nickname
	if v == nil {
		return
	}
	return *v, true
}

// OldNickname returns the old "nickname" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldNickname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNickname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNickname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNickname: %w", err)
	}
	return oldValue.Nickname, nil
}

// ResetNickname resets all changes to the "nickname" field.
func (m *MemberMutation) ResetNickname() {
	m.nickname = nil
}

// SetRankID sets the "rank_id" field.
func (m *MemberMutation) SetRankID(u uint64) {
	m.ranks = &u
}

// RankID returns the value of the "rank_id" field in the mutation.
func (m *MemberMutation) RankID() (r uint64, exists bool) {
	v := m.ranks
	if v == nil {
		return
	}
	return *v, true
}

// OldRankID returns the old "rank_id" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldRankID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRankID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRankID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRankID: %w", err)
	}
	return oldValue.RankID, nil
}

// ClearRankID clears the value of the "rank_id" field.
func (m *MemberMutation) ClearRankID() {
	m.ranks = nil
	m.clearedFields[member.FieldRankID] = struct{}{}
}

// RankIDCleared returns if the "rank_id" field was cleared in this mutation.
func (m *MemberMutation) RankIDCleared() bool {
	_, ok := m.clearedFields[member.FieldRankID]
	return ok
}

// ResetRankID resets all changes to the "rank_id" field.
func (m *MemberMutation) ResetRankID() {
	m.ranks = nil
	delete(m.clearedFields, member.FieldRankID)
}

// SetMobile sets the "mobile" field.
func (m *MemberMutation) SetMobile(s string) {
	m.mobile = &s
}

// Mobile returns the value of the "mobile" field in the mutation.
func (m *MemberMutation) Mobile() (r string, exists bool) {
	v := m.mobile
	if v == nil {
		return
	}
	return *v, true
}

// OldMobile returns the old "mobile" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldMobile(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMobile is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMobile requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMobile: %w", err)
	}
	return oldValue.Mobile, nil
}

// ClearMobile clears the value of the "mobile" field.
func (m *MemberMutation) ClearMobile() {
	m.mobile = nil
	m.clearedFields[member.FieldMobile] = struct{}{}
}

// MobileCleared returns if the "mobile" field was cleared in this mutation.
func (m *MemberMutation) MobileCleared() bool {
	_, ok := m.clearedFields[member.FieldMobile]
	return ok
}

// ResetMobile resets all changes to the "mobile" field.
func (m *MemberMutation) ResetMobile() {
	m.mobile = nil
	delete(m.clearedFields, member.FieldMobile)
}

// SetEmail sets the "email" field.
func (m *MemberMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *MemberMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *MemberMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[member.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *MemberMutation) EmailCleared() bool {
	_, ok := m.clearedFields[member.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *MemberMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, member.FieldEmail)
}

// SetAvatar sets the "avatar" field.
func (m *MemberMutation) SetAvatar(s string) {
	m.avatar = &s
}

// Avatar returns the value of the "avatar" field in the mutation.
func (m *MemberMutation) Avatar() (r string, exists bool) {
	v := m.avatar
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatar returns the old "avatar" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldAvatar(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvatar is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvatar requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatar: %w", err)
	}
	return oldValue.Avatar, nil
}

// ClearAvatar clears the value of the "avatar" field.
func (m *MemberMutation) ClearAvatar() {
	m.avatar = nil
	m.clearedFields[member.FieldAvatar] = struct{}{}
}

// AvatarCleared returns if the "avatar" field was cleared in this mutation.
func (m *MemberMutation) AvatarCleared() bool {
	_, ok := m.clearedFields[member.FieldAvatar]
	return ok
}

// ResetAvatar resets all changes to the "avatar" field.
func (m *MemberMutation) ResetAvatar() {
	m.avatar = nil
	delete(m.clearedFields, member.FieldAvatar)
}

// SetWechatOpenID sets the "wechat_open_id" field.
func (m *MemberMutation) SetWechatOpenID(s string) {
	m.wechat_open_id = &s
}

// WechatOpenID returns the value of the "wechat_open_id" field in the mutation.
func (m *MemberMutation) WechatOpenID() (r string, exists bool) {
	v := m.wechat_open_id
	if v == nil {
		return
	}
	return *v, true
}

// OldWechatOpenID returns the old "wechat_open_id" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldWechatOpenID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWechatOpenID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWechatOpenID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWechatOpenID: %w", err)
	}
	return oldValue.WechatOpenID, nil
}

// ClearWechatOpenID clears the value of the "wechat_open_id" field.
func (m *MemberMutation) ClearWechatOpenID() {
	m.wechat_open_id = nil
	m.clearedFields[member.FieldWechatOpenID] = struct{}{}
}

// WechatOpenIDCleared returns if the "wechat_open_id" field was cleared in this mutation.
func (m *MemberMutation) WechatOpenIDCleared() bool {
	_, ok := m.clearedFields[member.FieldWechatOpenID]
	return ok
}

// ResetWechatOpenID resets all changes to the "wechat_open_id" field.
func (m *MemberMutation) ResetWechatOpenID() {
	m.wechat_open_id = nil
	delete(m.clearedFields, member.FieldWechatOpenID)
}

// SetExpiredAt sets the "expired_at" field.
func (m *MemberMutation) SetExpiredAt(t time.Time) {
	m.expired_at = &t
}

// ExpiredAt returns the value of the "expired_at" field in the mutation.
func (m *MemberMutation) ExpiredAt() (r time.Time, exists bool) {
	v := m.expired_at
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiredAt returns the old "expired_at" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldExpiredAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiredAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiredAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiredAt: %w", err)
	}
	return oldValue.ExpiredAt, nil
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (m *MemberMutation) ClearExpiredAt() {
	m.expired_at = nil
	m.clearedFields[member.FieldExpiredAt] = struct{}{}
}

// ExpiredAtCleared returns if the "expired_at" field was cleared in this mutation.
func (m *MemberMutation) ExpiredAtCleared() bool {
	_, ok := m.clearedFields[member.FieldExpiredAt]
	return ok
}

// ResetExpiredAt resets all changes to the "expired_at" field.
func (m *MemberMutation) ResetExpiredAt() {
	m.expired_at = nil
	delete(m.clearedFields, member.FieldExpiredAt)
}

// SetRanksID sets the "ranks" edge to the MemberRank entity by id.
func (m *MemberMutation) SetRanksID(id uint64) {
	m.ranks = &id
}

// ClearRanks clears the "ranks" edge to the MemberRank entity.
func (m *MemberMutation) ClearRanks() {
	m.clearedranks = true
	m.clearedFields[member.FieldRankID] = struct{}{}
}

// RanksCleared reports if the "ranks" edge to the MemberRank entity was cleared.
func (m *MemberMutation) RanksCleared() bool {
	return m.RankIDCleared() || m.clearedranks
}

// RanksID returns the "ranks" edge ID in the mutation.
func (m *MemberMutation) RanksID() (id uint64, exists bool) {
	if m.ranks != nil {
		return *m.ranks, true
	}
	return
}

// RanksIDs returns the "ranks" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RanksID instead. It exists only for internal usage by the builders.
func (m *MemberMutation) RanksIDs() (ids []uint64) {
	if id := m.ranks; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRanks resets all changes to the "ranks" edge.
func (m *MemberMutation) ResetRanks() {
	m.ranks = nil
	m.clearedranks = false
}

// Where appends a list predicates to the MemberMutation builder.
func (m *MemberMutation) Where(ps ...predicate.Member) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MemberMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MemberMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Member, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MemberMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MemberMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Member).
func (m *MemberMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MemberMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.created_at != nil {
		fields = append(fields, member.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, member.FieldUpdatedAt)
	}
	if m.status != nil {
		fields = append(fields, member.FieldStatus)
	}
	if m.username != nil {
		fields = append(fields, member.FieldUsername)
	}
	if m.password != nil {
		fields = append(fields, member.FieldPassword)
	}
	if m.nickname != nil {
		fields = append(fields, member.FieldNickname)
	}
	if m.ranks != nil {
		fields = append(fields, member.FieldRankID)
	}
	if m.mobile != nil {
		fields = append(fields, member.FieldMobile)
	}
	if m.email != nil {
		fields = append(fields, member.FieldEmail)
	}
	if m.avatar != nil {
		fields = append(fields, member.FieldAvatar)
	}
	if m.wechat_open_id != nil {
		fields = append(fields, member.FieldWechatOpenID)
	}
	if m.expired_at != nil {
		fields = append(fields, member.FieldExpiredAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MemberMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case member.FieldCreatedAt:
		return m.CreatedAt()
	case member.FieldUpdatedAt:
		return m.UpdatedAt()
	case member.FieldStatus:
		return m.Status()
	case member.FieldUsername:
		return m.Username()
	case member.FieldPassword:
		return m.Password()
	case member.FieldNickname:
		return m.Nickname()
	case member.FieldRankID:
		return m.RankID()
	case member.FieldMobile:
		return m.Mobile()
	case member.FieldEmail:
		return m.Email()
	case member.FieldAvatar:
		return m.Avatar()
	case member.FieldWechatOpenID:
		return m.WechatOpenID()
	case member.FieldExpiredAt:
		return m.ExpiredAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MemberMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case member.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case member.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case member.FieldStatus:
		return m.OldStatus(ctx)
	case member.FieldUsername:
		return m.OldUsername(ctx)
	case member.FieldPassword:
		return m.OldPassword(ctx)
	case member.FieldNickname:
		return m.OldNickname(ctx)
	case member.FieldRankID:
		return m.OldRankID(ctx)
	case member.FieldMobile:
		return m.OldMobile(ctx)
	case member.FieldEmail:
		return m.OldEmail(ctx)
	case member.FieldAvatar:
		return m.OldAvatar(ctx)
	case member.FieldWechatOpenID:
		return m.OldWechatOpenID(ctx)
	case member.FieldExpiredAt:
		return m.OldExpiredAt(ctx)
	}
	return nil, fmt.Errorf("unknown Member field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MemberMutation) SetField(name string, value ent.Value) error {
	switch name {
	case member.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case member.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case member.FieldStatus:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case member.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case member.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case member.FieldNickname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNickname(v)
		return nil
	case member.FieldRankID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRankID(v)
		return nil
	case member.FieldMobile:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMobile(v)
		return nil
	case member.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case member.FieldAvatar:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatar(v)
		return nil
	case member.FieldWechatOpenID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWechatOpenID(v)
		return nil
	case member.FieldExpiredAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiredAt(v)
		return nil
	}
	return fmt.Errorf("unknown Member field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MemberMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, member.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MemberMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case member.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MemberMutation) AddField(name string, value ent.Value) error {
	switch name {
	case member.FieldStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Member numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MemberMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(member.FieldStatus) {
		fields = append(fields, member.FieldStatus)
	}
	if m.FieldCleared(member.FieldRankID) {
		fields = append(fields, member.FieldRankID)
	}
	if m.FieldCleared(member.FieldMobile) {
		fields = append(fields, member.FieldMobile)
	}
	if m.FieldCleared(member.FieldEmail) {
		fields = append(fields, member.FieldEmail)
	}
	if m.FieldCleared(member.FieldAvatar) {
		fields = append(fields, member.FieldAvatar)
	}
	if m.FieldCleared(member.FieldWechatOpenID) {
		fields = append(fields, member.FieldWechatOpenID)
	}
	if m.FieldCleared(member.FieldExpiredAt) {
		fields = append(fields, member.FieldExpiredAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MemberMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MemberMutation) ClearField(name string) error {
	switch name {
	case member.FieldStatus:
		m.ClearStatus()
		return nil
	case member.FieldRankID:
		m.ClearRankID()
		return nil
	case member.FieldMobile:
		m.ClearMobile()
		return nil
	case member.FieldEmail:
		m.ClearEmail()
		return nil
	case member.FieldAvatar:
		m.ClearAvatar()
		return nil
	case member.FieldWechatOpenID:
		m.ClearWechatOpenID()
		return nil
	case member.FieldExpiredAt:
		m.ClearExpiredAt()
		return nil
	}
	return fmt.Errorf("unknown Member nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MemberMutation) ResetField(name string) error {
	switch name {
	case member.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case member.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case member.FieldStatus:
		m.ResetStatus()
		return nil
	case member.FieldUsername:
		m.ResetUsername()
		return nil
	case member.FieldPassword:
		m.ResetPassword()
		return nil
	case member.FieldNickname:
		m.ResetNickname()
		return nil
	case member.FieldRankID:
		m.ResetRankID()
		return nil
	case member.FieldMobile:
		m.ResetMobile()
		return nil
	case member.FieldEmail:
		m.ResetEmail()
		return nil
	case member.FieldAvatar:
		m.ResetAvatar()
		return nil
	case member.FieldWechatOpenID:
		m.ResetWechatOpenID()
		return nil
	case member.FieldExpiredAt:
		m.ResetExpiredAt()
		return nil
	}
	return fmt.Errorf("unknown Member field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MemberMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.ranks != nil {
		edges = append(edges, member.EdgeRanks)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MemberMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case member.EdgeRanks:
		if id := m.ranks; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MemberMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MemberMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MemberMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedranks {
		edges = append(edges, member.EdgeRanks)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MemberMutation) EdgeCleared(name string) bool {
	switch name {
	case member.EdgeRanks:
		return m.clearedranks
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MemberMutation) ClearEdge(name string) error {
	switch name {
	case member.EdgeRanks:
		m.ClearRanks()
		return nil
	}
	return fmt.Errorf("unknown Member unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MemberMutation) ResetEdge(name string) error {
	switch name {
	case member.EdgeRanks:
		m.ResetRanks()
		return nil
	}
	return fmt.Errorf("unknown Member edge %s", name)
}

// MemberRankMutation represents an operation that mutates the MemberRank nodes in the graph.
type MemberRankMutation struct {
	config
	op             Op
	typ            string
	id             *uint64
	created_at     *time.Time
	updated_at     *time.Time
	name           *string
	code           *string
	description    *string
	remark         *string
	clearedFields  map[string]struct{}
	members        map[uuid.UUID]struct{}
	removedmembers map[uuid.UUID]struct{}
	clearedmembers bool
	done           bool
	oldValue       func(context.Context) (*MemberRank, error)
	predicates     []predicate.MemberRank
}

var _ ent.Mutation = (*MemberRankMutation)(nil)

// memberrankOption allows management of the mutation configuration using functional options.
type memberrankOption func(*MemberRankMutation)

// newMemberRankMutation creates new mutation for the MemberRank entity.
func newMemberRankMutation(c config, op Op, opts ...memberrankOption) *MemberRankMutation {
	m := &MemberRankMutation{
		config:        c,
		op:            op,
		typ:           TypeMemberRank,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMemberRankID sets the ID field of the mutation.
func withMemberRankID(id uint64) memberrankOption {
	return func(m *MemberRankMutation) {
		var (
			err   error
			once  sync.Once
			value *MemberRank
		)
		m.oldValue = func(ctx context.Context) (*MemberRank, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MemberRank.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMemberRank sets the old MemberRank of the mutation.
func withMemberRank(node *MemberRank) memberrankOption {
	return func(m *MemberRankMutation) {
		m.oldValue = func(context.Context) (*MemberRank, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MemberRankMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MemberRankMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of MemberRank entities.
func (m *MemberRankMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MemberRankMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MemberRankMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MemberRank.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *MemberRankMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MemberRankMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the MemberRank entity.
// If the MemberRank object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberRankMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MemberRankMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *MemberRankMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *MemberRankMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the MemberRank entity.
// If the MemberRank object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberRankMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *MemberRankMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *MemberRankMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *MemberRankMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the MemberRank entity.
// If the MemberRank object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberRankMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *MemberRankMutation) ResetName() {
	m.name = nil
}

// SetCode sets the "code" field.
func (m *MemberRankMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *MemberRankMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the MemberRank entity.
// If the MemberRank object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberRankMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *MemberRankMutation) ResetCode() {
	m.code = nil
}

// SetDescription sets the "description" field.
func (m *MemberRankMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *MemberRankMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the MemberRank entity.
// If the MemberRank object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberRankMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *MemberRankMutation) ResetDescription() {
	m.description = nil
}

// SetRemark sets the "remark" field.
func (m *MemberRankMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *MemberRankMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the MemberRank entity.
// If the MemberRank object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberRankMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ResetRemark resets all changes to the "remark" field.
func (m *MemberRankMutation) ResetRemark() {
	m.remark = nil
}

// AddMemberIDs adds the "members" edge to the Member entity by ids.
func (m *MemberRankMutation) AddMemberIDs(ids ...uuid.UUID) {
	if m.members == nil {
		m.members = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.members[ids[i]] = struct{}{}
	}
}

// ClearMembers clears the "members" edge to the Member entity.
func (m *MemberRankMutation) ClearMembers() {
	m.clearedmembers = true
}

// MembersCleared reports if the "members" edge to the Member entity was cleared.
func (m *MemberRankMutation) MembersCleared() bool {
	return m.clearedmembers
}

// RemoveMemberIDs removes the "members" edge to the Member entity by IDs.
func (m *MemberRankMutation) RemoveMemberIDs(ids ...uuid.UUID) {
	if m.removedmembers == nil {
		m.removedmembers = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.members, ids[i])
		m.removedmembers[ids[i]] = struct{}{}
	}
}

// RemovedMembers returns the removed IDs of the "members" edge to the Member entity.
func (m *MemberRankMutation) RemovedMembersIDs() (ids []uuid.UUID) {
	for id := range m.removedmembers {
		ids = append(ids, id)
	}
	return
}

// MembersIDs returns the "members" edge IDs in the mutation.
func (m *MemberRankMutation) MembersIDs() (ids []uuid.UUID) {
	for id := range m.members {
		ids = append(ids, id)
	}
	return
}

// ResetMembers resets all changes to the "members" edge.
func (m *MemberRankMutation) ResetMembers() {
	m.members = nil
	m.clearedmembers = false
	m.removedmembers = nil
}

// Where appends a list predicates to the MemberRankMutation builder.
func (m *MemberRankMutation) Where(ps ...predicate.MemberRank) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MemberRankMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MemberRankMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.MemberRank, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MemberRankMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MemberRankMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (MemberRank).
func (m *MemberRankMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MemberRankMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, memberrank.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, memberrank.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, memberrank.FieldName)
	}
	if m.code != nil {
		fields = append(fields, memberrank.FieldCode)
	}
	if m.description != nil {
		fields = append(fields, memberrank.FieldDescription)
	}
	if m.remark != nil {
		fields = append(fields, memberrank.FieldRemark)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MemberRankMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case memberrank.FieldCreatedAt:
		return m.CreatedAt()
	case memberrank.FieldUpdatedAt:
		return m.UpdatedAt()
	case memberrank.FieldName:
		return m.Name()
	case memberrank.FieldCode:
		return m.Code()
	case memberrank.FieldDescription:
		return m.Description()
	case memberrank.FieldRemark:
		return m.Remark()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MemberRankMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case memberrank.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case memberrank.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case memberrank.FieldName:
		return m.OldName(ctx)
	case memberrank.FieldCode:
		return m.OldCode(ctx)
	case memberrank.FieldDescription:
		return m.OldDescription(ctx)
	case memberrank.FieldRemark:
		return m.OldRemark(ctx)
	}
	return nil, fmt.Errorf("unknown MemberRank field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MemberRankMutation) SetField(name string, value ent.Value) error {
	switch name {
	case memberrank.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case memberrank.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case memberrank.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case memberrank.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case memberrank.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case memberrank.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	}
	return fmt.Errorf("unknown MemberRank field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MemberRankMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MemberRankMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MemberRankMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown MemberRank numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MemberRankMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MemberRankMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MemberRankMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MemberRank nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MemberRankMutation) ResetField(name string) error {
	switch name {
	case memberrank.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case memberrank.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case memberrank.FieldName:
		m.ResetName()
		return nil
	case memberrank.FieldCode:
		m.ResetCode()
		return nil
	case memberrank.FieldDescription:
		m.ResetDescription()
		return nil
	case memberrank.FieldRemark:
		m.ResetRemark()
		return nil
	}
	return fmt.Errorf("unknown MemberRank field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MemberRankMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.members != nil {
		edges = append(edges, memberrank.EdgeMembers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MemberRankMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case memberrank.EdgeMembers:
		ids := make([]ent.Value, 0, len(m.members))
		for id := range m.members {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MemberRankMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedmembers != nil {
		edges = append(edges, memberrank.EdgeMembers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MemberRankMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case memberrank.EdgeMembers:
		ids := make([]ent.Value, 0, len(m.removedmembers))
		for id := range m.removedmembers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MemberRankMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmembers {
		edges = append(edges, memberrank.EdgeMembers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MemberRankMutation) EdgeCleared(name string) bool {
	switch name {
	case memberrank.EdgeMembers:
		return m.clearedmembers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MemberRankMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown MemberRank unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MemberRankMutation) ResetEdge(name string) error {
	switch name {
	case memberrank.EdgeMembers:
		m.ResetMembers()
		return nil
	}
	return fmt.Errorf("unknown MemberRank edge %s", name)
}

// NewsMutation represents an operation that mutates the News nodes in the graph.
type NewsMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	created_at    *time.Time
	updated_at    *time.Time
	status        *uint8
	addstatus     *int8
	sort          *uint32
	addsort       *int32
	title_zh      *string
	title_en      *string
	title_ru      *string
	title_kk      *string
	content_zh    *string
	content_en    *string
	content_ru    *string
	content_kk    *string
	cover_url     *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*News, error)
	predicates    []predicate.News
}

var _ ent.Mutation = (*NewsMutation)(nil)

// newsOption allows management of the mutation configuration using functional options.
type newsOption func(*NewsMutation)

// newNewsMutation creates new mutation for the News entity.
func newNewsMutation(c config, op Op, opts ...newsOption) *NewsMutation {
	m := &NewsMutation{
		config:        c,
		op:            op,
		typ:           TypeNews,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNewsID sets the ID field of the mutation.
func withNewsID(id uint64) newsOption {
	return func(m *NewsMutation) {
		var (
			err   error
			once  sync.Once
			value *News
		)
		m.oldValue = func(ctx context.Context) (*News, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().News.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNews sets the old News of the mutation.
func withNews(node *News) newsOption {
	return func(m *NewsMutation) {
		m.oldValue = func(context.Context) (*News, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NewsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NewsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of News entities.
func (m *NewsMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NewsMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NewsMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().News.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *NewsMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *NewsMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the News entity.
// If the News object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NewsMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *NewsMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *NewsMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *NewsMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the News entity.
// If the News object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NewsMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *NewsMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetStatus sets the "status" field.
func (m *NewsMutation) SetStatus(u uint8) {
	m.status = &u
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *NewsMutation) Status() (r uint8, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the News entity.
// If the News object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NewsMutation) OldStatus(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds u to the "status" field.
func (m *NewsMutation) AddStatus(u int8) {
	if m.addstatus != nil {
		*m.addstatus += u
	} else {
		m.addstatus = &u
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *NewsMutation) AddedStatus() (r int8, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ClearStatus clears the value of the "status" field.
func (m *NewsMutation) ClearStatus() {
	m.status = nil
	m.addstatus = nil
	m.clearedFields[news.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *NewsMutation) StatusCleared() bool {
	_, ok := m.clearedFields[news.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *NewsMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
	delete(m.clearedFields, news.FieldStatus)
}

// SetSort sets the "sort" field.
func (m *NewsMutation) SetSort(u uint32) {
	m.sort = &u
	m.addsort = nil
}

// Sort returns the value of the "sort" field in the mutation.
func (m *NewsMutation) Sort() (r uint32, exists bool) {
	v := m.sort
	if v == nil {
		return
	}
	return *v, true
}

// OldSort returns the old "sort" field's value of the News entity.
// If the News object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NewsMutation) OldSort(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSort: %w", err)
	}
	return oldValue.Sort, nil
}

// AddSort adds u to the "sort" field.
func (m *NewsMutation) AddSort(u int32) {
	if m.addsort != nil {
		*m.addsort += u
	} else {
		m.addsort = &u
	}
}

// AddedSort returns the value that was added to the "sort" field in this mutation.
func (m *NewsMutation) AddedSort() (r int32, exists bool) {
	v := m.addsort
	if v == nil {
		return
	}
	return *v, true
}

// ResetSort resets all changes to the "sort" field.
func (m *NewsMutation) ResetSort() {
	m.sort = nil
	m.addsort = nil
}

// SetTitleZh sets the "title_zh" field.
func (m *NewsMutation) SetTitleZh(s string) {
	m.title_zh = &s
}

// TitleZh returns the value of the "title_zh" field in the mutation.
func (m *NewsMutation) TitleZh() (r string, exists bool) {
	v := m.title_zh
	if v == nil {
		return
	}
	return *v, true
}

// OldTitleZh returns the old "title_zh" field's value of the News entity.
// If the News object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NewsMutation) OldTitleZh(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitleZh is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitleZh requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitleZh: %w", err)
	}
	return oldValue.TitleZh, nil
}

// ClearTitleZh clears the value of the "title_zh" field.
func (m *NewsMutation) ClearTitleZh() {
	m.title_zh = nil
	m.clearedFields[news.FieldTitleZh] = struct{}{}
}

// TitleZhCleared returns if the "title_zh" field was cleared in this mutation.
func (m *NewsMutation) TitleZhCleared() bool {
	_, ok := m.clearedFields[news.FieldTitleZh]
	return ok
}

// ResetTitleZh resets all changes to the "title_zh" field.
func (m *NewsMutation) ResetTitleZh() {
	m.title_zh = nil
	delete(m.clearedFields, news.FieldTitleZh)
}

// SetTitleEn sets the "title_en" field.
func (m *NewsMutation) SetTitleEn(s string) {
	m.title_en = &s
}

// TitleEn returns the value of the "title_en" field in the mutation.
func (m *NewsMutation) TitleEn() (r string, exists bool) {
	v := m.title_en
	if v == nil {
		return
	}
	return *v, true
}

// OldTitleEn returns the old "title_en" field's value of the News entity.
// If the News object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NewsMutation) OldTitleEn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitleEn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitleEn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitleEn: %w", err)
	}
	return oldValue.TitleEn, nil
}

// ClearTitleEn clears the value of the "title_en" field.
func (m *NewsMutation) ClearTitleEn() {
	m.title_en = nil
	m.clearedFields[news.FieldTitleEn] = struct{}{}
}

// TitleEnCleared returns if the "title_en" field was cleared in this mutation.
func (m *NewsMutation) TitleEnCleared() bool {
	_, ok := m.clearedFields[news.FieldTitleEn]
	return ok
}

// ResetTitleEn resets all changes to the "title_en" field.
func (m *NewsMutation) ResetTitleEn() {
	m.title_en = nil
	delete(m.clearedFields, news.FieldTitleEn)
}

// SetTitleRu sets the "title_ru" field.
func (m *NewsMutation) SetTitleRu(s string) {
	m.title_ru = &s
}

// TitleRu returns the value of the "title_ru" field in the mutation.
func (m *NewsMutation) TitleRu() (r string, exists bool) {
	v := m.title_ru
	if v == nil {
		return
	}
	return *v, true
}

// OldTitleRu returns the old "title_ru" field's value of the News entity.
// If the News object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NewsMutation) OldTitleRu(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitleRu is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitleRu requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitleRu: %w", err)
	}
	return oldValue.TitleRu, nil
}

// ClearTitleRu clears the value of the "title_ru" field.
func (m *NewsMutation) ClearTitleRu() {
	m.title_ru = nil
	m.clearedFields[news.FieldTitleRu] = struct{}{}
}

// TitleRuCleared returns if the "title_ru" field was cleared in this mutation.
func (m *NewsMutation) TitleRuCleared() bool {
	_, ok := m.clearedFields[news.FieldTitleRu]
	return ok
}

// ResetTitleRu resets all changes to the "title_ru" field.
func (m *NewsMutation) ResetTitleRu() {
	m.title_ru = nil
	delete(m.clearedFields, news.FieldTitleRu)
}

// SetTitleKk sets the "title_kk" field.
func (m *NewsMutation) SetTitleKk(s string) {
	m.title_kk = &s
}

// TitleKk returns the value of the "title_kk" field in the mutation.
func (m *NewsMutation) TitleKk() (r string, exists bool) {
	v := m.title_kk
	if v == nil {
		return
	}
	return *v, true
}

// OldTitleKk returns the old "title_kk" field's value of the News entity.
// If the News object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NewsMutation) OldTitleKk(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitleKk is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitleKk requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitleKk: %w", err)
	}
	return oldValue.TitleKk, nil
}

// ClearTitleKk clears the value of the "title_kk" field.
func (m *NewsMutation) ClearTitleKk() {
	m.title_kk = nil
	m.clearedFields[news.FieldTitleKk] = struct{}{}
}

// TitleKkCleared returns if the "title_kk" field was cleared in this mutation.
func (m *NewsMutation) TitleKkCleared() bool {
	_, ok := m.clearedFields[news.FieldTitleKk]
	return ok
}

// ResetTitleKk resets all changes to the "title_kk" field.
func (m *NewsMutation) ResetTitleKk() {
	m.title_kk = nil
	delete(m.clearedFields, news.FieldTitleKk)
}

// SetContentZh sets the "content_zh" field.
func (m *NewsMutation) SetContentZh(s string) {
	m.content_zh = &s
}

// ContentZh returns the value of the "content_zh" field in the mutation.
func (m *NewsMutation) ContentZh() (r string, exists bool) {
	v := m.content_zh
	if v == nil {
		return
	}
	return *v, true
}

// OldContentZh returns the old "content_zh" field's value of the News entity.
// If the News object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NewsMutation) OldContentZh(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContentZh is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContentZh requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContentZh: %w", err)
	}
	return oldValue.ContentZh, nil
}

// ClearContentZh clears the value of the "content_zh" field.
func (m *NewsMutation) ClearContentZh() {
	m.content_zh = nil
	m.clearedFields[news.FieldContentZh] = struct{}{}
}

// ContentZhCleared returns if the "content_zh" field was cleared in this mutation.
func (m *NewsMutation) ContentZhCleared() bool {
	_, ok := m.clearedFields[news.FieldContentZh]
	return ok
}

// ResetContentZh resets all changes to the "content_zh" field.
func (m *NewsMutation) ResetContentZh() {
	m.content_zh = nil
	delete(m.clearedFields, news.FieldContentZh)
}

// SetContentEn sets the "content_en" field.
func (m *NewsMutation) SetContentEn(s string) {
	m.content_en = &s
}

// ContentEn returns the value of the "content_en" field in the mutation.
func (m *NewsMutation) ContentEn() (r string, exists bool) {
	v := m.content_en
	if v == nil {
		return
	}
	return *v, true
}

// OldContentEn returns the old "content_en" field's value of the News entity.
// If the News object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NewsMutation) OldContentEn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContentEn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContentEn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContentEn: %w", err)
	}
	return oldValue.ContentEn, nil
}

// ClearContentEn clears the value of the "content_en" field.
func (m *NewsMutation) ClearContentEn() {
	m.content_en = nil
	m.clearedFields[news.FieldContentEn] = struct{}{}
}

// ContentEnCleared returns if the "content_en" field was cleared in this mutation.
func (m *NewsMutation) ContentEnCleared() bool {
	_, ok := m.clearedFields[news.FieldContentEn]
	return ok
}

// ResetContentEn resets all changes to the "content_en" field.
func (m *NewsMutation) ResetContentEn() {
	m.content_en = nil
	delete(m.clearedFields, news.FieldContentEn)
}

// SetContentRu sets the "content_ru" field.
func (m *NewsMutation) SetContentRu(s string) {
	m.content_ru = &s
}

// ContentRu returns the value of the "content_ru" field in the mutation.
func (m *NewsMutation) ContentRu() (r string, exists bool) {
	v := m.content_ru
	if v == nil {
		return
	}
	return *v, true
}

// OldContentRu returns the old "content_ru" field's value of the News entity.
// If the News object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NewsMutation) OldContentRu(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContentRu is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContentRu requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContentRu: %w", err)
	}
	return oldValue.ContentRu, nil
}

// ClearContentRu clears the value of the "content_ru" field.
func (m *NewsMutation) ClearContentRu() {
	m.content_ru = nil
	m.clearedFields[news.FieldContentRu] = struct{}{}
}

// ContentRuCleared returns if the "content_ru" field was cleared in this mutation.
func (m *NewsMutation) ContentRuCleared() bool {
	_, ok := m.clearedFields[news.FieldContentRu]
	return ok
}

// ResetContentRu resets all changes to the "content_ru" field.
func (m *NewsMutation) ResetContentRu() {
	m.content_ru = nil
	delete(m.clearedFields, news.FieldContentRu)
}

// SetContentKk sets the "content_kk" field.
func (m *NewsMutation) SetContentKk(s string) {
	m.content_kk = &s
}

// ContentKk returns the value of the "content_kk" field in the mutation.
func (m *NewsMutation) ContentKk() (r string, exists bool) {
	v := m.content_kk
	if v == nil {
		return
	}
	return *v, true
}

// OldContentKk returns the old "content_kk" field's value of the News entity.
// If the News object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NewsMutation) OldContentKk(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContentKk is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContentKk requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContentKk: %w", err)
	}
	return oldValue.ContentKk, nil
}

// ClearContentKk clears the value of the "content_kk" field.
func (m *NewsMutation) ClearContentKk() {
	m.content_kk = nil
	m.clearedFields[news.FieldContentKk] = struct{}{}
}

// ContentKkCleared returns if the "content_kk" field was cleared in this mutation.
func (m *NewsMutation) ContentKkCleared() bool {
	_, ok := m.clearedFields[news.FieldContentKk]
	return ok
}

// ResetContentKk resets all changes to the "content_kk" field.
func (m *NewsMutation) ResetContentKk() {
	m.content_kk = nil
	delete(m.clearedFields, news.FieldContentKk)
}

// SetCoverURL sets the "cover_url" field.
func (m *NewsMutation) SetCoverURL(s string) {
	m.cover_url = &s
}

// CoverURL returns the value of the "cover_url" field in the mutation.
func (m *NewsMutation) CoverURL() (r string, exists bool) {
	v := m.cover_url
	if v == nil {
		return
	}
	return *v, true
}

// OldCoverURL returns the old "cover_url" field's value of the News entity.
// If the News object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NewsMutation) OldCoverURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoverURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoverURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoverURL: %w", err)
	}
	return oldValue.CoverURL, nil
}

// ClearCoverURL clears the value of the "cover_url" field.
func (m *NewsMutation) ClearCoverURL() {
	m.cover_url = nil
	m.clearedFields[news.FieldCoverURL] = struct{}{}
}

// CoverURLCleared returns if the "cover_url" field was cleared in this mutation.
func (m *NewsMutation) CoverURLCleared() bool {
	_, ok := m.clearedFields[news.FieldCoverURL]
	return ok
}

// ResetCoverURL resets all changes to the "cover_url" field.
func (m *NewsMutation) ResetCoverURL() {
	m.cover_url = nil
	delete(m.clearedFields, news.FieldCoverURL)
}

// Where appends a list predicates to the NewsMutation builder.
func (m *NewsMutation) Where(ps ...predicate.News) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the NewsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *NewsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.News, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *NewsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *NewsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (News).
func (m *NewsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NewsMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.created_at != nil {
		fields = append(fields, news.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, news.FieldUpdatedAt)
	}
	if m.status != nil {
		fields = append(fields, news.FieldStatus)
	}
	if m.sort != nil {
		fields = append(fields, news.FieldSort)
	}
	if m.title_zh != nil {
		fields = append(fields, news.FieldTitleZh)
	}
	if m.title_en != nil {
		fields = append(fields, news.FieldTitleEn)
	}
	if m.title_ru != nil {
		fields = append(fields, news.FieldTitleRu)
	}
	if m.title_kk != nil {
		fields = append(fields, news.FieldTitleKk)
	}
	if m.content_zh != nil {
		fields = append(fields, news.FieldContentZh)
	}
	if m.content_en != nil {
		fields = append(fields, news.FieldContentEn)
	}
	if m.content_ru != nil {
		fields = append(fields, news.FieldContentRu)
	}
	if m.content_kk != nil {
		fields = append(fields, news.FieldContentKk)
	}
	if m.cover_url != nil {
		fields = append(fields, news.FieldCoverURL)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NewsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case news.FieldCreatedAt:
		return m.CreatedAt()
	case news.FieldUpdatedAt:
		return m.UpdatedAt()
	case news.FieldStatus:
		return m.Status()
	case news.FieldSort:
		return m.Sort()
	case news.FieldTitleZh:
		return m.TitleZh()
	case news.FieldTitleEn:
		return m.TitleEn()
	case news.FieldTitleRu:
		return m.TitleRu()
	case news.FieldTitleKk:
		return m.TitleKk()
	case news.FieldContentZh:
		return m.ContentZh()
	case news.FieldContentEn:
		return m.ContentEn()
	case news.FieldContentRu:
		return m.ContentRu()
	case news.FieldContentKk:
		return m.ContentKk()
	case news.FieldCoverURL:
		return m.CoverURL()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NewsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case news.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case news.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case news.FieldStatus:
		return m.OldStatus(ctx)
	case news.FieldSort:
		return m.OldSort(ctx)
	case news.FieldTitleZh:
		return m.OldTitleZh(ctx)
	case news.FieldTitleEn:
		return m.OldTitleEn(ctx)
	case news.FieldTitleRu:
		return m.OldTitleRu(ctx)
	case news.FieldTitleKk:
		return m.OldTitleKk(ctx)
	case news.FieldContentZh:
		return m.OldContentZh(ctx)
	case news.FieldContentEn:
		return m.OldContentEn(ctx)
	case news.FieldContentRu:
		return m.OldContentRu(ctx)
	case news.FieldContentKk:
		return m.OldContentKk(ctx)
	case news.FieldCoverURL:
		return m.OldCoverURL(ctx)
	}
	return nil, fmt.Errorf("unknown News field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NewsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case news.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case news.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case news.FieldStatus:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case news.FieldSort:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSort(v)
		return nil
	case news.FieldTitleZh:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitleZh(v)
		return nil
	case news.FieldTitleEn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitleEn(v)
		return nil
	case news.FieldTitleRu:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitleRu(v)
		return nil
	case news.FieldTitleKk:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitleKk(v)
		return nil
	case news.FieldContentZh:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContentZh(v)
		return nil
	case news.FieldContentEn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContentEn(v)
		return nil
	case news.FieldContentRu:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContentRu(v)
		return nil
	case news.FieldContentKk:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContentKk(v)
		return nil
	case news.FieldCoverURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoverURL(v)
		return nil
	}
	return fmt.Errorf("unknown News field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NewsMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, news.FieldStatus)
	}
	if m.addsort != nil {
		fields = append(fields, news.FieldSort)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NewsMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case news.FieldStatus:
		return m.AddedStatus()
	case news.FieldSort:
		return m.AddedSort()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NewsMutation) AddField(name string, value ent.Value) error {
	switch name {
	case news.FieldStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	case news.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSort(v)
		return nil
	}
	return fmt.Errorf("unknown News numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NewsMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(news.FieldStatus) {
		fields = append(fields, news.FieldStatus)
	}
	if m.FieldCleared(news.FieldTitleZh) {
		fields = append(fields, news.FieldTitleZh)
	}
	if m.FieldCleared(news.FieldTitleEn) {
		fields = append(fields, news.FieldTitleEn)
	}
	if m.FieldCleared(news.FieldTitleRu) {
		fields = append(fields, news.FieldTitleRu)
	}
	if m.FieldCleared(news.FieldTitleKk) {
		fields = append(fields, news.FieldTitleKk)
	}
	if m.FieldCleared(news.FieldContentZh) {
		fields = append(fields, news.FieldContentZh)
	}
	if m.FieldCleared(news.FieldContentEn) {
		fields = append(fields, news.FieldContentEn)
	}
	if m.FieldCleared(news.FieldContentRu) {
		fields = append(fields, news.FieldContentRu)
	}
	if m.FieldCleared(news.FieldContentKk) {
		fields = append(fields, news.FieldContentKk)
	}
	if m.FieldCleared(news.FieldCoverURL) {
		fields = append(fields, news.FieldCoverURL)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NewsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NewsMutation) ClearField(name string) error {
	switch name {
	case news.FieldStatus:
		m.ClearStatus()
		return nil
	case news.FieldTitleZh:
		m.ClearTitleZh()
		return nil
	case news.FieldTitleEn:
		m.ClearTitleEn()
		return nil
	case news.FieldTitleRu:
		m.ClearTitleRu()
		return nil
	case news.FieldTitleKk:
		m.ClearTitleKk()
		return nil
	case news.FieldContentZh:
		m.ClearContentZh()
		return nil
	case news.FieldContentEn:
		m.ClearContentEn()
		return nil
	case news.FieldContentRu:
		m.ClearContentRu()
		return nil
	case news.FieldContentKk:
		m.ClearContentKk()
		return nil
	case news.FieldCoverURL:
		m.ClearCoverURL()
		return nil
	}
	return fmt.Errorf("unknown News nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NewsMutation) ResetField(name string) error {
	switch name {
	case news.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case news.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case news.FieldStatus:
		m.ResetStatus()
		return nil
	case news.FieldSort:
		m.ResetSort()
		return nil
	case news.FieldTitleZh:
		m.ResetTitleZh()
		return nil
	case news.FieldTitleEn:
		m.ResetTitleEn()
		return nil
	case news.FieldTitleRu:
		m.ResetTitleRu()
		return nil
	case news.FieldTitleKk:
		m.ResetTitleKk()
		return nil
	case news.FieldContentZh:
		m.ResetContentZh()
		return nil
	case news.FieldContentEn:
		m.ResetContentEn()
		return nil
	case news.FieldContentRu:
		m.ResetContentRu()
		return nil
	case news.FieldContentKk:
		m.ResetContentKk()
		return nil
	case news.FieldCoverURL:
		m.ResetCoverURL()
		return nil
	}
	return fmt.Errorf("unknown News field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NewsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NewsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NewsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NewsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NewsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NewsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NewsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown News unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NewsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown News edge %s", name)
}

// OauthProviderMutation represents an operation that mutates the OauthProvider nodes in the graph.
type OauthProviderMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	created_at    *time.Time
	updated_at    *time.Time
	name          *string
	client_id     *string
	client_secret *string
	redirect_url  *string
	scopes        *string
	auth_url      *string
	token_url     *string
	auth_style    *uint64
	addauth_style *int64
	info_url      *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*OauthProvider, error)
	predicates    []predicate.OauthProvider
}

var _ ent.Mutation = (*OauthProviderMutation)(nil)

// oauthproviderOption allows management of the mutation configuration using functional options.
type oauthproviderOption func(*OauthProviderMutation)

// newOauthProviderMutation creates new mutation for the OauthProvider entity.
func newOauthProviderMutation(c config, op Op, opts ...oauthproviderOption) *OauthProviderMutation {
	m := &OauthProviderMutation{
		config:        c,
		op:            op,
		typ:           TypeOauthProvider,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOauthProviderID sets the ID field of the mutation.
func withOauthProviderID(id uint64) oauthproviderOption {
	return func(m *OauthProviderMutation) {
		var (
			err   error
			once  sync.Once
			value *OauthProvider
		)
		m.oldValue = func(ctx context.Context) (*OauthProvider, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OauthProvider.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOauthProvider sets the old OauthProvider of the mutation.
func withOauthProvider(node *OauthProvider) oauthproviderOption {
	return func(m *OauthProviderMutation) {
		m.oldValue = func(context.Context) (*OauthProvider, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OauthProviderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OauthProviderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of OauthProvider entities.
func (m *OauthProviderMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OauthProviderMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OauthProviderMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().OauthProvider.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *OauthProviderMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *OauthProviderMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the OauthProvider entity.
// If the OauthProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OauthProviderMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *OauthProviderMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *OauthProviderMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *OauthProviderMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the OauthProvider entity.
// If the OauthProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OauthProviderMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *OauthProviderMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *OauthProviderMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *OauthProviderMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the OauthProvider entity.
// If the OauthProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OauthProviderMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *OauthProviderMutation) ResetName() {
	m.name = nil
}

// SetClientID sets the "client_id" field.
func (m *OauthProviderMutation) SetClientID(s string) {
	m.client_id = &s
}

// ClientID returns the value of the "client_id" field in the mutation.
func (m *OauthProviderMutation) ClientID() (r string, exists bool) {
	v := m.client_id
	if v == nil {
		return
	}
	return *v, true
}

// OldClientID returns the old "client_id" field's value of the OauthProvider entity.
// If the OauthProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OauthProviderMutation) OldClientID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClientID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClientID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClientID: %w", err)
	}
	return oldValue.ClientID, nil
}

// ResetClientID resets all changes to the "client_id" field.
func (m *OauthProviderMutation) ResetClientID() {
	m.client_id = nil
}

// SetClientSecret sets the "client_secret" field.
func (m *OauthProviderMutation) SetClientSecret(s string) {
	m.client_secret = &s
}

// ClientSecret returns the value of the "client_secret" field in the mutation.
func (m *OauthProviderMutation) ClientSecret() (r string, exists bool) {
	v := m.client_secret
	if v == nil {
		return
	}
	return *v, true
}

// OldClientSecret returns the old "client_secret" field's value of the OauthProvider entity.
// If the OauthProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OauthProviderMutation) OldClientSecret(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClientSecret is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClientSecret requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClientSecret: %w", err)
	}
	return oldValue.ClientSecret, nil
}

// ResetClientSecret resets all changes to the "client_secret" field.
func (m *OauthProviderMutation) ResetClientSecret() {
	m.client_secret = nil
}

// SetRedirectURL sets the "redirect_url" field.
func (m *OauthProviderMutation) SetRedirectURL(s string) {
	m.redirect_url = &s
}

// RedirectURL returns the value of the "redirect_url" field in the mutation.
func (m *OauthProviderMutation) RedirectURL() (r string, exists bool) {
	v := m.redirect_url
	if v == nil {
		return
	}
	return *v, true
}

// OldRedirectURL returns the old "redirect_url" field's value of the OauthProvider entity.
// If the OauthProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OauthProviderMutation) OldRedirectURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRedirectURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRedirectURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRedirectURL: %w", err)
	}
	return oldValue.RedirectURL, nil
}

// ResetRedirectURL resets all changes to the "redirect_url" field.
func (m *OauthProviderMutation) ResetRedirectURL() {
	m.redirect_url = nil
}

// SetScopes sets the "scopes" field.
func (m *OauthProviderMutation) SetScopes(s string) {
	m.scopes = &s
}

// Scopes returns the value of the "scopes" field in the mutation.
func (m *OauthProviderMutation) Scopes() (r string, exists bool) {
	v := m.scopes
	if v == nil {
		return
	}
	return *v, true
}

// OldScopes returns the old "scopes" field's value of the OauthProvider entity.
// If the OauthProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OauthProviderMutation) OldScopes(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScopes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScopes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScopes: %w", err)
	}
	return oldValue.Scopes, nil
}

// ResetScopes resets all changes to the "scopes" field.
func (m *OauthProviderMutation) ResetScopes() {
	m.scopes = nil
}

// SetAuthURL sets the "auth_url" field.
func (m *OauthProviderMutation) SetAuthURL(s string) {
	m.auth_url = &s
}

// AuthURL returns the value of the "auth_url" field in the mutation.
func (m *OauthProviderMutation) AuthURL() (r string, exists bool) {
	v := m.auth_url
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthURL returns the old "auth_url" field's value of the OauthProvider entity.
// If the OauthProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OauthProviderMutation) OldAuthURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthURL: %w", err)
	}
	return oldValue.AuthURL, nil
}

// ResetAuthURL resets all changes to the "auth_url" field.
func (m *OauthProviderMutation) ResetAuthURL() {
	m.auth_url = nil
}

// SetTokenURL sets the "token_url" field.
func (m *OauthProviderMutation) SetTokenURL(s string) {
	m.token_url = &s
}

// TokenURL returns the value of the "token_url" field in the mutation.
func (m *OauthProviderMutation) TokenURL() (r string, exists bool) {
	v := m.token_url
	if v == nil {
		return
	}
	return *v, true
}

// OldTokenURL returns the old "token_url" field's value of the OauthProvider entity.
// If the OauthProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OauthProviderMutation) OldTokenURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTokenURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTokenURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTokenURL: %w", err)
	}
	return oldValue.TokenURL, nil
}

// ResetTokenURL resets all changes to the "token_url" field.
func (m *OauthProviderMutation) ResetTokenURL() {
	m.token_url = nil
}

// SetAuthStyle sets the "auth_style" field.
func (m *OauthProviderMutation) SetAuthStyle(u uint64) {
	m.auth_style = &u
	m.addauth_style = nil
}

// AuthStyle returns the value of the "auth_style" field in the mutation.
func (m *OauthProviderMutation) AuthStyle() (r uint64, exists bool) {
	v := m.auth_style
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthStyle returns the old "auth_style" field's value of the OauthProvider entity.
// If the OauthProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OauthProviderMutation) OldAuthStyle(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthStyle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthStyle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthStyle: %w", err)
	}
	return oldValue.AuthStyle, nil
}

// AddAuthStyle adds u to the "auth_style" field.
func (m *OauthProviderMutation) AddAuthStyle(u int64) {
	if m.addauth_style != nil {
		*m.addauth_style += u
	} else {
		m.addauth_style = &u
	}
}

// AddedAuthStyle returns the value that was added to the "auth_style" field in this mutation.
func (m *OauthProviderMutation) AddedAuthStyle() (r int64, exists bool) {
	v := m.addauth_style
	if v == nil {
		return
	}
	return *v, true
}

// ResetAuthStyle resets all changes to the "auth_style" field.
func (m *OauthProviderMutation) ResetAuthStyle() {
	m.auth_style = nil
	m.addauth_style = nil
}

// SetInfoURL sets the "info_url" field.
func (m *OauthProviderMutation) SetInfoURL(s string) {
	m.info_url = &s
}

// InfoURL returns the value of the "info_url" field in the mutation.
func (m *OauthProviderMutation) InfoURL() (r string, exists bool) {
	v := m.info_url
	if v == nil {
		return
	}
	return *v, true
}

// OldInfoURL returns the old "info_url" field's value of the OauthProvider entity.
// If the OauthProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OauthProviderMutation) OldInfoURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInfoURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInfoURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInfoURL: %w", err)
	}
	return oldValue.InfoURL, nil
}

// ResetInfoURL resets all changes to the "info_url" field.
func (m *OauthProviderMutation) ResetInfoURL() {
	m.info_url = nil
}

// Where appends a list predicates to the OauthProviderMutation builder.
func (m *OauthProviderMutation) Where(ps ...predicate.OauthProvider) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the OauthProviderMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *OauthProviderMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.OauthProvider, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *OauthProviderMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *OauthProviderMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (OauthProvider).
func (m *OauthProviderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OauthProviderMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.created_at != nil {
		fields = append(fields, oauthprovider.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, oauthprovider.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, oauthprovider.FieldName)
	}
	if m.client_id != nil {
		fields = append(fields, oauthprovider.FieldClientID)
	}
	if m.client_secret != nil {
		fields = append(fields, oauthprovider.FieldClientSecret)
	}
	if m.redirect_url != nil {
		fields = append(fields, oauthprovider.FieldRedirectURL)
	}
	if m.scopes != nil {
		fields = append(fields, oauthprovider.FieldScopes)
	}
	if m.auth_url != nil {
		fields = append(fields, oauthprovider.FieldAuthURL)
	}
	if m.token_url != nil {
		fields = append(fields, oauthprovider.FieldTokenURL)
	}
	if m.auth_style != nil {
		fields = append(fields, oauthprovider.FieldAuthStyle)
	}
	if m.info_url != nil {
		fields = append(fields, oauthprovider.FieldInfoURL)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OauthProviderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case oauthprovider.FieldCreatedAt:
		return m.CreatedAt()
	case oauthprovider.FieldUpdatedAt:
		return m.UpdatedAt()
	case oauthprovider.FieldName:
		return m.Name()
	case oauthprovider.FieldClientID:
		return m.ClientID()
	case oauthprovider.FieldClientSecret:
		return m.ClientSecret()
	case oauthprovider.FieldRedirectURL:
		return m.RedirectURL()
	case oauthprovider.FieldScopes:
		return m.Scopes()
	case oauthprovider.FieldAuthURL:
		return m.AuthURL()
	case oauthprovider.FieldTokenURL:
		return m.TokenURL()
	case oauthprovider.FieldAuthStyle:
		return m.AuthStyle()
	case oauthprovider.FieldInfoURL:
		return m.InfoURL()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OauthProviderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case oauthprovider.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case oauthprovider.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case oauthprovider.FieldName:
		return m.OldName(ctx)
	case oauthprovider.FieldClientID:
		return m.OldClientID(ctx)
	case oauthprovider.FieldClientSecret:
		return m.OldClientSecret(ctx)
	case oauthprovider.FieldRedirectURL:
		return m.OldRedirectURL(ctx)
	case oauthprovider.FieldScopes:
		return m.OldScopes(ctx)
	case oauthprovider.FieldAuthURL:
		return m.OldAuthURL(ctx)
	case oauthprovider.FieldTokenURL:
		return m.OldTokenURL(ctx)
	case oauthprovider.FieldAuthStyle:
		return m.OldAuthStyle(ctx)
	case oauthprovider.FieldInfoURL:
		return m.OldInfoURL(ctx)
	}
	return nil, fmt.Errorf("unknown OauthProvider field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OauthProviderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case oauthprovider.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case oauthprovider.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case oauthprovider.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case oauthprovider.FieldClientID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClientID(v)
		return nil
	case oauthprovider.FieldClientSecret:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClientSecret(v)
		return nil
	case oauthprovider.FieldRedirectURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRedirectURL(v)
		return nil
	case oauthprovider.FieldScopes:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScopes(v)
		return nil
	case oauthprovider.FieldAuthURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthURL(v)
		return nil
	case oauthprovider.FieldTokenURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTokenURL(v)
		return nil
	case oauthprovider.FieldAuthStyle:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthStyle(v)
		return nil
	case oauthprovider.FieldInfoURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInfoURL(v)
		return nil
	}
	return fmt.Errorf("unknown OauthProvider field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OauthProviderMutation) AddedFields() []string {
	var fields []string
	if m.addauth_style != nil {
		fields = append(fields, oauthprovider.FieldAuthStyle)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OauthProviderMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case oauthprovider.FieldAuthStyle:
		return m.AddedAuthStyle()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OauthProviderMutation) AddField(name string, value ent.Value) error {
	switch name {
	case oauthprovider.FieldAuthStyle:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAuthStyle(v)
		return nil
	}
	return fmt.Errorf("unknown OauthProvider numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OauthProviderMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OauthProviderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OauthProviderMutation) ClearField(name string) error {
	return fmt.Errorf("unknown OauthProvider nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OauthProviderMutation) ResetField(name string) error {
	switch name {
	case oauthprovider.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case oauthprovider.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case oauthprovider.FieldName:
		m.ResetName()
		return nil
	case oauthprovider.FieldClientID:
		m.ResetClientID()
		return nil
	case oauthprovider.FieldClientSecret:
		m.ResetClientSecret()
		return nil
	case oauthprovider.FieldRedirectURL:
		m.ResetRedirectURL()
		return nil
	case oauthprovider.FieldScopes:
		m.ResetScopes()
		return nil
	case oauthprovider.FieldAuthURL:
		m.ResetAuthURL()
		return nil
	case oauthprovider.FieldTokenURL:
		m.ResetTokenURL()
		return nil
	case oauthprovider.FieldAuthStyle:
		m.ResetAuthStyle()
		return nil
	case oauthprovider.FieldInfoURL:
		m.ResetInfoURL()
		return nil
	}
	return fmt.Errorf("unknown OauthProvider field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OauthProviderMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OauthProviderMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OauthProviderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OauthProviderMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OauthProviderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OauthProviderMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OauthProviderMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown OauthProvider unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OauthProviderMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown OauthProvider edge %s", name)
}

// ServiceMutation represents an operation that mutates the Service nodes in the graph.
type ServiceMutation struct {
	config
	op             Op
	typ            string
	id             *uint64
	created_at     *time.Time
	updated_at     *time.Time
	status         *uint8
	addstatus      *int8
	sort           *uint32
	addsort        *int32
	name_zh        *string
	name_en        *string
	name_ru        *string
	name_kk        *string
	description_zh *string
	description_en *string
	description_ru *string
	description_kk *string
	cover_url      *string
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*Service, error)
	predicates     []predicate.Service
}

var _ ent.Mutation = (*ServiceMutation)(nil)

// serviceOption allows management of the mutation configuration using functional options.
type serviceOption func(*ServiceMutation)

// newServiceMutation creates new mutation for the Service entity.
func newServiceMutation(c config, op Op, opts ...serviceOption) *ServiceMutation {
	m := &ServiceMutation{
		config:        c,
		op:            op,
		typ:           TypeService,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withServiceID sets the ID field of the mutation.
func withServiceID(id uint64) serviceOption {
	return func(m *ServiceMutation) {
		var (
			err   error
			once  sync.Once
			value *Service
		)
		m.oldValue = func(ctx context.Context) (*Service, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Service.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withService sets the old Service of the mutation.
func withService(node *Service) serviceOption {
	return func(m *ServiceMutation) {
		m.oldValue = func(context.Context) (*Service, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ServiceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ServiceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Service entities.
func (m *ServiceMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ServiceMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ServiceMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Service.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ServiceMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ServiceMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Service entity.
// If the Service object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ServiceMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ServiceMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ServiceMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Service entity.
// If the Service object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ServiceMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetStatus sets the "status" field.
func (m *ServiceMutation) SetStatus(u uint8) {
	m.status = &u
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *ServiceMutation) Status() (r uint8, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Service entity.
// If the Service object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceMutation) OldStatus(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds u to the "status" field.
func (m *ServiceMutation) AddStatus(u int8) {
	if m.addstatus != nil {
		*m.addstatus += u
	} else {
		m.addstatus = &u
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *ServiceMutation) AddedStatus() (r int8, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ClearStatus clears the value of the "status" field.
func (m *ServiceMutation) ClearStatus() {
	m.status = nil
	m.addstatus = nil
	m.clearedFields[service.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *ServiceMutation) StatusCleared() bool {
	_, ok := m.clearedFields[service.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *ServiceMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
	delete(m.clearedFields, service.FieldStatus)
}

// SetSort sets the "sort" field.
func (m *ServiceMutation) SetSort(u uint32) {
	m.sort = &u
	m.addsort = nil
}

// Sort returns the value of the "sort" field in the mutation.
func (m *ServiceMutation) Sort() (r uint32, exists bool) {
	v := m.sort
	if v == nil {
		return
	}
	return *v, true
}

// OldSort returns the old "sort" field's value of the Service entity.
// If the Service object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceMutation) OldSort(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSort: %w", err)
	}
	return oldValue.Sort, nil
}

// AddSort adds u to the "sort" field.
func (m *ServiceMutation) AddSort(u int32) {
	if m.addsort != nil {
		*m.addsort += u
	} else {
		m.addsort = &u
	}
}

// AddedSort returns the value that was added to the "sort" field in this mutation.
func (m *ServiceMutation) AddedSort() (r int32, exists bool) {
	v := m.addsort
	if v == nil {
		return
	}
	return *v, true
}

// ResetSort resets all changes to the "sort" field.
func (m *ServiceMutation) ResetSort() {
	m.sort = nil
	m.addsort = nil
}

// SetNameZh sets the "name_zh" field.
func (m *ServiceMutation) SetNameZh(s string) {
	m.name_zh = &s
}

// NameZh returns the value of the "name_zh" field in the mutation.
func (m *ServiceMutation) NameZh() (r string, exists bool) {
	v := m.name_zh
	if v == nil {
		return
	}
	return *v, true
}

// OldNameZh returns the old "name_zh" field's value of the Service entity.
// If the Service object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceMutation) OldNameZh(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNameZh is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNameZh requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameZh: %w", err)
	}
	return oldValue.NameZh, nil
}

// ResetNameZh resets all changes to the "name_zh" field.
func (m *ServiceMutation) ResetNameZh() {
	m.name_zh = nil
}

// SetNameEn sets the "name_en" field.
func (m *ServiceMutation) SetNameEn(s string) {
	m.name_en = &s
}

// NameEn returns the value of the "name_en" field in the mutation.
func (m *ServiceMutation) NameEn() (r string, exists bool) {
	v := m.name_en
	if v == nil {
		return
	}
	return *v, true
}

// OldNameEn returns the old "name_en" field's value of the Service entity.
// If the Service object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceMutation) OldNameEn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNameEn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNameEn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameEn: %w", err)
	}
	return oldValue.NameEn, nil
}

// ResetNameEn resets all changes to the "name_en" field.
func (m *ServiceMutation) ResetNameEn() {
	m.name_en = nil
}

// SetNameRu sets the "name_ru" field.
func (m *ServiceMutation) SetNameRu(s string) {
	m.name_ru = &s
}

// NameRu returns the value of the "name_ru" field in the mutation.
func (m *ServiceMutation) NameRu() (r string, exists bool) {
	v := m.name_ru
	if v == nil {
		return
	}
	return *v, true
}

// OldNameRu returns the old "name_ru" field's value of the Service entity.
// If the Service object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceMutation) OldNameRu(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNameRu is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNameRu requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameRu: %w", err)
	}
	return oldValue.NameRu, nil
}

// ResetNameRu resets all changes to the "name_ru" field.
func (m *ServiceMutation) ResetNameRu() {
	m.name_ru = nil
}

// SetNameKk sets the "name_kk" field.
func (m *ServiceMutation) SetNameKk(s string) {
	m.name_kk = &s
}

// NameKk returns the value of the "name_kk" field in the mutation.
func (m *ServiceMutation) NameKk() (r string, exists bool) {
	v := m.name_kk
	if v == nil {
		return
	}
	return *v, true
}

// OldNameKk returns the old "name_kk" field's value of the Service entity.
// If the Service object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceMutation) OldNameKk(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNameKk is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNameKk requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameKk: %w", err)
	}
	return oldValue.NameKk, nil
}

// ResetNameKk resets all changes to the "name_kk" field.
func (m *ServiceMutation) ResetNameKk() {
	m.name_kk = nil
}

// SetDescriptionZh sets the "description_zh" field.
func (m *ServiceMutation) SetDescriptionZh(s string) {
	m.description_zh = &s
}

// DescriptionZh returns the value of the "description_zh" field in the mutation.
func (m *ServiceMutation) DescriptionZh() (r string, exists bool) {
	v := m.description_zh
	if v == nil {
		return
	}
	return *v, true
}

// OldDescriptionZh returns the old "description_zh" field's value of the Service entity.
// If the Service object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceMutation) OldDescriptionZh(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescriptionZh is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescriptionZh requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescriptionZh: %w", err)
	}
	return oldValue.DescriptionZh, nil
}

// ClearDescriptionZh clears the value of the "description_zh" field.
func (m *ServiceMutation) ClearDescriptionZh() {
	m.description_zh = nil
	m.clearedFields[service.FieldDescriptionZh] = struct{}{}
}

// DescriptionZhCleared returns if the "description_zh" field was cleared in this mutation.
func (m *ServiceMutation) DescriptionZhCleared() bool {
	_, ok := m.clearedFields[service.FieldDescriptionZh]
	return ok
}

// ResetDescriptionZh resets all changes to the "description_zh" field.
func (m *ServiceMutation) ResetDescriptionZh() {
	m.description_zh = nil
	delete(m.clearedFields, service.FieldDescriptionZh)
}

// SetDescriptionEn sets the "description_en" field.
func (m *ServiceMutation) SetDescriptionEn(s string) {
	m.description_en = &s
}

// DescriptionEn returns the value of the "description_en" field in the mutation.
func (m *ServiceMutation) DescriptionEn() (r string, exists bool) {
	v := m.description_en
	if v == nil {
		return
	}
	return *v, true
}

// OldDescriptionEn returns the old "description_en" field's value of the Service entity.
// If the Service object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceMutation) OldDescriptionEn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescriptionEn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescriptionEn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescriptionEn: %w", err)
	}
	return oldValue.DescriptionEn, nil
}

// ClearDescriptionEn clears the value of the "description_en" field.
func (m *ServiceMutation) ClearDescriptionEn() {
	m.description_en = nil
	m.clearedFields[service.FieldDescriptionEn] = struct{}{}
}

// DescriptionEnCleared returns if the "description_en" field was cleared in this mutation.
func (m *ServiceMutation) DescriptionEnCleared() bool {
	_, ok := m.clearedFields[service.FieldDescriptionEn]
	return ok
}

// ResetDescriptionEn resets all changes to the "description_en" field.
func (m *ServiceMutation) ResetDescriptionEn() {
	m.description_en = nil
	delete(m.clearedFields, service.FieldDescriptionEn)
}

// SetDescriptionRu sets the "description_ru" field.
func (m *ServiceMutation) SetDescriptionRu(s string) {
	m.description_ru = &s
}

// DescriptionRu returns the value of the "description_ru" field in the mutation.
func (m *ServiceMutation) DescriptionRu() (r string, exists bool) {
	v := m.description_ru
	if v == nil {
		return
	}
	return *v, true
}

// OldDescriptionRu returns the old "description_ru" field's value of the Service entity.
// If the Service object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceMutation) OldDescriptionRu(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescriptionRu is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescriptionRu requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescriptionRu: %w", err)
	}
	return oldValue.DescriptionRu, nil
}

// ClearDescriptionRu clears the value of the "description_ru" field.
func (m *ServiceMutation) ClearDescriptionRu() {
	m.description_ru = nil
	m.clearedFields[service.FieldDescriptionRu] = struct{}{}
}

// DescriptionRuCleared returns if the "description_ru" field was cleared in this mutation.
func (m *ServiceMutation) DescriptionRuCleared() bool {
	_, ok := m.clearedFields[service.FieldDescriptionRu]
	return ok
}

// ResetDescriptionRu resets all changes to the "description_ru" field.
func (m *ServiceMutation) ResetDescriptionRu() {
	m.description_ru = nil
	delete(m.clearedFields, service.FieldDescriptionRu)
}

// SetDescriptionKk sets the "description_kk" field.
func (m *ServiceMutation) SetDescriptionKk(s string) {
	m.description_kk = &s
}

// DescriptionKk returns the value of the "description_kk" field in the mutation.
func (m *ServiceMutation) DescriptionKk() (r string, exists bool) {
	v := m.description_kk
	if v == nil {
		return
	}
	return *v, true
}

// OldDescriptionKk returns the old "description_kk" field's value of the Service entity.
// If the Service object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceMutation) OldDescriptionKk(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescriptionKk is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescriptionKk requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescriptionKk: %w", err)
	}
	return oldValue.DescriptionKk, nil
}

// ClearDescriptionKk clears the value of the "description_kk" field.
func (m *ServiceMutation) ClearDescriptionKk() {
	m.description_kk = nil
	m.clearedFields[service.FieldDescriptionKk] = struct{}{}
}

// DescriptionKkCleared returns if the "description_kk" field was cleared in this mutation.
func (m *ServiceMutation) DescriptionKkCleared() bool {
	_, ok := m.clearedFields[service.FieldDescriptionKk]
	return ok
}

// ResetDescriptionKk resets all changes to the "description_kk" field.
func (m *ServiceMutation) ResetDescriptionKk() {
	m.description_kk = nil
	delete(m.clearedFields, service.FieldDescriptionKk)
}

// SetCoverURL sets the "cover_url" field.
func (m *ServiceMutation) SetCoverURL(s string) {
	m.cover_url = &s
}

// CoverURL returns the value of the "cover_url" field in the mutation.
func (m *ServiceMutation) CoverURL() (r string, exists bool) {
	v := m.cover_url
	if v == nil {
		return
	}
	return *v, true
}

// OldCoverURL returns the old "cover_url" field's value of the Service entity.
// If the Service object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceMutation) OldCoverURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoverURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoverURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoverURL: %w", err)
	}
	return oldValue.CoverURL, nil
}

// ClearCoverURL clears the value of the "cover_url" field.
func (m *ServiceMutation) ClearCoverURL() {
	m.cover_url = nil
	m.clearedFields[service.FieldCoverURL] = struct{}{}
}

// CoverURLCleared returns if the "cover_url" field was cleared in this mutation.
func (m *ServiceMutation) CoverURLCleared() bool {
	_, ok := m.clearedFields[service.FieldCoverURL]
	return ok
}

// ResetCoverURL resets all changes to the "cover_url" field.
func (m *ServiceMutation) ResetCoverURL() {
	m.cover_url = nil
	delete(m.clearedFields, service.FieldCoverURL)
}

// Where appends a list predicates to the ServiceMutation builder.
func (m *ServiceMutation) Where(ps ...predicate.Service) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ServiceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ServiceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Service, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ServiceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ServiceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Service).
func (m *ServiceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ServiceMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.created_at != nil {
		fields = append(fields, service.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, service.FieldUpdatedAt)
	}
	if m.status != nil {
		fields = append(fields, service.FieldStatus)
	}
	if m.sort != nil {
		fields = append(fields, service.FieldSort)
	}
	if m.name_zh != nil {
		fields = append(fields, service.FieldNameZh)
	}
	if m.name_en != nil {
		fields = append(fields, service.FieldNameEn)
	}
	if m.name_ru != nil {
		fields = append(fields, service.FieldNameRu)
	}
	if m.name_kk != nil {
		fields = append(fields, service.FieldNameKk)
	}
	if m.description_zh != nil {
		fields = append(fields, service.FieldDescriptionZh)
	}
	if m.description_en != nil {
		fields = append(fields, service.FieldDescriptionEn)
	}
	if m.description_ru != nil {
		fields = append(fields, service.FieldDescriptionRu)
	}
	if m.description_kk != nil {
		fields = append(fields, service.FieldDescriptionKk)
	}
	if m.cover_url != nil {
		fields = append(fields, service.FieldCoverURL)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ServiceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case service.FieldCreatedAt:
		return m.CreatedAt()
	case service.FieldUpdatedAt:
		return m.UpdatedAt()
	case service.FieldStatus:
		return m.Status()
	case service.FieldSort:
		return m.Sort()
	case service.FieldNameZh:
		return m.NameZh()
	case service.FieldNameEn:
		return m.NameEn()
	case service.FieldNameRu:
		return m.NameRu()
	case service.FieldNameKk:
		return m.NameKk()
	case service.FieldDescriptionZh:
		return m.DescriptionZh()
	case service.FieldDescriptionEn:
		return m.DescriptionEn()
	case service.FieldDescriptionRu:
		return m.DescriptionRu()
	case service.FieldDescriptionKk:
		return m.DescriptionKk()
	case service.FieldCoverURL:
		return m.CoverURL()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ServiceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case service.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case service.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case service.FieldStatus:
		return m.OldStatus(ctx)
	case service.FieldSort:
		return m.OldSort(ctx)
	case service.FieldNameZh:
		return m.OldNameZh(ctx)
	case service.FieldNameEn:
		return m.OldNameEn(ctx)
	case service.FieldNameRu:
		return m.OldNameRu(ctx)
	case service.FieldNameKk:
		return m.OldNameKk(ctx)
	case service.FieldDescriptionZh:
		return m.OldDescriptionZh(ctx)
	case service.FieldDescriptionEn:
		return m.OldDescriptionEn(ctx)
	case service.FieldDescriptionRu:
		return m.OldDescriptionRu(ctx)
	case service.FieldDescriptionKk:
		return m.OldDescriptionKk(ctx)
	case service.FieldCoverURL:
		return m.OldCoverURL(ctx)
	}
	return nil, fmt.Errorf("unknown Service field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ServiceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case service.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case service.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case service.FieldStatus:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case service.FieldSort:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSort(v)
		return nil
	case service.FieldNameZh:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameZh(v)
		return nil
	case service.FieldNameEn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameEn(v)
		return nil
	case service.FieldNameRu:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameRu(v)
		return nil
	case service.FieldNameKk:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameKk(v)
		return nil
	case service.FieldDescriptionZh:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescriptionZh(v)
		return nil
	case service.FieldDescriptionEn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescriptionEn(v)
		return nil
	case service.FieldDescriptionRu:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescriptionRu(v)
		return nil
	case service.FieldDescriptionKk:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescriptionKk(v)
		return nil
	case service.FieldCoverURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoverURL(v)
		return nil
	}
	return fmt.Errorf("unknown Service field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ServiceMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, service.FieldStatus)
	}
	if m.addsort != nil {
		fields = append(fields, service.FieldSort)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ServiceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case service.FieldStatus:
		return m.AddedStatus()
	case service.FieldSort:
		return m.AddedSort()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ServiceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case service.FieldStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	case service.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSort(v)
		return nil
	}
	return fmt.Errorf("unknown Service numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ServiceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(service.FieldStatus) {
		fields = append(fields, service.FieldStatus)
	}
	if m.FieldCleared(service.FieldDescriptionZh) {
		fields = append(fields, service.FieldDescriptionZh)
	}
	if m.FieldCleared(service.FieldDescriptionEn) {
		fields = append(fields, service.FieldDescriptionEn)
	}
	if m.FieldCleared(service.FieldDescriptionRu) {
		fields = append(fields, service.FieldDescriptionRu)
	}
	if m.FieldCleared(service.FieldDescriptionKk) {
		fields = append(fields, service.FieldDescriptionKk)
	}
	if m.FieldCleared(service.FieldCoverURL) {
		fields = append(fields, service.FieldCoverURL)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ServiceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ServiceMutation) ClearField(name string) error {
	switch name {
	case service.FieldStatus:
		m.ClearStatus()
		return nil
	case service.FieldDescriptionZh:
		m.ClearDescriptionZh()
		return nil
	case service.FieldDescriptionEn:
		m.ClearDescriptionEn()
		return nil
	case service.FieldDescriptionRu:
		m.ClearDescriptionRu()
		return nil
	case service.FieldDescriptionKk:
		m.ClearDescriptionKk()
		return nil
	case service.FieldCoverURL:
		m.ClearCoverURL()
		return nil
	}
	return fmt.Errorf("unknown Service nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ServiceMutation) ResetField(name string) error {
	switch name {
	case service.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case service.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case service.FieldStatus:
		m.ResetStatus()
		return nil
	case service.FieldSort:
		m.ResetSort()
		return nil
	case service.FieldNameZh:
		m.ResetNameZh()
		return nil
	case service.FieldNameEn:
		m.ResetNameEn()
		return nil
	case service.FieldNameRu:
		m.ResetNameRu()
		return nil
	case service.FieldNameKk:
		m.ResetNameKk()
		return nil
	case service.FieldDescriptionZh:
		m.ResetDescriptionZh()
		return nil
	case service.FieldDescriptionEn:
		m.ResetDescriptionEn()
		return nil
	case service.FieldDescriptionRu:
		m.ResetDescriptionRu()
		return nil
	case service.FieldDescriptionKk:
		m.ResetDescriptionKk()
		return nil
	case service.FieldCoverURL:
		m.ResetCoverURL()
		return nil
	}
	return fmt.Errorf("unknown Service field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ServiceMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ServiceMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ServiceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ServiceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ServiceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ServiceMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ServiceMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Service unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ServiceMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Service edge %s", name)
}

// SwiperMutation represents an operation that mutates the Swiper nodes in the graph.
type SwiperMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	created_at    *time.Time
	updated_at    *time.Time
	status        *uint8
	addstatus     *int8
	sort          *uint32
	addsort       *int32
	title_zh      *string
	title_en      *string
	title_ru      *string
	title_kk      *string
	banner_zh     *string
	banner_en     *string
	banner_ru     *string
	banner_kk     *string
	content_zh    *string
	content_en    *string
	content_ru    *string
	content_kk    *string
	jump_url      *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Swiper, error)
	predicates    []predicate.Swiper
}

var _ ent.Mutation = (*SwiperMutation)(nil)

// swiperOption allows management of the mutation configuration using functional options.
type swiperOption func(*SwiperMutation)

// newSwiperMutation creates new mutation for the Swiper entity.
func newSwiperMutation(c config, op Op, opts ...swiperOption) *SwiperMutation {
	m := &SwiperMutation{
		config:        c,
		op:            op,
		typ:           TypeSwiper,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSwiperID sets the ID field of the mutation.
func withSwiperID(id uint64) swiperOption {
	return func(m *SwiperMutation) {
		var (
			err   error
			once  sync.Once
			value *Swiper
		)
		m.oldValue = func(ctx context.Context) (*Swiper, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Swiper.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSwiper sets the old Swiper of the mutation.
func withSwiper(node *Swiper) swiperOption {
	return func(m *SwiperMutation) {
		m.oldValue = func(context.Context) (*Swiper, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SwiperMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SwiperMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Swiper entities.
func (m *SwiperMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SwiperMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SwiperMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Swiper.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *SwiperMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SwiperMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Swiper entity.
// If the Swiper object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SwiperMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SwiperMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SwiperMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SwiperMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Swiper entity.
// If the Swiper object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SwiperMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SwiperMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetStatus sets the "status" field.
func (m *SwiperMutation) SetStatus(u uint8) {
	m.status = &u
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *SwiperMutation) Status() (r uint8, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Swiper entity.
// If the Swiper object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SwiperMutation) OldStatus(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds u to the "status" field.
func (m *SwiperMutation) AddStatus(u int8) {
	if m.addstatus != nil {
		*m.addstatus += u
	} else {
		m.addstatus = &u
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *SwiperMutation) AddedStatus() (r int8, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ClearStatus clears the value of the "status" field.
func (m *SwiperMutation) ClearStatus() {
	m.status = nil
	m.addstatus = nil
	m.clearedFields[swiper.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *SwiperMutation) StatusCleared() bool {
	_, ok := m.clearedFields[swiper.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *SwiperMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
	delete(m.clearedFields, swiper.FieldStatus)
}

// SetSort sets the "sort" field.
func (m *SwiperMutation) SetSort(u uint32) {
	m.sort = &u
	m.addsort = nil
}

// Sort returns the value of the "sort" field in the mutation.
func (m *SwiperMutation) Sort() (r uint32, exists bool) {
	v := m.sort
	if v == nil {
		return
	}
	return *v, true
}

// OldSort returns the old "sort" field's value of the Swiper entity.
// If the Swiper object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SwiperMutation) OldSort(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSort: %w", err)
	}
	return oldValue.Sort, nil
}

// AddSort adds u to the "sort" field.
func (m *SwiperMutation) AddSort(u int32) {
	if m.addsort != nil {
		*m.addsort += u
	} else {
		m.addsort = &u
	}
}

// AddedSort returns the value that was added to the "sort" field in this mutation.
func (m *SwiperMutation) AddedSort() (r int32, exists bool) {
	v := m.addsort
	if v == nil {
		return
	}
	return *v, true
}

// ResetSort resets all changes to the "sort" field.
func (m *SwiperMutation) ResetSort() {
	m.sort = nil
	m.addsort = nil
}

// SetTitleZh sets the "title_zh" field.
func (m *SwiperMutation) SetTitleZh(s string) {
	m.title_zh = &s
}

// TitleZh returns the value of the "title_zh" field in the mutation.
func (m *SwiperMutation) TitleZh() (r string, exists bool) {
	v := m.title_zh
	if v == nil {
		return
	}
	return *v, true
}

// OldTitleZh returns the old "title_zh" field's value of the Swiper entity.
// If the Swiper object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SwiperMutation) OldTitleZh(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitleZh is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitleZh requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitleZh: %w", err)
	}
	return oldValue.TitleZh, nil
}

// ClearTitleZh clears the value of the "title_zh" field.
func (m *SwiperMutation) ClearTitleZh() {
	m.title_zh = nil
	m.clearedFields[swiper.FieldTitleZh] = struct{}{}
}

// TitleZhCleared returns if the "title_zh" field was cleared in this mutation.
func (m *SwiperMutation) TitleZhCleared() bool {
	_, ok := m.clearedFields[swiper.FieldTitleZh]
	return ok
}

// ResetTitleZh resets all changes to the "title_zh" field.
func (m *SwiperMutation) ResetTitleZh() {
	m.title_zh = nil
	delete(m.clearedFields, swiper.FieldTitleZh)
}

// SetTitleEn sets the "title_en" field.
func (m *SwiperMutation) SetTitleEn(s string) {
	m.title_en = &s
}

// TitleEn returns the value of the "title_en" field in the mutation.
func (m *SwiperMutation) TitleEn() (r string, exists bool) {
	v := m.title_en
	if v == nil {
		return
	}
	return *v, true
}

// OldTitleEn returns the old "title_en" field's value of the Swiper entity.
// If the Swiper object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SwiperMutation) OldTitleEn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitleEn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitleEn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitleEn: %w", err)
	}
	return oldValue.TitleEn, nil
}

// ClearTitleEn clears the value of the "title_en" field.
func (m *SwiperMutation) ClearTitleEn() {
	m.title_en = nil
	m.clearedFields[swiper.FieldTitleEn] = struct{}{}
}

// TitleEnCleared returns if the "title_en" field was cleared in this mutation.
func (m *SwiperMutation) TitleEnCleared() bool {
	_, ok := m.clearedFields[swiper.FieldTitleEn]
	return ok
}

// ResetTitleEn resets all changes to the "title_en" field.
func (m *SwiperMutation) ResetTitleEn() {
	m.title_en = nil
	delete(m.clearedFields, swiper.FieldTitleEn)
}

// SetTitleRu sets the "title_ru" field.
func (m *SwiperMutation) SetTitleRu(s string) {
	m.title_ru = &s
}

// TitleRu returns the value of the "title_ru" field in the mutation.
func (m *SwiperMutation) TitleRu() (r string, exists bool) {
	v := m.title_ru
	if v == nil {
		return
	}
	return *v, true
}

// OldTitleRu returns the old "title_ru" field's value of the Swiper entity.
// If the Swiper object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SwiperMutation) OldTitleRu(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitleRu is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitleRu requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitleRu: %w", err)
	}
	return oldValue.TitleRu, nil
}

// ClearTitleRu clears the value of the "title_ru" field.
func (m *SwiperMutation) ClearTitleRu() {
	m.title_ru = nil
	m.clearedFields[swiper.FieldTitleRu] = struct{}{}
}

// TitleRuCleared returns if the "title_ru" field was cleared in this mutation.
func (m *SwiperMutation) TitleRuCleared() bool {
	_, ok := m.clearedFields[swiper.FieldTitleRu]
	return ok
}

// ResetTitleRu resets all changes to the "title_ru" field.
func (m *SwiperMutation) ResetTitleRu() {
	m.title_ru = nil
	delete(m.clearedFields, swiper.FieldTitleRu)
}

// SetTitleKk sets the "title_kk" field.
func (m *SwiperMutation) SetTitleKk(s string) {
	m.title_kk = &s
}

// TitleKk returns the value of the "title_kk" field in the mutation.
func (m *SwiperMutation) TitleKk() (r string, exists bool) {
	v := m.title_kk
	if v == nil {
		return
	}
	return *v, true
}

// OldTitleKk returns the old "title_kk" field's value of the Swiper entity.
// If the Swiper object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SwiperMutation) OldTitleKk(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitleKk is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitleKk requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitleKk: %w", err)
	}
	return oldValue.TitleKk, nil
}

// ClearTitleKk clears the value of the "title_kk" field.
func (m *SwiperMutation) ClearTitleKk() {
	m.title_kk = nil
	m.clearedFields[swiper.FieldTitleKk] = struct{}{}
}

// TitleKkCleared returns if the "title_kk" field was cleared in this mutation.
func (m *SwiperMutation) TitleKkCleared() bool {
	_, ok := m.clearedFields[swiper.FieldTitleKk]
	return ok
}

// ResetTitleKk resets all changes to the "title_kk" field.
func (m *SwiperMutation) ResetTitleKk() {
	m.title_kk = nil
	delete(m.clearedFields, swiper.FieldTitleKk)
}

// SetBannerZh sets the "banner_zh" field.
func (m *SwiperMutation) SetBannerZh(s string) {
	m.banner_zh = &s
}

// BannerZh returns the value of the "banner_zh" field in the mutation.
func (m *SwiperMutation) BannerZh() (r string, exists bool) {
	v := m.banner_zh
	if v == nil {
		return
	}
	return *v, true
}

// OldBannerZh returns the old "banner_zh" field's value of the Swiper entity.
// If the Swiper object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SwiperMutation) OldBannerZh(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBannerZh is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBannerZh requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBannerZh: %w", err)
	}
	return oldValue.BannerZh, nil
}

// ClearBannerZh clears the value of the "banner_zh" field.
func (m *SwiperMutation) ClearBannerZh() {
	m.banner_zh = nil
	m.clearedFields[swiper.FieldBannerZh] = struct{}{}
}

// BannerZhCleared returns if the "banner_zh" field was cleared in this mutation.
func (m *SwiperMutation) BannerZhCleared() bool {
	_, ok := m.clearedFields[swiper.FieldBannerZh]
	return ok
}

// ResetBannerZh resets all changes to the "banner_zh" field.
func (m *SwiperMutation) ResetBannerZh() {
	m.banner_zh = nil
	delete(m.clearedFields, swiper.FieldBannerZh)
}

// SetBannerEn sets the "banner_en" field.
func (m *SwiperMutation) SetBannerEn(s string) {
	m.banner_en = &s
}

// BannerEn returns the value of the "banner_en" field in the mutation.
func (m *SwiperMutation) BannerEn() (r string, exists bool) {
	v := m.banner_en
	if v == nil {
		return
	}
	return *v, true
}

// OldBannerEn returns the old "banner_en" field's value of the Swiper entity.
// If the Swiper object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SwiperMutation) OldBannerEn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBannerEn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBannerEn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBannerEn: %w", err)
	}
	return oldValue.BannerEn, nil
}

// ClearBannerEn clears the value of the "banner_en" field.
func (m *SwiperMutation) ClearBannerEn() {
	m.banner_en = nil
	m.clearedFields[swiper.FieldBannerEn] = struct{}{}
}

// BannerEnCleared returns if the "banner_en" field was cleared in this mutation.
func (m *SwiperMutation) BannerEnCleared() bool {
	_, ok := m.clearedFields[swiper.FieldBannerEn]
	return ok
}

// ResetBannerEn resets all changes to the "banner_en" field.
func (m *SwiperMutation) ResetBannerEn() {
	m.banner_en = nil
	delete(m.clearedFields, swiper.FieldBannerEn)
}

// SetBannerRu sets the "banner_ru" field.
func (m *SwiperMutation) SetBannerRu(s string) {
	m.banner_ru = &s
}

// BannerRu returns the value of the "banner_ru" field in the mutation.
func (m *SwiperMutation) BannerRu() (r string, exists bool) {
	v := m.banner_ru
	if v == nil {
		return
	}
	return *v, true
}

// OldBannerRu returns the old "banner_ru" field's value of the Swiper entity.
// If the Swiper object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SwiperMutation) OldBannerRu(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBannerRu is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBannerRu requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBannerRu: %w", err)
	}
	return oldValue.BannerRu, nil
}

// ClearBannerRu clears the value of the "banner_ru" field.
func (m *SwiperMutation) ClearBannerRu() {
	m.banner_ru = nil
	m.clearedFields[swiper.FieldBannerRu] = struct{}{}
}

// BannerRuCleared returns if the "banner_ru" field was cleared in this mutation.
func (m *SwiperMutation) BannerRuCleared() bool {
	_, ok := m.clearedFields[swiper.FieldBannerRu]
	return ok
}

// ResetBannerRu resets all changes to the "banner_ru" field.
func (m *SwiperMutation) ResetBannerRu() {
	m.banner_ru = nil
	delete(m.clearedFields, swiper.FieldBannerRu)
}

// SetBannerKk sets the "banner_kk" field.
func (m *SwiperMutation) SetBannerKk(s string) {
	m.banner_kk = &s
}

// BannerKk returns the value of the "banner_kk" field in the mutation.
func (m *SwiperMutation) BannerKk() (r string, exists bool) {
	v := m.banner_kk
	if v == nil {
		return
	}
	return *v, true
}

// OldBannerKk returns the old "banner_kk" field's value of the Swiper entity.
// If the Swiper object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SwiperMutation) OldBannerKk(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBannerKk is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBannerKk requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBannerKk: %w", err)
	}
	return oldValue.BannerKk, nil
}

// ClearBannerKk clears the value of the "banner_kk" field.
func (m *SwiperMutation) ClearBannerKk() {
	m.banner_kk = nil
	m.clearedFields[swiper.FieldBannerKk] = struct{}{}
}

// BannerKkCleared returns if the "banner_kk" field was cleared in this mutation.
func (m *SwiperMutation) BannerKkCleared() bool {
	_, ok := m.clearedFields[swiper.FieldBannerKk]
	return ok
}

// ResetBannerKk resets all changes to the "banner_kk" field.
func (m *SwiperMutation) ResetBannerKk() {
	m.banner_kk = nil
	delete(m.clearedFields, swiper.FieldBannerKk)
}

// SetContentZh sets the "content_zh" field.
func (m *SwiperMutation) SetContentZh(s string) {
	m.content_zh = &s
}

// ContentZh returns the value of the "content_zh" field in the mutation.
func (m *SwiperMutation) ContentZh() (r string, exists bool) {
	v := m.content_zh
	if v == nil {
		return
	}
	return *v, true
}

// OldContentZh returns the old "content_zh" field's value of the Swiper entity.
// If the Swiper object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SwiperMutation) OldContentZh(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContentZh is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContentZh requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContentZh: %w", err)
	}
	return oldValue.ContentZh, nil
}

// ClearContentZh clears the value of the "content_zh" field.
func (m *SwiperMutation) ClearContentZh() {
	m.content_zh = nil
	m.clearedFields[swiper.FieldContentZh] = struct{}{}
}

// ContentZhCleared returns if the "content_zh" field was cleared in this mutation.
func (m *SwiperMutation) ContentZhCleared() bool {
	_, ok := m.clearedFields[swiper.FieldContentZh]
	return ok
}

// ResetContentZh resets all changes to the "content_zh" field.
func (m *SwiperMutation) ResetContentZh() {
	m.content_zh = nil
	delete(m.clearedFields, swiper.FieldContentZh)
}

// SetContentEn sets the "content_en" field.
func (m *SwiperMutation) SetContentEn(s string) {
	m.content_en = &s
}

// ContentEn returns the value of the "content_en" field in the mutation.
func (m *SwiperMutation) ContentEn() (r string, exists bool) {
	v := m.content_en
	if v == nil {
		return
	}
	return *v, true
}

// OldContentEn returns the old "content_en" field's value of the Swiper entity.
// If the Swiper object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SwiperMutation) OldContentEn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContentEn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContentEn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContentEn: %w", err)
	}
	return oldValue.ContentEn, nil
}

// ClearContentEn clears the value of the "content_en" field.
func (m *SwiperMutation) ClearContentEn() {
	m.content_en = nil
	m.clearedFields[swiper.FieldContentEn] = struct{}{}
}

// ContentEnCleared returns if the "content_en" field was cleared in this mutation.
func (m *SwiperMutation) ContentEnCleared() bool {
	_, ok := m.clearedFields[swiper.FieldContentEn]
	return ok
}

// ResetContentEn resets all changes to the "content_en" field.
func (m *SwiperMutation) ResetContentEn() {
	m.content_en = nil
	delete(m.clearedFields, swiper.FieldContentEn)
}

// SetContentRu sets the "content_ru" field.
func (m *SwiperMutation) SetContentRu(s string) {
	m.content_ru = &s
}

// ContentRu returns the value of the "content_ru" field in the mutation.
func (m *SwiperMutation) ContentRu() (r string, exists bool) {
	v := m.content_ru
	if v == nil {
		return
	}
	return *v, true
}

// OldContentRu returns the old "content_ru" field's value of the Swiper entity.
// If the Swiper object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SwiperMutation) OldContentRu(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContentRu is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContentRu requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContentRu: %w", err)
	}
	return oldValue.ContentRu, nil
}

// ClearContentRu clears the value of the "content_ru" field.
func (m *SwiperMutation) ClearContentRu() {
	m.content_ru = nil
	m.clearedFields[swiper.FieldContentRu] = struct{}{}
}

// ContentRuCleared returns if the "content_ru" field was cleared in this mutation.
func (m *SwiperMutation) ContentRuCleared() bool {
	_, ok := m.clearedFields[swiper.FieldContentRu]
	return ok
}

// ResetContentRu resets all changes to the "content_ru" field.
func (m *SwiperMutation) ResetContentRu() {
	m.content_ru = nil
	delete(m.clearedFields, swiper.FieldContentRu)
}

// SetContentKk sets the "content_kk" field.
func (m *SwiperMutation) SetContentKk(s string) {
	m.content_kk = &s
}

// ContentKk returns the value of the "content_kk" field in the mutation.
func (m *SwiperMutation) ContentKk() (r string, exists bool) {
	v := m.content_kk
	if v == nil {
		return
	}
	return *v, true
}

// OldContentKk returns the old "content_kk" field's value of the Swiper entity.
// If the Swiper object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SwiperMutation) OldContentKk(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContentKk is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContentKk requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContentKk: %w", err)
	}
	return oldValue.ContentKk, nil
}

// ClearContentKk clears the value of the "content_kk" field.
func (m *SwiperMutation) ClearContentKk() {
	m.content_kk = nil
	m.clearedFields[swiper.FieldContentKk] = struct{}{}
}

// ContentKkCleared returns if the "content_kk" field was cleared in this mutation.
func (m *SwiperMutation) ContentKkCleared() bool {
	_, ok := m.clearedFields[swiper.FieldContentKk]
	return ok
}

// ResetContentKk resets all changes to the "content_kk" field.
func (m *SwiperMutation) ResetContentKk() {
	m.content_kk = nil
	delete(m.clearedFields, swiper.FieldContentKk)
}

// SetJumpURL sets the "jump_url" field.
func (m *SwiperMutation) SetJumpURL(s string) {
	m.jump_url = &s
}

// JumpURL returns the value of the "jump_url" field in the mutation.
func (m *SwiperMutation) JumpURL() (r string, exists bool) {
	v := m.jump_url
	if v == nil {
		return
	}
	return *v, true
}

// OldJumpURL returns the old "jump_url" field's value of the Swiper entity.
// If the Swiper object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SwiperMutation) OldJumpURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJumpURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJumpURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJumpURL: %w", err)
	}
	return oldValue.JumpURL, nil
}

// ClearJumpURL clears the value of the "jump_url" field.
func (m *SwiperMutation) ClearJumpURL() {
	m.jump_url = nil
	m.clearedFields[swiper.FieldJumpURL] = struct{}{}
}

// JumpURLCleared returns if the "jump_url" field was cleared in this mutation.
func (m *SwiperMutation) JumpURLCleared() bool {
	_, ok := m.clearedFields[swiper.FieldJumpURL]
	return ok
}

// ResetJumpURL resets all changes to the "jump_url" field.
func (m *SwiperMutation) ResetJumpURL() {
	m.jump_url = nil
	delete(m.clearedFields, swiper.FieldJumpURL)
}

// Where appends a list predicates to the SwiperMutation builder.
func (m *SwiperMutation) Where(ps ...predicate.Swiper) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SwiperMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SwiperMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Swiper, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SwiperMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SwiperMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Swiper).
func (m *SwiperMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SwiperMutation) Fields() []string {
	fields := make([]string, 0, 17)
	if m.created_at != nil {
		fields = append(fields, swiper.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, swiper.FieldUpdatedAt)
	}
	if m.status != nil {
		fields = append(fields, swiper.FieldStatus)
	}
	if m.sort != nil {
		fields = append(fields, swiper.FieldSort)
	}
	if m.title_zh != nil {
		fields = append(fields, swiper.FieldTitleZh)
	}
	if m.title_en != nil {
		fields = append(fields, swiper.FieldTitleEn)
	}
	if m.title_ru != nil {
		fields = append(fields, swiper.FieldTitleRu)
	}
	if m.title_kk != nil {
		fields = append(fields, swiper.FieldTitleKk)
	}
	if m.banner_zh != nil {
		fields = append(fields, swiper.FieldBannerZh)
	}
	if m.banner_en != nil {
		fields = append(fields, swiper.FieldBannerEn)
	}
	if m.banner_ru != nil {
		fields = append(fields, swiper.FieldBannerRu)
	}
	if m.banner_kk != nil {
		fields = append(fields, swiper.FieldBannerKk)
	}
	if m.content_zh != nil {
		fields = append(fields, swiper.FieldContentZh)
	}
	if m.content_en != nil {
		fields = append(fields, swiper.FieldContentEn)
	}
	if m.content_ru != nil {
		fields = append(fields, swiper.FieldContentRu)
	}
	if m.content_kk != nil {
		fields = append(fields, swiper.FieldContentKk)
	}
	if m.jump_url != nil {
		fields = append(fields, swiper.FieldJumpURL)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SwiperMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case swiper.FieldCreatedAt:
		return m.CreatedAt()
	case swiper.FieldUpdatedAt:
		return m.UpdatedAt()
	case swiper.FieldStatus:
		return m.Status()
	case swiper.FieldSort:
		return m.Sort()
	case swiper.FieldTitleZh:
		return m.TitleZh()
	case swiper.FieldTitleEn:
		return m.TitleEn()
	case swiper.FieldTitleRu:
		return m.TitleRu()
	case swiper.FieldTitleKk:
		return m.TitleKk()
	case swiper.FieldBannerZh:
		return m.BannerZh()
	case swiper.FieldBannerEn:
		return m.BannerEn()
	case swiper.FieldBannerRu:
		return m.BannerRu()
	case swiper.FieldBannerKk:
		return m.BannerKk()
	case swiper.FieldContentZh:
		return m.ContentZh()
	case swiper.FieldContentEn:
		return m.ContentEn()
	case swiper.FieldContentRu:
		return m.ContentRu()
	case swiper.FieldContentKk:
		return m.ContentKk()
	case swiper.FieldJumpURL:
		return m.JumpURL()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SwiperMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case swiper.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case swiper.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case swiper.FieldStatus:
		return m.OldStatus(ctx)
	case swiper.FieldSort:
		return m.OldSort(ctx)
	case swiper.FieldTitleZh:
		return m.OldTitleZh(ctx)
	case swiper.FieldTitleEn:
		return m.OldTitleEn(ctx)
	case swiper.FieldTitleRu:
		return m.OldTitleRu(ctx)
	case swiper.FieldTitleKk:
		return m.OldTitleKk(ctx)
	case swiper.FieldBannerZh:
		return m.OldBannerZh(ctx)
	case swiper.FieldBannerEn:
		return m.OldBannerEn(ctx)
	case swiper.FieldBannerRu:
		return m.OldBannerRu(ctx)
	case swiper.FieldBannerKk:
		return m.OldBannerKk(ctx)
	case swiper.FieldContentZh:
		return m.OldContentZh(ctx)
	case swiper.FieldContentEn:
		return m.OldContentEn(ctx)
	case swiper.FieldContentRu:
		return m.OldContentRu(ctx)
	case swiper.FieldContentKk:
		return m.OldContentKk(ctx)
	case swiper.FieldJumpURL:
		return m.OldJumpURL(ctx)
	}
	return nil, fmt.Errorf("unknown Swiper field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SwiperMutation) SetField(name string, value ent.Value) error {
	switch name {
	case swiper.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case swiper.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case swiper.FieldStatus:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case swiper.FieldSort:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSort(v)
		return nil
	case swiper.FieldTitleZh:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitleZh(v)
		return nil
	case swiper.FieldTitleEn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitleEn(v)
		return nil
	case swiper.FieldTitleRu:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitleRu(v)
		return nil
	case swiper.FieldTitleKk:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitleKk(v)
		return nil
	case swiper.FieldBannerZh:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBannerZh(v)
		return nil
	case swiper.FieldBannerEn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBannerEn(v)
		return nil
	case swiper.FieldBannerRu:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBannerRu(v)
		return nil
	case swiper.FieldBannerKk:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBannerKk(v)
		return nil
	case swiper.FieldContentZh:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContentZh(v)
		return nil
	case swiper.FieldContentEn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContentEn(v)
		return nil
	case swiper.FieldContentRu:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContentRu(v)
		return nil
	case swiper.FieldContentKk:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContentKk(v)
		return nil
	case swiper.FieldJumpURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJumpURL(v)
		return nil
	}
	return fmt.Errorf("unknown Swiper field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SwiperMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, swiper.FieldStatus)
	}
	if m.addsort != nil {
		fields = append(fields, swiper.FieldSort)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SwiperMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case swiper.FieldStatus:
		return m.AddedStatus()
	case swiper.FieldSort:
		return m.AddedSort()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SwiperMutation) AddField(name string, value ent.Value) error {
	switch name {
	case swiper.FieldStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	case swiper.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSort(v)
		return nil
	}
	return fmt.Errorf("unknown Swiper numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SwiperMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(swiper.FieldStatus) {
		fields = append(fields, swiper.FieldStatus)
	}
	if m.FieldCleared(swiper.FieldTitleZh) {
		fields = append(fields, swiper.FieldTitleZh)
	}
	if m.FieldCleared(swiper.FieldTitleEn) {
		fields = append(fields, swiper.FieldTitleEn)
	}
	if m.FieldCleared(swiper.FieldTitleRu) {
		fields = append(fields, swiper.FieldTitleRu)
	}
	if m.FieldCleared(swiper.FieldTitleKk) {
		fields = append(fields, swiper.FieldTitleKk)
	}
	if m.FieldCleared(swiper.FieldBannerZh) {
		fields = append(fields, swiper.FieldBannerZh)
	}
	if m.FieldCleared(swiper.FieldBannerEn) {
		fields = append(fields, swiper.FieldBannerEn)
	}
	if m.FieldCleared(swiper.FieldBannerRu) {
		fields = append(fields, swiper.FieldBannerRu)
	}
	if m.FieldCleared(swiper.FieldBannerKk) {
		fields = append(fields, swiper.FieldBannerKk)
	}
	if m.FieldCleared(swiper.FieldContentZh) {
		fields = append(fields, swiper.FieldContentZh)
	}
	if m.FieldCleared(swiper.FieldContentEn) {
		fields = append(fields, swiper.FieldContentEn)
	}
	if m.FieldCleared(swiper.FieldContentRu) {
		fields = append(fields, swiper.FieldContentRu)
	}
	if m.FieldCleared(swiper.FieldContentKk) {
		fields = append(fields, swiper.FieldContentKk)
	}
	if m.FieldCleared(swiper.FieldJumpURL) {
		fields = append(fields, swiper.FieldJumpURL)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SwiperMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SwiperMutation) ClearField(name string) error {
	switch name {
	case swiper.FieldStatus:
		m.ClearStatus()
		return nil
	case swiper.FieldTitleZh:
		m.ClearTitleZh()
		return nil
	case swiper.FieldTitleEn:
		m.ClearTitleEn()
		return nil
	case swiper.FieldTitleRu:
		m.ClearTitleRu()
		return nil
	case swiper.FieldTitleKk:
		m.ClearTitleKk()
		return nil
	case swiper.FieldBannerZh:
		m.ClearBannerZh()
		return nil
	case swiper.FieldBannerEn:
		m.ClearBannerEn()
		return nil
	case swiper.FieldBannerRu:
		m.ClearBannerRu()
		return nil
	case swiper.FieldBannerKk:
		m.ClearBannerKk()
		return nil
	case swiper.FieldContentZh:
		m.ClearContentZh()
		return nil
	case swiper.FieldContentEn:
		m.ClearContentEn()
		return nil
	case swiper.FieldContentRu:
		m.ClearContentRu()
		return nil
	case swiper.FieldContentKk:
		m.ClearContentKk()
		return nil
	case swiper.FieldJumpURL:
		m.ClearJumpURL()
		return nil
	}
	return fmt.Errorf("unknown Swiper nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SwiperMutation) ResetField(name string) error {
	switch name {
	case swiper.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case swiper.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case swiper.FieldStatus:
		m.ResetStatus()
		return nil
	case swiper.FieldSort:
		m.ResetSort()
		return nil
	case swiper.FieldTitleZh:
		m.ResetTitleZh()
		return nil
	case swiper.FieldTitleEn:
		m.ResetTitleEn()
		return nil
	case swiper.FieldTitleRu:
		m.ResetTitleRu()
		return nil
	case swiper.FieldTitleKk:
		m.ResetTitleKk()
		return nil
	case swiper.FieldBannerZh:
		m.ResetBannerZh()
		return nil
	case swiper.FieldBannerEn:
		m.ResetBannerEn()
		return nil
	case swiper.FieldBannerRu:
		m.ResetBannerRu()
		return nil
	case swiper.FieldBannerKk:
		m.ResetBannerKk()
		return nil
	case swiper.FieldContentZh:
		m.ResetContentZh()
		return nil
	case swiper.FieldContentEn:
		m.ResetContentEn()
		return nil
	case swiper.FieldContentRu:
		m.ResetContentRu()
		return nil
	case swiper.FieldContentKk:
		m.ResetContentKk()
		return nil
	case swiper.FieldJumpURL:
		m.ResetJumpURL()
		return nil
	}
	return fmt.Errorf("unknown Swiper field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SwiperMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SwiperMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SwiperMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SwiperMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SwiperMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SwiperMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SwiperMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Swiper unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SwiperMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Swiper edge %s", name)
}

// TokenMutation represents an operation that mutates the Token nodes in the graph.
type TokenMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *time.Time
	updated_at    *time.Time
	status        *uint8
	addstatus     *int8
	uuid          *uuid.UUID
	token         *string
	username      *string
	source        *string
	expired_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Token, error)
	predicates    []predicate.Token
}

var _ ent.Mutation = (*TokenMutation)(nil)

// tokenOption allows management of the mutation configuration using functional options.
type tokenOption func(*TokenMutation)

// newTokenMutation creates new mutation for the Token entity.
func newTokenMutation(c config, op Op, opts ...tokenOption) *TokenMutation {
	m := &TokenMutation{
		config:        c,
		op:            op,
		typ:           TypeToken,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTokenID sets the ID field of the mutation.
func withTokenID(id uuid.UUID) tokenOption {
	return func(m *TokenMutation) {
		var (
			err   error
			once  sync.Once
			value *Token
		)
		m.oldValue = func(ctx context.Context) (*Token, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Token.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withToken sets the old Token of the mutation.
func withToken(node *Token) tokenOption {
	return func(m *TokenMutation) {
		m.oldValue = func(context.Context) (*Token, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TokenMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TokenMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Token entities.
func (m *TokenMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TokenMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TokenMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Token.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *TokenMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TokenMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Token entity.
// If the Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TokenMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TokenMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TokenMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Token entity.
// If the Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TokenMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetStatus sets the "status" field.
func (m *TokenMutation) SetStatus(u uint8) {
	m.status = &u
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *TokenMutation) Status() (r uint8, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Token entity.
// If the Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenMutation) OldStatus(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds u to the "status" field.
func (m *TokenMutation) AddStatus(u int8) {
	if m.addstatus != nil {
		*m.addstatus += u
	} else {
		m.addstatus = &u
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *TokenMutation) AddedStatus() (r int8, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ClearStatus clears the value of the "status" field.
func (m *TokenMutation) ClearStatus() {
	m.status = nil
	m.addstatus = nil
	m.clearedFields[token.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *TokenMutation) StatusCleared() bool {
	_, ok := m.clearedFields[token.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *TokenMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
	delete(m.clearedFields, token.FieldStatus)
}

// SetUUID sets the "uuid" field.
func (m *TokenMutation) SetUUID(u uuid.UUID) {
	m.uuid = &u
}

// UUID returns the value of the "uuid" field in the mutation.
func (m *TokenMutation) UUID() (r uuid.UUID, exists bool) {
	v := m.uuid
	if v == nil {
		return
	}
	return *v, true
}

// OldUUID returns the old "uuid" field's value of the Token entity.
// If the Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenMutation) OldUUID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUUID: %w", err)
	}
	return oldValue.UUID, nil
}

// ResetUUID resets all changes to the "uuid" field.
func (m *TokenMutation) ResetUUID() {
	m.uuid = nil
}

// SetToken sets the "token" field.
func (m *TokenMutation) SetToken(s string) {
	m.token = &s
}

// Token returns the value of the "token" field in the mutation.
func (m *TokenMutation) Token() (r string, exists bool) {
	v := m.token
	if v == nil {
		return
	}
	return *v, true
}

// OldToken returns the old "token" field's value of the Token entity.
// If the Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenMutation) OldToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToken: %w", err)
	}
	return oldValue.Token, nil
}

// ResetToken resets all changes to the "token" field.
func (m *TokenMutation) ResetToken() {
	m.token = nil
}

// SetUsername sets the "username" field.
func (m *TokenMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *TokenMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the Token entity.
// If the Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *TokenMutation) ResetUsername() {
	m.username = nil
}

// SetSource sets the "source" field.
func (m *TokenMutation) SetSource(s string) {
	m.source = &s
}

// Source returns the value of the "source" field in the mutation.
func (m *TokenMutation) Source() (r string, exists bool) {
	v := m.source
	if v == nil {
		return
	}
	return *v, true
}

// OldSource returns the old "source" field's value of the Token entity.
// If the Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenMutation) OldSource(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSource is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSource requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSource: %w", err)
	}
	return oldValue.Source, nil
}

// ResetSource resets all changes to the "source" field.
func (m *TokenMutation) ResetSource() {
	m.source = nil
}

// SetExpiredAt sets the "expired_at" field.
func (m *TokenMutation) SetExpiredAt(t time.Time) {
	m.expired_at = &t
}

// ExpiredAt returns the value of the "expired_at" field in the mutation.
func (m *TokenMutation) ExpiredAt() (r time.Time, exists bool) {
	v := m.expired_at
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiredAt returns the old "expired_at" field's value of the Token entity.
// If the Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenMutation) OldExpiredAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiredAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiredAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiredAt: %w", err)
	}
	return oldValue.ExpiredAt, nil
}

// ResetExpiredAt resets all changes to the "expired_at" field.
func (m *TokenMutation) ResetExpiredAt() {
	m.expired_at = nil
}

// Where appends a list predicates to the TokenMutation builder.
func (m *TokenMutation) Where(ps ...predicate.Token) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TokenMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TokenMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Token, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TokenMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TokenMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Token).
func (m *TokenMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TokenMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.created_at != nil {
		fields = append(fields, token.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, token.FieldUpdatedAt)
	}
	if m.status != nil {
		fields = append(fields, token.FieldStatus)
	}
	if m.uuid != nil {
		fields = append(fields, token.FieldUUID)
	}
	if m.token != nil {
		fields = append(fields, token.FieldToken)
	}
	if m.username != nil {
		fields = append(fields, token.FieldUsername)
	}
	if m.source != nil {
		fields = append(fields, token.FieldSource)
	}
	if m.expired_at != nil {
		fields = append(fields, token.FieldExpiredAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TokenMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case token.FieldCreatedAt:
		return m.CreatedAt()
	case token.FieldUpdatedAt:
		return m.UpdatedAt()
	case token.FieldStatus:
		return m.Status()
	case token.FieldUUID:
		return m.UUID()
	case token.FieldToken:
		return m.Token()
	case token.FieldUsername:
		return m.Username()
	case token.FieldSource:
		return m.Source()
	case token.FieldExpiredAt:
		return m.ExpiredAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TokenMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case token.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case token.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case token.FieldStatus:
		return m.OldStatus(ctx)
	case token.FieldUUID:
		return m.OldUUID(ctx)
	case token.FieldToken:
		return m.OldToken(ctx)
	case token.FieldUsername:
		return m.OldUsername(ctx)
	case token.FieldSource:
		return m.OldSource(ctx)
	case token.FieldExpiredAt:
		return m.OldExpiredAt(ctx)
	}
	return nil, fmt.Errorf("unknown Token field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TokenMutation) SetField(name string, value ent.Value) error {
	switch name {
	case token.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case token.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case token.FieldStatus:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case token.FieldUUID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUUID(v)
		return nil
	case token.FieldToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToken(v)
		return nil
	case token.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case token.FieldSource:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSource(v)
		return nil
	case token.FieldExpiredAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiredAt(v)
		return nil
	}
	return fmt.Errorf("unknown Token field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TokenMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, token.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TokenMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case token.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TokenMutation) AddField(name string, value ent.Value) error {
	switch name {
	case token.FieldStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Token numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TokenMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(token.FieldStatus) {
		fields = append(fields, token.FieldStatus)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TokenMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TokenMutation) ClearField(name string) error {
	switch name {
	case token.FieldStatus:
		m.ClearStatus()
		return nil
	}
	return fmt.Errorf("unknown Token nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TokenMutation) ResetField(name string) error {
	switch name {
	case token.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case token.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case token.FieldStatus:
		m.ResetStatus()
		return nil
	case token.FieldUUID:
		m.ResetUUID()
		return nil
	case token.FieldToken:
		m.ResetToken()
		return nil
	case token.FieldUsername:
		m.ResetUsername()
		return nil
	case token.FieldSource:
		m.ResetSource()
		return nil
	case token.FieldExpiredAt:
		m.ResetExpiredAt()
		return nil
	}
	return fmt.Errorf("unknown Token field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TokenMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TokenMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TokenMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TokenMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TokenMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TokenMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TokenMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Token unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TokenMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Token edge %s", name)
}
